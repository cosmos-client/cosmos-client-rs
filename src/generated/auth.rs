// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/auth/v1beta1/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct BaseAccount {
    // message fields
    pub address: ::std::string::String,
    pub pub_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub account_number: u64,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BaseAccount {
    fn default() -> &'a BaseAccount {
        <BaseAccount as ::protobuf::Message>::default_instance()
    }
}

impl BaseAccount {
    pub fn new() -> BaseAccount {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .google.protobuf.Any pub_key = 2;


    pub fn get_pub_key(&self) -> &::protobuf::well_known_types::Any {
        self.pub_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.pub_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // uint64 account_number = 3;


    pub fn get_account_number(&self) -> u64 {
        self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: u64) {
        self.account_number = v;
    }

    // uint64 sequence = 4;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for BaseAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_number = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.account_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(4, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.account_number != 0 {
            os.write_uint64(3, self.account_number)?;
        }
        if self.sequence != 0 {
            os.write_uint64(4, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BaseAccount {
        BaseAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &BaseAccount| { &m.address },
                |m: &mut BaseAccount| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "pub_key",
                |m: &BaseAccount| { &m.pub_key },
                |m: &mut BaseAccount| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "account_number",
                |m: &BaseAccount| { &m.account_number },
                |m: &mut BaseAccount| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &BaseAccount| { &m.sequence },
                |m: &mut BaseAccount| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BaseAccount>(
                "BaseAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BaseAccount {
        static instance: ::protobuf::rt::LazyV2<BaseAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BaseAccount::new)
    }
}

impl ::protobuf::Clear for BaseAccount {
    fn clear(&mut self) {
        self.address.clear();
        self.pub_key.clear();
        self.account_number = 0;
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BaseAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModuleAccount {
    // message fields
    pub base_account: ::protobuf::SingularPtrField<BaseAccount>,
    pub name: ::std::string::String,
    pub permissions: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleAccount {
    fn default() -> &'a ModuleAccount {
        <ModuleAccount as ::protobuf::Message>::default_instance()
    }
}

impl ModuleAccount {
    pub fn new() -> ModuleAccount {
        ::std::default::Default::default()
    }

    // .cosmos.auth.v1beta1.BaseAccount base_account = 1;


    pub fn get_base_account(&self) -> &BaseAccount {
        self.base_account.as_ref().unwrap_or_else(|| <BaseAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_account(&mut self) {
        self.base_account.clear();
    }

    pub fn has_base_account(&self) -> bool {
        self.base_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_account(&mut self, v: BaseAccount) {
        self.base_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_account(&mut self) -> &mut BaseAccount {
        if self.base_account.is_none() {
            self.base_account.set_default();
        }
        self.base_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_account(&mut self) -> BaseAccount {
        self.base_account.take().unwrap_or_else(|| BaseAccount::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string permissions = 3;


    pub fn get_permissions(&self) -> &[::std::string::String] {
        &self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.permissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_permissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.permissions
    }

    // Take field
    pub fn take_permissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.permissions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ModuleAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_account)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.permissions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.permissions {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.permissions {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleAccount {
        ModuleAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BaseAccount>>(
                "base_account",
                |m: &ModuleAccount| { &m.base_account },
                |m: &mut ModuleAccount| { &mut m.base_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ModuleAccount| { &m.name },
                |m: &mut ModuleAccount| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "permissions",
                |m: &ModuleAccount| { &m.permissions },
                |m: &mut ModuleAccount| { &mut m.permissions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModuleAccount>(
                "ModuleAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModuleAccount {
        static instance: ::protobuf::rt::LazyV2<ModuleAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModuleAccount::new)
    }
}

impl ::protobuf::Clear for ModuleAccount {
    fn clear(&mut self) {
        self.base_account.clear();
        self.name.clear();
        self.permissions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModuleAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub max_memo_characters: u64,
    pub tx_sig_limit: u64,
    pub tx_size_cost_per_byte: u64,
    pub sig_verify_cost_ed25519: u64,
    pub sig_verify_cost_secp256k1: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // uint64 max_memo_characters = 1;


    pub fn get_max_memo_characters(&self) -> u64 {
        self.max_memo_characters
    }
    pub fn clear_max_memo_characters(&mut self) {
        self.max_memo_characters = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_memo_characters(&mut self, v: u64) {
        self.max_memo_characters = v;
    }

    // uint64 tx_sig_limit = 2;


    pub fn get_tx_sig_limit(&self) -> u64 {
        self.tx_sig_limit
    }
    pub fn clear_tx_sig_limit(&mut self) {
        self.tx_sig_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_sig_limit(&mut self, v: u64) {
        self.tx_sig_limit = v;
    }

    // uint64 tx_size_cost_per_byte = 3;


    pub fn get_tx_size_cost_per_byte(&self) -> u64 {
        self.tx_size_cost_per_byte
    }
    pub fn clear_tx_size_cost_per_byte(&mut self) {
        self.tx_size_cost_per_byte = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_size_cost_per_byte(&mut self, v: u64) {
        self.tx_size_cost_per_byte = v;
    }

    // uint64 sig_verify_cost_ed25519 = 4;


    pub fn get_sig_verify_cost_ed25519(&self) -> u64 {
        self.sig_verify_cost_ed25519
    }
    pub fn clear_sig_verify_cost_ed25519(&mut self) {
        self.sig_verify_cost_ed25519 = 0;
    }

    // Param is passed by value, moved
    pub fn set_sig_verify_cost_ed25519(&mut self, v: u64) {
        self.sig_verify_cost_ed25519 = v;
    }

    // uint64 sig_verify_cost_secp256k1 = 5;


    pub fn get_sig_verify_cost_secp256k1(&self) -> u64 {
        self.sig_verify_cost_secp256k1
    }
    pub fn clear_sig_verify_cost_secp256k1(&mut self) {
        self.sig_verify_cost_secp256k1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_sig_verify_cost_secp256k1(&mut self, v: u64) {
        self.sig_verify_cost_secp256k1 = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_memo_characters = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_sig_limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_size_cost_per_byte = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sig_verify_cost_ed25519 = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sig_verify_cost_secp256k1 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_memo_characters != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_memo_characters, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_sig_limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tx_sig_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_size_cost_per_byte != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tx_size_cost_per_byte, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sig_verify_cost_ed25519 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.sig_verify_cost_ed25519, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            my_size += ::protobuf::rt::value_size(5, self.sig_verify_cost_secp256k1, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.max_memo_characters != 0 {
            os.write_uint64(1, self.max_memo_characters)?;
        }
        if self.tx_sig_limit != 0 {
            os.write_uint64(2, self.tx_sig_limit)?;
        }
        if self.tx_size_cost_per_byte != 0 {
            os.write_uint64(3, self.tx_size_cost_per_byte)?;
        }
        if self.sig_verify_cost_ed25519 != 0 {
            os.write_uint64(4, self.sig_verify_cost_ed25519)?;
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            os.write_uint64(5, self.sig_verify_cost_secp256k1)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_memo_characters",
                |m: &Params| { &m.max_memo_characters },
                |m: &mut Params| { &mut m.max_memo_characters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "tx_sig_limit",
                |m: &Params| { &m.tx_sig_limit },
                |m: &mut Params| { &mut m.tx_sig_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "tx_size_cost_per_byte",
                |m: &Params| { &m.tx_size_cost_per_byte },
                |m: &mut Params| { &mut m.tx_size_cost_per_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sig_verify_cost_ed25519",
                |m: &Params| { &m.sig_verify_cost_ed25519 },
                |m: &mut Params| { &mut m.sig_verify_cost_ed25519 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sig_verify_cost_secp256k1",
                |m: &Params| { &m.sig_verify_cost_secp256k1 },
                |m: &mut Params| { &mut m.sig_verify_cost_secp256k1 },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.max_memo_characters = 0;
        self.tx_sig_limit = 0;
        self.tx_size_cost_per_byte = 0;
        self.sig_verify_cost_ed25519 = 0;
        self.sig_verify_cost_secp256k1 = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/auth/v1beta1/auth.proto\x12\x13cosmos.auth.v1beta1\x1a\x19c\
    osmos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/proto\
    buf/any.proto\"\xfd\x01\n\x0bBaseAccount\x12\x18\n\x07address\x18\x01\
    \x20\x01(\tR\x07address\x12\\\n\x07pub_key\x18\x02\x20\x01(\x0b2\x14.goo\
    gle.protobuf.AnyR\x06pubKeyB-\xea\xde\x1f\x14public_key,omitempty\xf2\
    \xde\x1f\x11yaml:\"public_key\"\x12@\n\x0eaccount_number\x18\x03\x20\x01\
    (\x04R\raccountNumberB\x19\xf2\xde\x1f\x15yaml:\"account_number\"\x12\
    \x1a\n\x08sequence\x18\x04\x20\x01(\x04R\x08sequence:\x18\x88\xa0\x1f\0\
    \x98\xa0\x1f\0\xd2\xb4-\x08AccountI\xe8\xa0\x1f\0\"\xc3\x01\n\rModuleAcc\
    ount\x12`\n\x0cbase_account\x18\x01\x20\x01(\x0b2\x20.cosmos.auth.v1beta\
    1.BaseAccountR\x0bbaseAccountB\x1b\xf2\xde\x1f\x13yaml:\"base_account\"\
    \xd0\xde\x1f\x01\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x20\n\
    \x0bpermissions\x18\x03\x20\x03(\tR\x0bpermissions:\x1a\x88\xa0\x1f\0\
    \x98\xa0\x1f\0\xd2\xb4-\x0eModuleAccountI\"\xdf\x03\n\x06Params\x12N\n\
    \x13max_memo_characters\x18\x01\x20\x01(\x04R\x11maxMemoCharactersB\x1e\
    \xf2\xde\x1f\x1ayaml:\"max_memo_characters\"\x129\n\x0ctx_sig_limit\x18\
    \x02\x20\x01(\x04R\ntxSigLimitB\x17\xf2\xde\x1f\x13yaml:\"tx_sig_limit\"\
    \x12R\n\x15tx_size_cost_per_byte\x18\x03\x20\x01(\x04R\x11txSizeCostPerB\
    yteB\x20\xf2\xde\x1f\x1cyaml:\"tx_size_cost_per_byte\"\x12q\n\x17sig_ver\
    ify_cost_ed25519\x18\x04\x20\x01(\x04R\x14sigVerifyCostEd25519B:\xf2\xde\
    \x1f\x1eyaml:\"sig_verify_cost_ed25519\"\xe2\xde\x1f\x14SigVerifyCostED2\
    5519\x12y\n\x19sig_verify_cost_secp256k1\x18\x05\x20\x01(\x04R\x16sigVer\
    ifyCostSecp256k1B>\xe2\xde\x1f\x16SigVerifyCostSecp256k1\xf2\xde\x1f\x20\
    yaml:\"sig_verify_cost_secp256k1\":\x08\x98\xa0\x1f\0\xe8\xa0\x1f\x01B+Z\
    )github.com/cosmos/cosmos-sdk/x/auth/typesJ\xe8\x0e\n\x06\x12\x04\0\01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x1b\
    \n\t\n\x02\x03\0\x12\x03\x03\x07\"\n\t\n\x02\x03\x01\x12\x03\x04\x07\x1d\
    \n\t\n\x02\x03\x02\x12\x03\x05\x07\"\n\x08\n\x01\x08\x12\x03\x07\0@\n\t\
    \n\x02\x08\x0b\x12\x03\x07\0@\n\xdc\x01\n\x02\x04\0\x12\x04\x0c\0\x18\
    \x01\x1a\xcf\x01\x20BaseAccount\x20defines\x20a\x20base\x20account\x20ty\
    pe.\x20It\x20contains\x20all\x20the\x20necessary\x20fields\n\x20for\x20b\
    asic\x20account\x20functionality.\x20Any\x20custom\x20account\x20type\
    \x20should\x20extend\x20this\n\x20type\x20for\x20additional\x20functiona\
    lity\x20(e.g.\x20vesting).\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x13\n\n\
    \n\x03\x04\0\x07\x12\x03\r\x02.\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\
    \r\x02.\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02.\n\r\n\x06\x04\0\x07\x83\xf4\
    \x03\x12\x03\x0e\x02.\n\n\n\x03\x04\0\x07\x12\x03\x0f\x02.\n\r\n\x06\x04\
    \0\x07\x8d\xf4\x03\x12\x03\x0f\x02.\n\n\n\x03\x04\0\x07\x12\x03\x11\x02:\
    \n\r\n\x06\x04\0\x07\xca\xd6\x05\x12\x03\x11\x02:\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\x13\x02\"\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x13\x02\x11:\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x13\x16\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x13\x20!\n\
    \x0c\n\x04\x04\0\x02\x01\x12\x04\x14\x02\x15c\n\r\n\x05\x04\0\x02\x01\
    \x04\x12\x04\x14\x02\x13\"\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x14\x02\
    \x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x14\x16\x1d\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x14\x20!\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x15\
    \x06b\n\x0f\n\x08\x04\0\x02\x01\x08\xed\xfb\x03\x12\x03\x15\x073\n\x0f\n\
    \x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x155a\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x16\x02O\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x16\x02\x15c\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x16\t\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x16\x1a\
    \x1b\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x16\x1cN\n\x0f\n\x08\x04\0\
    \x02\x02\x08\xee\xfb\x03\x12\x03\x16\x1dM\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x17\x02\x1c\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x17\x02\x16O\n\x0c\
    \n\x05\x04\0\x02\x03\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x17\t\x11\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x17\x1a\x1b\
    \nV\n\x02\x04\x01\x12\x04\x1b\0#\x01\x1aJ\x20ModuleAccount\x20defines\
    \x20an\x20account\x20for\x20modules\x20that\x20holds\x20coins\x20on\x20a\
    \x20pool.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08\x15\n\n\n\x03\x04\x01\
    \x07\x12\x03\x1c\x025\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1c\x025\
    \n\n\n\x03\x04\x01\x07\x12\x03\x1d\x025\n\r\n\x06\x04\x01\x07\x83\xf4\
    \x03\x12\x03\x1d\x025\n\n\n\x03\x04\x01\x07\x12\x03\x1e\x02@\n\r\n\x06\
    \x04\x01\x07\xca\xd6\x05\x12\x03\x1e\x02@\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x20\x02n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x20\x02\x1e@\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x20\x02\r\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x20\x12\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20!\"\n\x0c\
    \n\x05\x04\x01\x02\0\x08\x12\x03\x20#m\n\x0f\n\x08\x04\x01\x02\0\x08\xea\
    \xfb\x03\x12\x03\x20$<\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\x03\x12\x03\
    \x20>l\n\x0b\n\x04\x04\x01\x02\x01\x12\x03!\x02#\n\r\n\x05\x04\x01\x02\
    \x01\x04\x12\x04!\x02\x20n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03!\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03!\x12\x16\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03!!\"\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\"\x02#\
    \n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\"\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\"\x12\
    \x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\"!\"\n@\n\x02\x04\x02\x12\
    \x04&\01\x01\x1a4\x20Params\x20defines\x20the\x20parameters\x20for\x20th\
    e\x20auth\x20module.\n\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x0e\n\n\n\x03\
    \x04\x02\x07\x12\x03'\x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\x03\x12\x03'\
    \x02-\n\n\n\x03\x04\x02\x07\x12\x03(\x02.\n\r\n\x06\x04\x02\x07\x83\xf4\
    \x03\x12\x03(\x02.\n\x0b\n\x04\x04\x02\x02\0\x12\x03*\x02]\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04*\x02(.\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03*\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\t\x1c\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03*#$\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03*%\\\n\x0f\n\
    \x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03*&[\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03+\x02V\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04+\x02*]\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03+\t\x15\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03+#$\n\x0c\n\
    \x05\x04\x02\x02\x01\x08\x12\x03+%U\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\
    \xfb\x03\x12\x03+&T\n\x0b\n\x04\x04\x02\x02\x02\x12\x03,\x02_\n\r\n\x05\
    \x04\x02\x02\x02\x04\x12\x04,\x02+V\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03,\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03,\t\x1e\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03,#$\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03,\
    %^\n\x0f\n\x08\x04\x02\x02\x02\x08\xee\xfb\x03\x12\x03,&]\n\x0c\n\x04\
    \x04\x02\x02\x03\x12\x04-\x02.s\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04-\
    \x02,_\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03-\t\x20\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03-\
    #$\n\x0c\n\x05\x04\x02\x02\x03\x08\x12\x03.\x06r\n\x0f\n\x08\x04\x02\x02\
    \x03\x08\xec\xfb\x03\x12\x03.\x076\n\x0f\n\x08\x04\x02\x02\x03\x08\xee\
    \xfb\x03\x12\x03.8q\n\x0c\n\x04\x04\x02\x02\x04\x12\x04/\x020w\n\r\n\x05\
    \x04\x02\x02\x04\x04\x12\x04/\x02.s\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\
    \x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03/\t\"\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03/%&\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x030\
    \x06v\n\x0f\n\x08\x04\x02\x02\x04\x08\xec\xfb\x03\x12\x030\x078\n\x0f\n\
    \x08\x04\x02\x02\x04\x08\xee\xfb\x03\x12\x030:ub\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
