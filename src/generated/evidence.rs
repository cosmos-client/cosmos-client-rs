// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/types/evidence.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Evidence {
    // message oneof groups
    pub sum: ::std::option::Option<Evidence_oneof_sum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Evidence {
    fn default() -> &'a Evidence {
        <Evidence as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Evidence_oneof_sum {
    duplicate_vote_evidence(DuplicateVoteEvidence),
    light_client_attack_evidence(LightClientAttackEvidence),
}

impl Evidence {
    pub fn new() -> Evidence {
        ::std::default::Default::default()
    }

    // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1;


    pub fn get_duplicate_vote_evidence(&self) -> &DuplicateVoteEvidence {
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(ref v)) => v,
            _ => <DuplicateVoteEvidence as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_duplicate_vote_evidence(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_duplicate_vote_evidence(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duplicate_vote_evidence(&mut self, v: DuplicateVoteEvidence) {
        self.sum = ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duplicate_vote_evidence(&mut self) -> &mut DuplicateVoteEvidence {
        if let ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(DuplicateVoteEvidence::new()));
        }
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duplicate_vote_evidence(&mut self) -> DuplicateVoteEvidence {
        if self.has_duplicate_vote_evidence() {
            match self.sum.take() {
                ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(v)) => v,
                _ => panic!(),
            }
        } else {
            DuplicateVoteEvidence::new()
        }
    }

    // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2;


    pub fn get_light_client_attack_evidence(&self) -> &LightClientAttackEvidence {
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(ref v)) => v,
            _ => <LightClientAttackEvidence as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_light_client_attack_evidence(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_light_client_attack_evidence(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_light_client_attack_evidence(&mut self, v: LightClientAttackEvidence) {
        self.sum = ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(v))
    }

    // Mutable pointer to the field.
    pub fn mut_light_client_attack_evidence(&mut self) -> &mut LightClientAttackEvidence {
        if let ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(LightClientAttackEvidence::new()));
        }
        match self.sum {
            ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_light_client_attack_evidence(&mut self) -> LightClientAttackEvidence {
        if self.has_light_client_attack_evidence() {
            match self.sum.take() {
                ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(v)) => v,
                _ => panic!(),
            }
        } else {
            LightClientAttackEvidence::new()
        }
    }
}

impl ::protobuf::Message for Evidence {
    fn is_initialized(&self) -> bool {
        if let Some(Evidence_oneof_sum::duplicate_vote_evidence(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Evidence_oneof_sum::light_client_attack_evidence(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(Evidence_oneof_sum::duplicate_vote_evidence(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(Evidence_oneof_sum::light_client_attack_evidence(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &Evidence_oneof_sum::duplicate_vote_evidence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Evidence_oneof_sum::light_client_attack_evidence(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &Evidence_oneof_sum::duplicate_vote_evidence(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Evidence_oneof_sum::light_client_attack_evidence(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Evidence {
        Evidence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DuplicateVoteEvidence>(
                "duplicate_vote_evidence",
                Evidence::has_duplicate_vote_evidence,
                Evidence::get_duplicate_vote_evidence,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LightClientAttackEvidence>(
                "light_client_attack_evidence",
                Evidence::has_light_client_attack_evidence,
                Evidence::get_light_client_attack_evidence,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Evidence>(
                "Evidence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Evidence {
        static instance: ::protobuf::rt::LazyV2<Evidence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Evidence::new)
    }
}

impl ::protobuf::Clear for Evidence {
    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Evidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Evidence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DuplicateVoteEvidence {
    // message fields
    pub vote_a: ::protobuf::SingularPtrField<super::types::Vote>,
    pub vote_b: ::protobuf::SingularPtrField<super::types::Vote>,
    pub total_voting_power: i64,
    pub validator_power: i64,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DuplicateVoteEvidence {
    fn default() -> &'a DuplicateVoteEvidence {
        <DuplicateVoteEvidence as ::protobuf::Message>::default_instance()
    }
}

impl DuplicateVoteEvidence {
    pub fn new() -> DuplicateVoteEvidence {
        ::std::default::Default::default()
    }

    // .tendermint.types.Vote vote_a = 1;


    pub fn get_vote_a(&self) -> &super::types::Vote {
        self.vote_a.as_ref().unwrap_or_else(|| <super::types::Vote as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vote_a(&mut self) {
        self.vote_a.clear();
    }

    pub fn has_vote_a(&self) -> bool {
        self.vote_a.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vote_a(&mut self, v: super::types::Vote) {
        self.vote_a = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vote_a(&mut self) -> &mut super::types::Vote {
        if self.vote_a.is_none() {
            self.vote_a.set_default();
        }
        self.vote_a.as_mut().unwrap()
    }

    // Take field
    pub fn take_vote_a(&mut self) -> super::types::Vote {
        self.vote_a.take().unwrap_or_else(|| super::types::Vote::new())
    }

    // .tendermint.types.Vote vote_b = 2;


    pub fn get_vote_b(&self) -> &super::types::Vote {
        self.vote_b.as_ref().unwrap_or_else(|| <super::types::Vote as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vote_b(&mut self) {
        self.vote_b.clear();
    }

    pub fn has_vote_b(&self) -> bool {
        self.vote_b.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vote_b(&mut self, v: super::types::Vote) {
        self.vote_b = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vote_b(&mut self) -> &mut super::types::Vote {
        if self.vote_b.is_none() {
            self.vote_b.set_default();
        }
        self.vote_b.as_mut().unwrap()
    }

    // Take field
    pub fn take_vote_b(&mut self) -> super::types::Vote {
        self.vote_b.take().unwrap_or_else(|| super::types::Vote::new())
    }

    // int64 total_voting_power = 3;


    pub fn get_total_voting_power(&self) -> i64 {
        self.total_voting_power
    }
    pub fn clear_total_voting_power(&mut self) {
        self.total_voting_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_voting_power(&mut self, v: i64) {
        self.total_voting_power = v;
    }

    // int64 validator_power = 4;


    pub fn get_validator_power(&self) -> i64 {
        self.validator_power
    }
    pub fn clear_validator_power(&mut self) {
        self.validator_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator_power(&mut self, v: i64) {
        self.validator_power = v;
    }

    // .google.protobuf.Timestamp timestamp = 5;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for DuplicateVoteEvidence {
    fn is_initialized(&self) -> bool {
        for v in &self.vote_a {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vote_b {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vote_a)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vote_b)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_voting_power = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.validator_power = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.vote_a.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vote_b.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.total_voting_power != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_voting_power, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.validator_power != 0 {
            my_size += ::protobuf::rt::value_size(4, self.validator_power, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.vote_a.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vote_b.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.total_voting_power != 0 {
            os.write_int64(3, self.total_voting_power)?;
        }
        if self.validator_power != 0 {
            os.write_int64(4, self.validator_power)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DuplicateVoteEvidence {
        DuplicateVoteEvidence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Vote>>(
                "vote_a",
                |m: &DuplicateVoteEvidence| { &m.vote_a },
                |m: &mut DuplicateVoteEvidence| { &mut m.vote_a },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Vote>>(
                "vote_b",
                |m: &DuplicateVoteEvidence| { &m.vote_b },
                |m: &mut DuplicateVoteEvidence| { &mut m.vote_b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "total_voting_power",
                |m: &DuplicateVoteEvidence| { &m.total_voting_power },
                |m: &mut DuplicateVoteEvidence| { &mut m.total_voting_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "validator_power",
                |m: &DuplicateVoteEvidence| { &m.validator_power },
                |m: &mut DuplicateVoteEvidence| { &mut m.validator_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &DuplicateVoteEvidence| { &m.timestamp },
                |m: &mut DuplicateVoteEvidence| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DuplicateVoteEvidence>(
                "DuplicateVoteEvidence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DuplicateVoteEvidence {
        static instance: ::protobuf::rt::LazyV2<DuplicateVoteEvidence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DuplicateVoteEvidence::new)
    }
}

impl ::protobuf::Clear for DuplicateVoteEvidence {
    fn clear(&mut self) {
        self.vote_a.clear();
        self.vote_b.clear();
        self.total_voting_power = 0;
        self.validator_power = 0;
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DuplicateVoteEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DuplicateVoteEvidence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LightClientAttackEvidence {
    // message fields
    pub conflicting_block: ::protobuf::SingularPtrField<super::types::LightBlock>,
    pub common_height: i64,
    pub byzantine_validators: ::protobuf::RepeatedField<super::validator::Validator>,
    pub total_voting_power: i64,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightClientAttackEvidence {
    fn default() -> &'a LightClientAttackEvidence {
        <LightClientAttackEvidence as ::protobuf::Message>::default_instance()
    }
}

impl LightClientAttackEvidence {
    pub fn new() -> LightClientAttackEvidence {
        ::std::default::Default::default()
    }

    // .tendermint.types.LightBlock conflicting_block = 1;


    pub fn get_conflicting_block(&self) -> &super::types::LightBlock {
        self.conflicting_block.as_ref().unwrap_or_else(|| <super::types::LightBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conflicting_block(&mut self) {
        self.conflicting_block.clear();
    }

    pub fn has_conflicting_block(&self) -> bool {
        self.conflicting_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conflicting_block(&mut self, v: super::types::LightBlock) {
        self.conflicting_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conflicting_block(&mut self) -> &mut super::types::LightBlock {
        if self.conflicting_block.is_none() {
            self.conflicting_block.set_default();
        }
        self.conflicting_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_conflicting_block(&mut self) -> super::types::LightBlock {
        self.conflicting_block.take().unwrap_or_else(|| super::types::LightBlock::new())
    }

    // int64 common_height = 2;


    pub fn get_common_height(&self) -> i64 {
        self.common_height
    }
    pub fn clear_common_height(&mut self) {
        self.common_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_common_height(&mut self, v: i64) {
        self.common_height = v;
    }

    // repeated .tendermint.types.Validator byzantine_validators = 3;


    pub fn get_byzantine_validators(&self) -> &[super::validator::Validator] {
        &self.byzantine_validators
    }
    pub fn clear_byzantine_validators(&mut self) {
        self.byzantine_validators.clear();
    }

    // Param is passed by value, moved
    pub fn set_byzantine_validators(&mut self, v: ::protobuf::RepeatedField<super::validator::Validator>) {
        self.byzantine_validators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_byzantine_validators(&mut self) -> &mut ::protobuf::RepeatedField<super::validator::Validator> {
        &mut self.byzantine_validators
    }

    // Take field
    pub fn take_byzantine_validators(&mut self) -> ::protobuf::RepeatedField<super::validator::Validator> {
        ::std::mem::replace(&mut self.byzantine_validators, ::protobuf::RepeatedField::new())
    }

    // int64 total_voting_power = 4;


    pub fn get_total_voting_power(&self) -> i64 {
        self.total_voting_power
    }
    pub fn clear_total_voting_power(&mut self) {
        self.total_voting_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_voting_power(&mut self, v: i64) {
        self.total_voting_power = v;
    }

    // .google.protobuf.Timestamp timestamp = 5;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for LightClientAttackEvidence {
    fn is_initialized(&self) -> bool {
        for v in &self.conflicting_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.byzantine_validators {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conflicting_block)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.common_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.byzantine_validators)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_voting_power = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conflicting_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.common_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.common_height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.byzantine_validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.total_voting_power != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_voting_power, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conflicting_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.common_height != 0 {
            os.write_int64(2, self.common_height)?;
        }
        for v in &self.byzantine_validators {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.total_voting_power != 0 {
            os.write_int64(4, self.total_voting_power)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightClientAttackEvidence {
        LightClientAttackEvidence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::LightBlock>>(
                "conflicting_block",
                |m: &LightClientAttackEvidence| { &m.conflicting_block },
                |m: &mut LightClientAttackEvidence| { &mut m.conflicting_block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "common_height",
                |m: &LightClientAttackEvidence| { &m.common_height },
                |m: &mut LightClientAttackEvidence| { &mut m.common_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::validator::Validator>>(
                "byzantine_validators",
                |m: &LightClientAttackEvidence| { &m.byzantine_validators },
                |m: &mut LightClientAttackEvidence| { &mut m.byzantine_validators },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "total_voting_power",
                |m: &LightClientAttackEvidence| { &m.total_voting_power },
                |m: &mut LightClientAttackEvidence| { &mut m.total_voting_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &LightClientAttackEvidence| { &m.timestamp },
                |m: &mut LightClientAttackEvidence| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightClientAttackEvidence>(
                "LightClientAttackEvidence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightClientAttackEvidence {
        static instance: ::protobuf::rt::LazyV2<LightClientAttackEvidence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightClientAttackEvidence::new)
    }
}

impl ::protobuf::Clear for LightClientAttackEvidence {
    fn clear(&mut self) {
        self.conflicting_block.clear();
        self.common_height = 0;
        self.byzantine_validators.clear();
        self.total_voting_power = 0;
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightClientAttackEvidence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightClientAttackEvidence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvidenceList {
    // message fields
    pub evidence: ::protobuf::RepeatedField<Evidence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvidenceList {
    fn default() -> &'a EvidenceList {
        <EvidenceList as ::protobuf::Message>::default_instance()
    }
}

impl EvidenceList {
    pub fn new() -> EvidenceList {
        ::std::default::Default::default()
    }

    // repeated .tendermint.types.Evidence evidence = 1;


    pub fn get_evidence(&self) -> &[Evidence] {
        &self.evidence
    }
    pub fn clear_evidence(&mut self) {
        self.evidence.clear();
    }

    // Param is passed by value, moved
    pub fn set_evidence(&mut self, v: ::protobuf::RepeatedField<Evidence>) {
        self.evidence = v;
    }

    // Mutable pointer to the field.
    pub fn mut_evidence(&mut self) -> &mut ::protobuf::RepeatedField<Evidence> {
        &mut self.evidence
    }

    // Take field
    pub fn take_evidence(&mut self) -> ::protobuf::RepeatedField<Evidence> {
        ::std::mem::replace(&mut self.evidence, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EvidenceList {
    fn is_initialized(&self) -> bool {
        for v in &self.evidence {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.evidence)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.evidence {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.evidence {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvidenceList {
        EvidenceList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Evidence>>(
                "evidence",
                |m: &EvidenceList| { &m.evidence },
                |m: &mut EvidenceList| { &mut m.evidence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EvidenceList>(
                "EvidenceList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EvidenceList {
        static instance: ::protobuf::rt::LazyV2<EvidenceList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EvidenceList::new)
    }
}

impl ::protobuf::Clear for EvidenceList {
    fn clear(&mut self) {
        self.evidence.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvidenceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvidenceList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ftendermint/types/evidence.proto\x12\x10tendermint.types\x1a\x14gog\
    oproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1ctendermi\
    nt/types/types.proto\x1a\x20tendermint/types/validator.proto\"\xe4\x01\n\
    \x08Evidence\x12a\n\x17duplicate_vote_evidence\x18\x01\x20\x01(\x0b2'.te\
    ndermint.types.DuplicateVoteEvidenceH\0R\x15duplicateVoteEvidence\x12n\n\
    \x1clight_client_attack_evidence\x18\x02\x20\x01(\x0b2+.tendermint.types\
    .LightClientAttackEvidenceH\0R\x19lightClientAttackEvidenceB\x05\n\x03su\
    m\"\x90\x02\n\x15DuplicateVoteEvidence\x12-\n\x06vote_a\x18\x01\x20\x01(\
    \x0b2\x16.tendermint.types.VoteR\x05voteA\x12-\n\x06vote_b\x18\x02\x20\
    \x01(\x0b2\x16.tendermint.types.VoteR\x05voteB\x12,\n\x12total_voting_po\
    wer\x18\x03\x20\x01(\x03R\x10totalVotingPower\x12'\n\x0fvalidator_power\
    \x18\x04\x20\x01(\x03R\x0evalidatorPower\x12B\n\ttimestamp\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\x90\xdf\x1f\
    \x01\xc8\xde\x1f\0\"\xcd\x02\n\x19LightClientAttackEvidence\x12I\n\x11co\
    nflicting_block\x18\x01\x20\x01(\x0b2\x1c.tendermint.types.LightBlockR\
    \x10conflictingBlock\x12#\n\rcommon_height\x18\x02\x20\x01(\x03R\x0ccomm\
    onHeight\x12N\n\x14byzantine_validators\x18\x03\x20\x03(\x0b2\x1b.tender\
    mint.types.ValidatorR\x13byzantineValidators\x12,\n\x12total_voting_powe\
    r\x18\x04\x20\x01(\x03R\x10totalVotingPower\x12B\n\ttimestamp\x18\x05\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\
    \x1f\0\x90\xdf\x1f\x01\"L\n\x0cEvidenceList\x12<\n\x08evidence\x18\x01\
    \x20\x03(\x0b2\x1a.tendermint.types.EvidenceR\x08evidenceB\x04\xc8\xde\
    \x1f\0B9Z7github.com/tendermint/tendermint/proto/tendermint/typesJ\x8a\
    \x0b\n\x06\x12\x04\0\0%\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\x08\x18\n\x08\n\x01\x08\x12\x03\x03\0N\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0N\n\t\n\x02\x03\0\x12\x03\x05\x07\x1d\n\t\n\x02\x03\
    \x01\x12\x03\x06\x07(\n\t\n\x02\x03\x02\x12\x03\x07\x07%\n\t\n\x02\x03\
    \x03\x12\x03\x08\x07)\n\n\n\x02\x04\0\x12\x04\n\0\x0f\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\n\x08\x10\n\x0c\n\x04\x04\0\x08\0\x12\x04\x0b\x02\x0e\x03\
    \n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0b\x08\x0b\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0c\x04?\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04\x19\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0c\x1e5\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0c=>\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x04?\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03\r\x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\
    \x1e:\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r=>\nb\n\x02\x04\x01\x12\x04\
    \x12\0\x18\x01\x1aV\x20DuplicateVoteEvidence\x20contains\x20evidence\x20\
    of\x20a\x20validator\x20signed\x20two\x20conflicting\x20votes.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x12\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x13\x02)\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x13\x02\x12\x1f\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x13\x02\x17\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x13\x1e$\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x13'(\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x14\x02)\n\r\n\x05\x04\x01\x02\x01\x04\x12\
    \x04\x14\x02\x13)\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x14\x02\x17\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x14\x1e$\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x14'(\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x15\x025\n\r\
    \n\x05\x04\x01\x02\x02\x04\x12\x04\x15\x02\x14)\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x15\
    \x1e0\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1534\n\x0b\n\x04\x04\x01\
    \x02\x03\x12\x03\x16\x022\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x16\x02\
    \x155\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x16\x1e-\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03\x1601\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x17\x02g\n\r\n\x05\
    \x04\x01\x02\x04\x04\x12\x04\x17\x02\x162\n\x0c\n\x05\x04\x01\x02\x04\
    \x06\x12\x03\x17\x02\x1b\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x17\x1e\
    '\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x17*+\n\x0c\n\x05\x04\x01\x02\
    \x04\x08\x12\x03\x17,f\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\x12\
    \x03\x17-I\n\x0f\n\x08\x04\x01\x02\x04\x08\xf2\xfb\x03\x12\x03\x17Ke\nv\
    \n\x02\x04\x02\x12\x04\x1b\0!\x01\x1aj\x20LightClientAttackEvidence\x20c\
    ontains\x20evidence\x20of\x20a\x20set\x20of\x20validators\x20attempting\
    \x20to\x20mislead\x20a\x20light\x20client.\n\n\n\n\x03\x04\x02\x01\x12\
    \x03\x1b\x08!\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1c\x02<\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04\x1c\x02\x1b#\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x1c\x02\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1c&7\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1c:;\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1d\
    \x02<\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1d\x02\x1c<\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x1d&3\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1d:;\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03\x1e\x02?\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\
    \x1e\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x1e\x0b%\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x1e&:\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03\x1e=>\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1f\x02=\n\r\n\x05\x04\
    \x02\x02\x03\x04\x12\x04\x1f\x02\x1e?\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1f&8\n\x0c\
    \n\x05\x04\x02\x02\x03\x03\x12\x03\x1f;<\n\x0b\n\x04\x04\x02\x02\x04\x12\
    \x03\x20\x02o\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x20\x02\x1f=\n\x0c\n\
    \x05\x04\x02\x02\x04\x06\x12\x03\x20\x02\x1b\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03\x20&/\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x2023\n\x0c\n\
    \x05\x04\x02\x02\x04\x08\x12\x03\x204n\n\x0f\n\x08\x04\x02\x02\x04\x08\
    \xe9\xfb\x03\x12\x03\x205Q\n\x0f\n\x08\x04\x02\x02\x04\x08\xf2\xfb\x03\
    \x12\x03\x20Sm\n\n\n\x02\x04\x03\x12\x04#\0%\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03#\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03$\x02@\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03$\
    \x0b\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03$\x14\x1c\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03$\x1f\x20\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03$!?\
    \n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03$\">b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
