// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/connection/v1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenInit {
    // message fields
    pub client_id: ::std::string::String,
    pub counterparty: ::protobuf::SingularPtrField<super::connection::Counterparty>,
    pub version: ::protobuf::SingularPtrField<super::connection::Version>,
    pub delay_period: u64,
    pub signer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenInit {
    fn default() -> &'a MsgConnectionOpenInit {
        <MsgConnectionOpenInit as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenInit {
    pub fn new() -> MsgConnectionOpenInit {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .ibc.core.connection.v1.Counterparty counterparty = 2;


    pub fn get_counterparty(&self) -> &super::connection::Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <super::connection::Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: super::connection::Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut super::connection::Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> super::connection::Counterparty {
        self.counterparty.take().unwrap_or_else(|| super::connection::Counterparty::new())
    }

    // .ibc.core.connection.v1.Version version = 3;


    pub fn get_version(&self) -> &super::connection::Version {
        self.version.as_ref().unwrap_or_else(|| <super::connection::Version as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: super::connection::Version) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut super::connection::Version {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> super::connection::Version {
        self.version.take().unwrap_or_else(|| super::connection::Version::new())
    }

    // uint64 delay_period = 4;


    pub fn get_delay_period(&self) -> u64 {
        self.delay_period
    }
    pub fn clear_delay_period(&mut self) {
        self.delay_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay_period(&mut self, v: u64) {
        self.delay_period = v;
    }

    // string signer = 5;


    pub fn get_signer(&self) -> &str {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::string::String) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::string::String {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgConnectionOpenInit {
    fn is_initialized(&self) -> bool {
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.delay_period = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::value_size(4, self.delay_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(4, self.delay_period)?;
        }
        if !self.signer.is_empty() {
            os.write_string(5, &self.signer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenInit {
        MsgConnectionOpenInit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &MsgConnectionOpenInit| { &m.client_id },
                |m: &mut MsgConnectionOpenInit| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::Counterparty>>(
                "counterparty",
                |m: &MsgConnectionOpenInit| { &m.counterparty },
                |m: &mut MsgConnectionOpenInit| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::Version>>(
                "version",
                |m: &MsgConnectionOpenInit| { &m.version },
                |m: &mut MsgConnectionOpenInit| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "delay_period",
                |m: &MsgConnectionOpenInit| { &m.delay_period },
                |m: &mut MsgConnectionOpenInit| { &mut m.delay_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signer",
                |m: &MsgConnectionOpenInit| { &m.signer },
                |m: &mut MsgConnectionOpenInit| { &mut m.signer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenInit>(
                "MsgConnectionOpenInit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenInit {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenInit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenInit::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenInit {
    fn clear(&mut self) {
        self.client_id.clear();
        self.counterparty.clear();
        self.version.clear();
        self.delay_period = 0;
        self.signer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenInit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenInitResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenInitResponse {
    fn default() -> &'a MsgConnectionOpenInitResponse {
        <MsgConnectionOpenInitResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenInitResponse {
    pub fn new() -> MsgConnectionOpenInitResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgConnectionOpenInitResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenInitResponse {
        MsgConnectionOpenInitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenInitResponse>(
                "MsgConnectionOpenInitResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenInitResponse {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenInitResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenInitResponse::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenInitResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenInitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenInitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenTry {
    // message fields
    pub client_id: ::std::string::String,
    pub previous_connection_id: ::std::string::String,
    pub client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub counterparty: ::protobuf::SingularPtrField<super::connection::Counterparty>,
    pub delay_period: u64,
    pub counterparty_versions: ::protobuf::RepeatedField<super::connection::Version>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub proof_init: ::std::vec::Vec<u8>,
    pub proof_client: ::std::vec::Vec<u8>,
    pub proof_consensus: ::std::vec::Vec<u8>,
    pub consensus_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub signer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenTry {
    fn default() -> &'a MsgConnectionOpenTry {
        <MsgConnectionOpenTry as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenTry {
    pub fn new() -> MsgConnectionOpenTry {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string previous_connection_id = 2;


    pub fn get_previous_connection_id(&self) -> &str {
        &self.previous_connection_id
    }
    pub fn clear_previous_connection_id(&mut self) {
        self.previous_connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_connection_id(&mut self, v: ::std::string::String) {
        self.previous_connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_connection_id
    }

    // Take field
    pub fn take_previous_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_connection_id, ::std::string::String::new())
    }

    // .google.protobuf.Any client_state = 3;


    pub fn get_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_state(&mut self) {
        self.client_state.clear();
    }

    pub fn has_client_state(&self) -> bool {
        self.client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.client_state.is_none() {
            self.client_state.set_default();
        }
        self.client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .ibc.core.connection.v1.Counterparty counterparty = 4;


    pub fn get_counterparty(&self) -> &super::connection::Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <super::connection::Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: super::connection::Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut super::connection::Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> super::connection::Counterparty {
        self.counterparty.take().unwrap_or_else(|| super::connection::Counterparty::new())
    }

    // uint64 delay_period = 5;


    pub fn get_delay_period(&self) -> u64 {
        self.delay_period
    }
    pub fn clear_delay_period(&mut self) {
        self.delay_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay_period(&mut self, v: u64) {
        self.delay_period = v;
    }

    // repeated .ibc.core.connection.v1.Version counterparty_versions = 6;


    pub fn get_counterparty_versions(&self) -> &[super::connection::Version] {
        &self.counterparty_versions
    }
    pub fn clear_counterparty_versions(&mut self) {
        self.counterparty_versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_versions(&mut self, v: ::protobuf::RepeatedField<super::connection::Version>) {
        self.counterparty_versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_counterparty_versions(&mut self) -> &mut ::protobuf::RepeatedField<super::connection::Version> {
        &mut self.counterparty_versions
    }

    // Take field
    pub fn take_counterparty_versions(&mut self) -> ::protobuf::RepeatedField<super::connection::Version> {
        ::std::mem::replace(&mut self.counterparty_versions, ::protobuf::RepeatedField::new())
    }

    // .ibc.core.client.v1.Height proof_height = 7;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // bytes proof_init = 8;


    pub fn get_proof_init(&self) -> &[u8] {
        &self.proof_init
    }
    pub fn clear_proof_init(&mut self) {
        self.proof_init.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_init(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_init = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_init(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_init
    }

    // Take field
    pub fn take_proof_init(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_init, ::std::vec::Vec::new())
    }

    // bytes proof_client = 9;


    pub fn get_proof_client(&self) -> &[u8] {
        &self.proof_client
    }
    pub fn clear_proof_client(&mut self) {
        self.proof_client.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_client(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_client = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_client(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_client
    }

    // Take field
    pub fn take_proof_client(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_client, ::std::vec::Vec::new())
    }

    // bytes proof_consensus = 10;


    pub fn get_proof_consensus(&self) -> &[u8] {
        &self.proof_consensus
    }
    pub fn clear_proof_consensus(&mut self) {
        self.proof_consensus.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_consensus(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_consensus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_consensus(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_consensus
    }

    // Take field
    pub fn take_proof_consensus(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_consensus, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height consensus_height = 11;


    pub fn get_consensus_height(&self) -> &super::client::Height {
        self.consensus_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_height(&mut self) {
        self.consensus_height.clear();
    }

    pub fn has_consensus_height(&self) -> bool {
        self.consensus_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_height(&mut self, v: super::client::Height) {
        self.consensus_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_height(&mut self) -> &mut super::client::Height {
        if self.consensus_height.is_none() {
            self.consensus_height.set_default();
        }
        self.consensus_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_height(&mut self) -> super::client::Height {
        self.consensus_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // string signer = 12;


    pub fn get_signer(&self) -> &str {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::string::String) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::string::String {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgConnectionOpenTry {
    fn is_initialized(&self) -> bool {
        for v in &self.client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.counterparty_versions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consensus_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_connection_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_state)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.delay_period = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.counterparty_versions)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_init)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_client)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_consensus)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_height)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if !self.previous_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.previous_connection_id);
        }
        if let Some(ref v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::value_size(5, self.delay_period, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.counterparty_versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.proof_init.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.proof_init);
        }
        if !self.proof_client.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.proof_client);
        }
        if !self.proof_consensus.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.proof_consensus);
        }
        if let Some(ref v) = self.consensus_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if !self.previous_connection_id.is_empty() {
            os.write_string(2, &self.previous_connection_id)?;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(5, self.delay_period)?;
        }
        for v in &self.counterparty_versions {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.proof_init.is_empty() {
            os.write_bytes(8, &self.proof_init)?;
        }
        if !self.proof_client.is_empty() {
            os.write_bytes(9, &self.proof_client)?;
        }
        if !self.proof_consensus.is_empty() {
            os.write_bytes(10, &self.proof_consensus)?;
        }
        if let Some(ref v) = self.consensus_height.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(12, &self.signer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenTry {
        MsgConnectionOpenTry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &MsgConnectionOpenTry| { &m.client_id },
                |m: &mut MsgConnectionOpenTry| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_connection_id",
                |m: &MsgConnectionOpenTry| { &m.previous_connection_id },
                |m: &mut MsgConnectionOpenTry| { &mut m.previous_connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "client_state",
                |m: &MsgConnectionOpenTry| { &m.client_state },
                |m: &mut MsgConnectionOpenTry| { &mut m.client_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::Counterparty>>(
                "counterparty",
                |m: &MsgConnectionOpenTry| { &m.counterparty },
                |m: &mut MsgConnectionOpenTry| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "delay_period",
                |m: &MsgConnectionOpenTry| { &m.delay_period },
                |m: &mut MsgConnectionOpenTry| { &mut m.delay_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::Version>>(
                "counterparty_versions",
                |m: &MsgConnectionOpenTry| { &m.counterparty_versions },
                |m: &mut MsgConnectionOpenTry| { &mut m.counterparty_versions },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &MsgConnectionOpenTry| { &m.proof_height },
                |m: &mut MsgConnectionOpenTry| { &mut m.proof_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_init",
                |m: &MsgConnectionOpenTry| { &m.proof_init },
                |m: &mut MsgConnectionOpenTry| { &mut m.proof_init },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_client",
                |m: &MsgConnectionOpenTry| { &m.proof_client },
                |m: &mut MsgConnectionOpenTry| { &mut m.proof_client },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_consensus",
                |m: &MsgConnectionOpenTry| { &m.proof_consensus },
                |m: &mut MsgConnectionOpenTry| { &mut m.proof_consensus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "consensus_height",
                |m: &MsgConnectionOpenTry| { &m.consensus_height },
                |m: &mut MsgConnectionOpenTry| { &mut m.consensus_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signer",
                |m: &MsgConnectionOpenTry| { &m.signer },
                |m: &mut MsgConnectionOpenTry| { &mut m.signer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenTry>(
                "MsgConnectionOpenTry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenTry {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenTry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenTry::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenTry {
    fn clear(&mut self) {
        self.client_id.clear();
        self.previous_connection_id.clear();
        self.client_state.clear();
        self.counterparty.clear();
        self.delay_period = 0;
        self.counterparty_versions.clear();
        self.proof_height.clear();
        self.proof_init.clear();
        self.proof_client.clear();
        self.proof_consensus.clear();
        self.consensus_height.clear();
        self.signer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenTry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenTry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenTryResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenTryResponse {
    fn default() -> &'a MsgConnectionOpenTryResponse {
        <MsgConnectionOpenTryResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenTryResponse {
    pub fn new() -> MsgConnectionOpenTryResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgConnectionOpenTryResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenTryResponse {
        MsgConnectionOpenTryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenTryResponse>(
                "MsgConnectionOpenTryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenTryResponse {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenTryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenTryResponse::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenTryResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenTryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenTryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenAck {
    // message fields
    pub connection_id: ::std::string::String,
    pub counterparty_connection_id: ::std::string::String,
    pub version: ::protobuf::SingularPtrField<super::connection::Version>,
    pub client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub proof_try: ::std::vec::Vec<u8>,
    pub proof_client: ::std::vec::Vec<u8>,
    pub proof_consensus: ::std::vec::Vec<u8>,
    pub consensus_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub signer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenAck {
    fn default() -> &'a MsgConnectionOpenAck {
        <MsgConnectionOpenAck as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenAck {
    pub fn new() -> MsgConnectionOpenAck {
        ::std::default::Default::default()
    }

    // string connection_id = 1;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }

    // string counterparty_connection_id = 2;


    pub fn get_counterparty_connection_id(&self) -> &str {
        &self.counterparty_connection_id
    }
    pub fn clear_counterparty_connection_id(&mut self) {
        self.counterparty_connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_counterparty_connection_id(&mut self, v: ::std::string::String) {
        self.counterparty_connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.counterparty_connection_id
    }

    // Take field
    pub fn take_counterparty_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.counterparty_connection_id, ::std::string::String::new())
    }

    // .ibc.core.connection.v1.Version version = 3;


    pub fn get_version(&self) -> &super::connection::Version {
        self.version.as_ref().unwrap_or_else(|| <super::connection::Version as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: super::connection::Version) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut super::connection::Version {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> super::connection::Version {
        self.version.take().unwrap_or_else(|| super::connection::Version::new())
    }

    // .google.protobuf.Any client_state = 4;


    pub fn get_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_state(&mut self) {
        self.client_state.clear();
    }

    pub fn has_client_state(&self) -> bool {
        self.client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.client_state.is_none() {
            self.client_state.set_default();
        }
        self.client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .ibc.core.client.v1.Height proof_height = 5;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // bytes proof_try = 6;


    pub fn get_proof_try(&self) -> &[u8] {
        &self.proof_try
    }
    pub fn clear_proof_try(&mut self) {
        self.proof_try.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_try(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_try = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_try(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_try
    }

    // Take field
    pub fn take_proof_try(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_try, ::std::vec::Vec::new())
    }

    // bytes proof_client = 7;


    pub fn get_proof_client(&self) -> &[u8] {
        &self.proof_client
    }
    pub fn clear_proof_client(&mut self) {
        self.proof_client.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_client(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_client = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_client(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_client
    }

    // Take field
    pub fn take_proof_client(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_client, ::std::vec::Vec::new())
    }

    // bytes proof_consensus = 8;


    pub fn get_proof_consensus(&self) -> &[u8] {
        &self.proof_consensus
    }
    pub fn clear_proof_consensus(&mut self) {
        self.proof_consensus.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_consensus(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_consensus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_consensus(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_consensus
    }

    // Take field
    pub fn take_proof_consensus(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_consensus, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height consensus_height = 9;


    pub fn get_consensus_height(&self) -> &super::client::Height {
        self.consensus_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_height(&mut self) {
        self.consensus_height.clear();
    }

    pub fn has_consensus_height(&self) -> bool {
        self.consensus_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_height(&mut self, v: super::client::Height) {
        self.consensus_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_height(&mut self) -> &mut super::client::Height {
        if self.consensus_height.is_none() {
            self.consensus_height.set_default();
        }
        self.consensus_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_height(&mut self) -> super::client::Height {
        self.consensus_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // string signer = 10;


    pub fn get_signer(&self) -> &str {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::string::String) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::string::String {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgConnectionOpenAck {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consensus_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.counterparty_connection_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_state)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_try)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_client)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_consensus)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_height)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.counterparty_connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.counterparty_connection_id);
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.proof_try.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.proof_try);
        }
        if !self.proof_client.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.proof_client);
        }
        if !self.proof_consensus.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.proof_consensus);
        }
        if let Some(ref v) = self.consensus_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.counterparty_connection_id.is_empty() {
            os.write_string(2, &self.counterparty_connection_id)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.proof_try.is_empty() {
            os.write_bytes(6, &self.proof_try)?;
        }
        if !self.proof_client.is_empty() {
            os.write_bytes(7, &self.proof_client)?;
        }
        if !self.proof_consensus.is_empty() {
            os.write_bytes(8, &self.proof_consensus)?;
        }
        if let Some(ref v) = self.consensus_height.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(10, &self.signer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenAck {
        MsgConnectionOpenAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &MsgConnectionOpenAck| { &m.connection_id },
                |m: &mut MsgConnectionOpenAck| { &mut m.connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "counterparty_connection_id",
                |m: &MsgConnectionOpenAck| { &m.counterparty_connection_id },
                |m: &mut MsgConnectionOpenAck| { &mut m.counterparty_connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::Version>>(
                "version",
                |m: &MsgConnectionOpenAck| { &m.version },
                |m: &mut MsgConnectionOpenAck| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "client_state",
                |m: &MsgConnectionOpenAck| { &m.client_state },
                |m: &mut MsgConnectionOpenAck| { &mut m.client_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &MsgConnectionOpenAck| { &m.proof_height },
                |m: &mut MsgConnectionOpenAck| { &mut m.proof_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_try",
                |m: &MsgConnectionOpenAck| { &m.proof_try },
                |m: &mut MsgConnectionOpenAck| { &mut m.proof_try },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_client",
                |m: &MsgConnectionOpenAck| { &m.proof_client },
                |m: &mut MsgConnectionOpenAck| { &mut m.proof_client },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_consensus",
                |m: &MsgConnectionOpenAck| { &m.proof_consensus },
                |m: &mut MsgConnectionOpenAck| { &mut m.proof_consensus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "consensus_height",
                |m: &MsgConnectionOpenAck| { &m.consensus_height },
                |m: &mut MsgConnectionOpenAck| { &mut m.consensus_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signer",
                |m: &MsgConnectionOpenAck| { &m.signer },
                |m: &mut MsgConnectionOpenAck| { &mut m.signer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenAck>(
                "MsgConnectionOpenAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenAck {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenAck::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenAck {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.counterparty_connection_id.clear();
        self.version.clear();
        self.client_state.clear();
        self.proof_height.clear();
        self.proof_try.clear();
        self.proof_client.clear();
        self.proof_consensus.clear();
        self.consensus_height.clear();
        self.signer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenAckResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenAckResponse {
    fn default() -> &'a MsgConnectionOpenAckResponse {
        <MsgConnectionOpenAckResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenAckResponse {
    pub fn new() -> MsgConnectionOpenAckResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgConnectionOpenAckResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenAckResponse {
        MsgConnectionOpenAckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenAckResponse>(
                "MsgConnectionOpenAckResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenAckResponse {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenAckResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenAckResponse::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenAckResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenAckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenAckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenConfirm {
    // message fields
    pub connection_id: ::std::string::String,
    pub proof_ack: ::std::vec::Vec<u8>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub signer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenConfirm {
    fn default() -> &'a MsgConnectionOpenConfirm {
        <MsgConnectionOpenConfirm as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenConfirm {
    pub fn new() -> MsgConnectionOpenConfirm {
        ::std::default::Default::default()
    }

    // string connection_id = 1;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }

    // bytes proof_ack = 2;


    pub fn get_proof_ack(&self) -> &[u8] {
        &self.proof_ack
    }
    pub fn clear_proof_ack(&mut self) {
        self.proof_ack.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_ack(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_ack = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_ack(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_ack
    }

    // Take field
    pub fn take_proof_ack(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_ack, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height proof_height = 3;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // string signer = 4;


    pub fn get_signer(&self) -> &str {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::string::String) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::string::String {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgConnectionOpenConfirm {
    fn is_initialized(&self) -> bool {
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_ack)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if !self.proof_ack.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof_ack);
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if !self.proof_ack.is_empty() {
            os.write_bytes(2, &self.proof_ack)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signer.is_empty() {
            os.write_string(4, &self.signer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenConfirm {
        MsgConnectionOpenConfirm::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &MsgConnectionOpenConfirm| { &m.connection_id },
                |m: &mut MsgConnectionOpenConfirm| { &mut m.connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof_ack",
                |m: &MsgConnectionOpenConfirm| { &m.proof_ack },
                |m: &mut MsgConnectionOpenConfirm| { &mut m.proof_ack },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &MsgConnectionOpenConfirm| { &m.proof_height },
                |m: &mut MsgConnectionOpenConfirm| { &mut m.proof_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signer",
                |m: &MsgConnectionOpenConfirm| { &m.signer },
                |m: &mut MsgConnectionOpenConfirm| { &mut m.signer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenConfirm>(
                "MsgConnectionOpenConfirm",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenConfirm {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenConfirm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenConfirm::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenConfirm {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.proof_ack.clear();
        self.proof_height.clear();
        self.signer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenConfirm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenConfirm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgConnectionOpenConfirmResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConnectionOpenConfirmResponse {
    fn default() -> &'a MsgConnectionOpenConfirmResponse {
        <MsgConnectionOpenConfirmResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConnectionOpenConfirmResponse {
    pub fn new() -> MsgConnectionOpenConfirmResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgConnectionOpenConfirmResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConnectionOpenConfirmResponse {
        MsgConnectionOpenConfirmResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgConnectionOpenConfirmResponse>(
                "MsgConnectionOpenConfirmResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgConnectionOpenConfirmResponse {
        static instance: ::protobuf::rt::LazyV2<MsgConnectionOpenConfirmResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConnectionOpenConfirmResponse::new)
    }
}

impl ::protobuf::Clear for MsgConnectionOpenConfirmResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgConnectionOpenConfirmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConnectionOpenConfirmResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fibc/core/connection/v1/tx.proto\x12\x16ibc.core.connection.v1\x1a\
    \x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x1fibc/cor\
    e/client/v1/client.proto\x1a'ibc/core/connection/v1/connection.proto\"\
    \xb3\x02\n\x15MsgConnectionOpenInit\x121\n\tclient_id\x18\x01\x20\x01(\t\
    R\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12N\n\x0ccounterpa\
    rty\x18\x02\x20\x01(\x0b2$.ibc.core.connection.v1.CounterpartyR\x0ccount\
    erpartyB\x04\xc8\xde\x1f\0\x129\n\x07version\x18\x03\x20\x01(\x0b2\x1f.i\
    bc.core.connection.v1.VersionR\x07version\x12:\n\x0cdelay_period\x18\x04\
    \x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_period\"\
    \x12\x16\n\x06signer\x18\x05\x20\x01(\tR\x06signer:\x08\xe8\xa0\x1f\0\
    \x88\xa0\x1f\0\"\x1f\n\x1dMsgConnectionOpenInitResponse\"\x95\x07\n\x14M\
    sgConnectionOpenTry\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\
    \x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12W\n\x16previous_connection_id\
    \x18\x02\x20\x01(\tR\x14previousConnectionIdB!\xf2\xde\x1f\x1dyaml:\"pre\
    vious_connection_id\"\x12P\n\x0cclient_state\x18\x03\x20\x01(\x0b2\x14.g\
    oogle.protobuf.AnyR\x0bclientStateB\x17\xf2\xde\x1f\x13yaml:\"client_sta\
    te\"\x12N\n\x0ccounterparty\x18\x04\x20\x01(\x0b2$.ibc.core.connection.v\
    1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12:\n\x0cdelay_perio\
    d\x18\x05\x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_\
    period\"\x12v\n\x15counterparty_versions\x18\x06\x20\x03(\x0b2\x1f.ibc.c\
    ore.connection.v1.VersionR\x14counterpartyVersionsB\x20\xf2\xde\x1f\x1cy\
    aml:\"counterparty_versions\"\x12Z\n\x0cproof_height\x18\x07\x20\x01(\
    \x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x1b\xc8\xde\x1f\0\
    \xf2\xde\x1f\x13yaml:\"proof_height\"\x124\n\nproof_init\x18\x08\x20\x01\
    (\x0cR\tproofInitB\x15\xf2\xde\x1f\x11yaml:\"proof_init\"\x12:\n\x0cproo\
    f_client\x18\t\x20\x01(\x0cR\x0bproofClientB\x17\xf2\xde\x1f\x13yaml:\"p\
    roof_client\"\x12C\n\x0fproof_consensus\x18\n\x20\x01(\x0cR\x0eproofCons\
    ensusB\x1a\xf2\xde\x1f\x16yaml:\"proof_consensus\"\x12f\n\x10consensus_h\
    eight\x18\x0b\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0fconsensusH\
    eightB\x1f\xf2\xde\x1f\x17yaml:\"consensus_height\"\xc8\xde\x1f\0\x12\
    \x16\n\x06signer\x18\x0c\x20\x01(\tR\x06signer:\x08\xe8\xa0\x1f\0\x88\
    \xa0\x1f\0\"\x1e\n\x1cMsgConnectionOpenTryResponse\"\xe1\x05\n\x14MsgCon\
    nectionOpenAck\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cconnectionId\
    B\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12c\n\x1acounterparty_conne\
    ction_id\x18\x02\x20\x01(\tR\x18counterpartyConnectionIdB%\xf2\xde\x1f!y\
    aml:\"counterparty_connection_id\"\x129\n\x07version\x18\x03\x20\x01(\
    \x0b2\x1f.ibc.core.connection.v1.VersionR\x07version\x12P\n\x0cclient_st\
    ate\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\
    \xf2\xde\x1f\x13yaml:\"client_state\"\x12Z\n\x0cproof_height\x18\x05\x20\
    \x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x1b\xf2\xde\
    \x1f\x13yaml:\"proof_height\"\xc8\xde\x1f\0\x121\n\tproof_try\x18\x06\
    \x20\x01(\x0cR\x08proofTryB\x14\xf2\xde\x1f\x10yaml:\"proof_try\"\x12:\n\
    \x0cproof_client\x18\x07\x20\x01(\x0cR\x0bproofClientB\x17\xf2\xde\x1f\
    \x13yaml:\"proof_client\"\x12C\n\x0fproof_consensus\x18\x08\x20\x01(\x0c\
    R\x0eproofConsensusB\x1a\xf2\xde\x1f\x16yaml:\"proof_consensus\"\x12f\n\
    \x10consensus_height\x18\t\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\
    \x0fconsensusHeightB\x1f\xc8\xde\x1f\0\xf2\xde\x1f\x17yaml:\"consensus_h\
    eight\"\x12\x16\n\x06signer\x18\n\x20\x01(\tR\x06signer:\x08\xe8\xa0\x1f\
    \0\x88\xa0\x1f\0\"\x1e\n\x1cMsgConnectionOpenAckResponse\"\x8a\x02\n\x18\
    MsgConnectionOpenConfirm\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cco\
    nnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x121\n\tproof_ack\
    \x18\x02\x20\x01(\x0cR\x08proofAckB\x14\xf2\xde\x1f\x10yaml:\"proof_ack\
    \"\x12Z\n\x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.client.v1.H\
    eightR\x0bproofHeightB\x1b\xf2\xde\x1f\x13yaml:\"proof_height\"\xc8\xde\
    \x1f\0\x12\x16\n\x06signer\x18\x04\x20\x01(\tR\x06signer:\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\"\n\x20MsgConnectionOpenConfirmResponse2\xf9\x03\
    \n\x03Msg\x12z\n\x12ConnectionOpenInit\x12-.ibc.core.connection.v1.MsgCo\
    nnectionOpenInit\x1a5.ibc.core.connection.v1.MsgConnectionOpenInitRespon\
    se\x12w\n\x11ConnectionOpenTry\x12,.ibc.core.connection.v1.MsgConnection\
    OpenTry\x1a4.ibc.core.connection.v1.MsgConnectionOpenTryResponse\x12w\n\
    \x11ConnectionOpenAck\x12,.ibc.core.connection.v1.MsgConnectionOpenAck\
    \x1a4.ibc.core.connection.v1.MsgConnectionOpenAckResponse\x12\x83\x01\n\
    \x15ConnectionOpenConfirm\x120.ibc.core.connection.v1.MsgConnectionOpenC\
    onfirm\x1a8.ibc.core.connection.v1.MsgConnectionOpenConfirmResponseB=Z;g\
    ithub.com/cosmos/cosmos-sdk/x/ibc/core/03-connection/typesJ\x81+\n\x06\
    \x12\x04\0\0r+\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x01\x08\x1e\n\x08\n\x01\x08\x12\x03\x03\0R\n\t\n\x02\x08\x0b\x12\x03\
    \x03\0R\n\t\n\x02\x03\0\x12\x03\x05\x07\x1d\n\t\n\x02\x03\x01\x12\x03\
    \x06\x07\"\n\t\n\x02\x03\x02\x12\x03\x07\x07(\n\t\n\x02\x03\x03\x12\x03\
    \x08\x070\n9\n\x02\x06\0\x12\x04\x0b\0\x17\x01\x1a-\x20Msg\x20defines\
    \x20the\x20ibc/connection\x20Msg\x20service.\n\n\n\n\x03\x06\0\x01\x12\
    \x03\x0b\x08\x0b\nY\n\x04\x06\0\x02\0\x12\x03\r\x02X\x1aL\x20ConnectionO\
    penInit\x20defines\x20a\x20rpc\x20handler\x20method\x20for\x20MsgConnect\
    ionOpenInit.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x06\x18\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\r\x19.\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r9V\
    \nW\n\x04\x06\0\x02\x01\x12\x03\x10\x02U\x1aJ\x20ConnectionOpenTry\x20de\
    fines\x20a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenTry.\n\
    \n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x10\x06\x17\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03\x10\x18,\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x107S\nW\
    \n\x04\x06\0\x02\x02\x12\x03\x13\x02U\x1aJ\x20ConnectionOpenAck\x20defin\
    es\x20a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenAck.\n\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x13\x06\x17\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x13\x18,\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x137S\n_\
    \n\x04\x06\0\x02\x03\x12\x03\x16\x02a\x1aR\x20ConnectionOpenConfirm\x20d\
    efines\x20a\x20rpc\x20handler\x20method\x20for\x20MsgConnectionOpenConfi\
    rm.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x16\x06\x1b\n\x0c\n\x05\x06\
    \0\x02\x03\x02\x12\x03\x16\x1c4\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\
    \x16?_\n{\n\x02\x04\0\x12\x04\x1b\0$\x01\x1ao\x20MsgConnectionOpenInit\
    \x20defines\x20the\x20msg\x20sent\x20by\x20an\x20account\x20on\x20Chain\
    \x20A\x20to\n\x20initialize\x20a\x20connection\x20with\x20Chain\x20B.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1b\x08\x1d\n\n\n\x03\x04\0\x07\x12\x03\x1c\
    \x02-\n\r\n\x06\x04\0\x07\x8d\xf4\x03\x12\x03\x1c\x02-\n\n\n\x03\x04\0\
    \x07\x12\x03\x1d\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x1d\x02-\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x1f\x02N\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\x1f\x02\x1d-\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x1f\x0f\x18\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x1f\x1e\x1f\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x1f\x20M\n\x0f\
    \n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x1f!L\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x20\x02?\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x20\x02\x1fN\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x20\x02\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x20\x0f\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x20\
    \x1e\x1f\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x20\x20>\n\x0f\n\x08\x04\
    \0\x02\x01\x08\xe9\xfb\x03\x12\x03\x20!=\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03!\x02\x20\n\r\n\x05\x04\0\x02\x02\x04\x12\x04!\x02\x20?\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03!\x02\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03!\
    \x0f\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03!\x1e\x1f\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03\"\x02Q\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\"\x02!\x20\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\"\x0f\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\"\x1e\
    \x1f\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\"\x20P\n\x0f\n\x08\x04\0\x02\
    \x03\x08\xee\xfb\x03\x12\x03\"!O\n\x0b\n\x04\x04\0\x02\x04\x12\x03#\x02\
    \x20\n\r\n\x05\x04\0\x02\x04\x04\x12\x04#\x02\"Q\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03#\x0f\x15\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03#\x1e\x1f\n\\\n\x02\x04\x01\x12\
    \x03'\0(\x1aQ\x20MsgConnectionOpenInitResponse\x20defines\x20the\x20Msg/\
    ConnectionOpenInit\x20response\x20type.\n\n\n\n\x03\x04\x01\x01\x12\x03'\
    \x08%\nk\n\x02\x04\x02\x12\x04+\0C\x01\x1a_\x20MsgConnectionOpenTry\x20d\
    efines\x20a\x20msg\x20sent\x20by\x20a\x20Relayer\x20to\x20try\x20to\x20o\
    pen\x20a\n\x20connection\x20on\x20Chain\x20B.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03+\x08\x1c\n\n\n\x03\x04\x02\x07\x12\x03,\x02-\n\r\n\x06\x04\x02\
    \x07\x8d\xf4\x03\x12\x03,\x02-\n\n\n\x03\x04\x02\x07\x12\x03-\x02-\n\r\n\
    \x06\x04\x02\x07\x81\xf4\x03\x12\x03-\x02-\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03/\x02E\n\r\n\x05\x04\x02\x02\0\x04\x12\x04/\x02--\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03/\t\
    \x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03/\x15\x16\n\x0c\n\x05\x04\x02\
    \x02\0\x08\x12\x03/\x17D\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\
    \x03/\x18C\n\x9c\x01\n\x04\x04\x02\x02\x01\x12\x032\x02r\x1a\x8e\x01\x20\
    in\x20the\x20case\x20of\x20crossing\x20hello's,\x20when\x20both\x20chain\
    s\x20call\x20OpenInit,\x20we\x20need\x20the\x20connection\x20identifier\
    \n\x20of\x20the\x20previous\x20connection\x20in\x20state\x20INIT\n\n\r\n\
    \x05\x04\x02\x02\x01\x04\x12\x042\x02/E\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x032\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x032\x1c2\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03256\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\
    \x0327q\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x0328p\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x033\x02h\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\
    3\x022r\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x033\x02\x15\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x033\x1c(\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x0335\
    6\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x0337g\n\x0f\n\x08\x04\x02\x02\x02\
    \x08\xee\xfb\x03\x12\x0338f\n\x0b\n\x04\x04\x02\x02\x03\x12\x034\x02V\n\
    \r\n\x05\x04\x02\x02\x03\x04\x12\x044\x023h\n\x0c\n\x05\x04\x02\x02\x03\
    \x06\x12\x034\x02\x0e\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x034\x1c(\n\
    \x0c\n\x05\x04\x02\x02\x03\x03\x12\x03456\n\x0c\n\x05\x04\x02\x02\x03\
    \x08\x12\x0347U\n\x0f\n\x08\x04\x02\x02\x03\x08\xe9\xfb\x03\x12\x0348T\n\
    \x0b\n\x04\x04\x02\x02\x04\x12\x035\x02h\n\r\n\x05\x04\x02\x02\x04\x04\
    \x12\x045\x024V\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x035\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x04\x01\x12\x035\x1c(\n\x0c\n\x05\x04\x02\x02\x04\x03\
    \x12\x03556\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x0357g\n\x0f\n\x08\x04\
    \x02\x02\x04\x08\xee\xfb\x03\x12\x0358f\n\x0b\n\x04\x04\x02\x02\x05\x12\
    \x036\x02q\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x036\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x05\x06\x12\x036\x0b\x12\n\x0c\n\x05\x04\x02\x02\x05\x01\
    \x12\x036\x1c1\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03656\n\x0c\n\x05\
    \x04\x02\x02\x05\x08\x12\x0367p\n\x0f\n\x08\x04\x02\x02\x05\x08\xee\xfb\
    \x03\x12\x0368o\n\x0c\n\x04\x04\x02\x02\x06\x12\x047\x028U\n\r\n\x05\x04\
    \x02\x02\x06\x04\x12\x047\x026q\n\x0c\n\x05\x04\x02\x02\x06\x06\x12\x037\
    \x02\x1b\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x037\x1c(\n\x0c\n\x05\x04\
    \x02\x02\x06\x03\x12\x03756\n\x0c\n\x05\x04\x02\x02\x06\x08\x12\x038\x06\
    T\n\x0f\n\x08\x04\x02\x02\x06\x08\xee\xfb\x03\x12\x038\x075\n\x0f\n\x08\
    \x04\x02\x02\x06\x08\xe9\xfb\x03\x12\x0387S\n\\\n\x04\x04\x02\x02\x07\
    \x12\x03;\x02F\x1aO\x20proof\x20of\x20the\x20initialization\x20the\x20co\
    nnection\x20on\x20Chain\x20A:\x20`UNITIALIZED\x20->\n\x20INIT`\n\n\r\n\
    \x05\x04\x02\x02\x07\x04\x12\x04;\x028U\n\x0c\n\x05\x04\x02\x02\x07\x05\
    \x12\x03;\x02\x07\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03;\x08\x12\n\x0c\
    \n\x05\x04\x02\x02\x07\x03\x12\x03;\x15\x16\n\x0c\n\x05\x04\x02\x02\x07\
    \x08\x12\x03;\x17E\n\x0f\n\x08\x04\x02\x02\x07\x08\xee\xfb\x03\x12\x03;\
    \x18D\n8\n\x04\x04\x02\x02\x08\x12\x03=\x02J\x1a+\x20proof\x20of\x20clie\
    nt\x20state\x20included\x20in\x20message\n\n\r\n\x05\x04\x02\x02\x08\x04\
    \x12\x04=\x02;F\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03=\x02\x07\n\x0c\n\
    \x05\x04\x02\x02\x08\x01\x12\x03=\x08\x14\n\x0c\n\x05\x04\x02\x02\x08\
    \x03\x12\x03=\x17\x18\n\x0c\n\x05\x04\x02\x02\x08\x08\x12\x03=\x19I\n\
    \x0f\n\x08\x04\x02\x02\x08\x08\xee\xfb\x03\x12\x03=\x1aH\n.\n\x04\x04\
    \x02\x02\t\x12\x03?\x02f\x1a!\x20proof\x20of\x20client\x20consensus\x20s\
    tate\n\n\r\n\x05\x04\x02\x02\t\x04\x12\x04?\x02=J\n\x0c\n\x05\x04\x02\
    \x02\t\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03?\x1c+\
    \n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03?/1\n\x0c\n\x05\x04\x02\x02\t\x08\
    \x12\x03?2e\n\x0f\n\x08\x04\x02\x02\t\x08\xee\xfb\x03\x12\x03?3d\n\x0c\n\
    \x04\x04\x02\x02\n\x12\x04@\x02AY\n\r\n\x05\x04\x02\x02\n\x04\x12\x04@\
    \x02?f\n\x0c\n\x05\x04\x02\x02\n\x06\x12\x03@\x02\x1b\n\x0c\n\x05\x04\
    \x02\x02\n\x01\x12\x03@\x1c,\n\x0c\n\x05\x04\x02\x02\n\x03\x12\x03@/1\n\
    \x0c\n\x05\x04\x02\x02\n\x08\x12\x03A\x06X\n\x0f\n\x08\x04\x02\x02\n\x08\
    \xee\xfb\x03\x12\x03A\x079\n\x0f\n\x08\x04\x02\x02\n\x08\xe9\xfb\x03\x12\
    \x03A;W\n\x0b\n\x04\x04\x02\x02\x0b\x12\x03B\x02\x15\n\r\n\x05\x04\x02\
    \x02\x0b\x04\x12\x04B\x02AY\n\x0c\n\x05\x04\x02\x02\x0b\x05\x12\x03B\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x0b\x01\x12\x03B\t\x0f\n\x0c\n\x05\x04\x02\
    \x02\x0b\x03\x12\x03B\x12\x14\nZ\n\x02\x04\x03\x12\x03F\0'\x1aO\x20MsgCo\
    nnectionOpenTryResponse\x20defines\x20the\x20Msg/ConnectionOpenTry\x20re\
    sponse\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x03F\x08$\n\x94\x01\n\x02\
    \x04\x04\x12\x04J\0^\x01\x1a\x87\x01\x20MsgConnectionOpenAck\x20defines\
    \x20a\x20msg\x20sent\x20by\x20a\x20Relayer\x20to\x20Chain\x20A\x20to\n\
    \x20acknowledge\x20the\x20change\x20of\x20connection\x20state\x20to\x20T\
    RYOPEN\x20on\x20Chain\x20B.\n\n\n\n\x03\x04\x04\x01\x12\x03J\x08\x1c\n\n\
    \n\x03\x04\x04\x07\x12\x03K\x02-\n\r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\
    \x03K\x02-\n\n\n\x03\x04\x04\x07\x12\x03L\x02-\n\r\n\x06\x04\x04\x07\x81\
    \xf4\x03\x12\x03L\x02-\n\x0b\n\x04\x04\x04\x02\0\x12\x03N\x02g\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04N\x02L-\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03N\
    \x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03N\x16#\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03N34\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03N5f\n\x0f\n\
    \x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03N6e\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03O\x02t\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04O\x02Ng\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03O\x160\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03O34\n\x0c\n\
    \x05\x04\x04\x02\x01\x08\x12\x03O5s\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\
    \xfb\x03\x12\x03O6r\n\x0b\n\x04\x04\x04\x02\x02\x12\x03P\x025\n\r\n\x05\
    \x04\x04\x02\x02\x04\x12\x04P\x02Ot\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\
    \x03P\x02\t\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03P\x16\x1d\n\x0c\n\x05\
    \x04\x04\x02\x02\x03\x12\x03P34\n\x0b\n\x04\x04\x04\x02\x03\x12\x03Q\x02\
    f\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04Q\x02P5\n\x0c\n\x05\x04\x04\x02\
    \x03\x06\x12\x03Q\x02\x15\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03Q\x16\"\
    \n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03Q34\n\x0c\n\x05\x04\x04\x02\x03\
    \x08\x12\x03Q5e\n\x0f\n\x08\x04\x04\x02\x03\x08\xee\xfb\x03\x12\x03Q6d\n\
    \x0c\n\x04\x04\x04\x02\x04\x12\x04R\x02SU\n\r\n\x05\x04\x04\x02\x04\x04\
    \x12\x04R\x02Qf\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\x03R\x02\x1b\n\x0c\n\
    \x05\x04\x04\x02\x04\x01\x12\x03R\x1c(\n\x0c\n\x05\x04\x04\x02\x04\x03\
    \x12\x03R34\n\x0c\n\x05\x04\x04\x02\x04\x08\x12\x03S\x06T\n\x0f\n\x08\
    \x04\x04\x02\x04\x08\xee\xfb\x03\x12\x03S\x075\n\x0f\n\x08\x04\x04\x02\
    \x04\x08\xe9\xfb\x03\x12\x03S7S\n_\n\x04\x04\x04\x02\x05\x12\x03V\x02D\
    \x1aR\x20proof\x20of\x20the\x20initialization\x20the\x20connection\x20on\
    \x20Chain\x20B:\x20`UNITIALIZED\x20->\n\x20TRYOPEN`\n\n\r\n\x05\x04\x04\
    \x02\x05\x04\x12\x04V\x02SU\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03V\x02\
    \x07\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03V\x08\x11\n\x0c\n\x05\x04\
    \x04\x02\x05\x03\x12\x03V\x14\x15\n\x0c\n\x05\x04\x04\x02\x05\x08\x12\
    \x03V\x16C\n\x0f\n\x08\x04\x04\x02\x05\x08\xee\xfb\x03\x12\x03V\x17B\n8\
    \n\x04\x04\x04\x02\x06\x12\x03X\x02J\x1a+\x20proof\x20of\x20client\x20st\
    ate\x20included\x20in\x20message\n\n\r\n\x05\x04\x04\x02\x06\x04\x12\x04\
    X\x02VD\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03X\x02\x07\n\x0c\n\x05\x04\
    \x04\x02\x06\x01\x12\x03X\x08\x14\n\x0c\n\x05\x04\x04\x02\x06\x03\x12\
    \x03X\x17\x18\n\x0c\n\x05\x04\x04\x02\x06\x08\x12\x03X\x19I\n\x0f\n\x08\
    \x04\x04\x02\x06\x08\xee\xfb\x03\x12\x03X\x1aH\n.\n\x04\x04\x04\x02\x07\
    \x12\x03Z\x02e\x1a!\x20proof\x20of\x20client\x20consensus\x20state\n\n\r\
    \n\x05\x04\x04\x02\x07\x04\x12\x04Z\x02XJ\n\x0c\n\x05\x04\x04\x02\x07\
    \x05\x12\x03Z\x02\x07\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x03Z\x1c+\n\
    \x0c\n\x05\x04\x04\x02\x07\x03\x12\x03Z/0\n\x0c\n\x05\x04\x04\x02\x07\
    \x08\x12\x03Z1d\n\x0f\n\x08\x04\x04\x02\x07\x08\xee\xfb\x03\x12\x03Z2c\n\
    \x0c\n\x04\x04\x04\x02\x08\x12\x04[\x02\\Y\n\r\n\x05\x04\x04\x02\x08\x04\
    \x12\x04[\x02Ze\n\x0c\n\x05\x04\x04\x02\x08\x06\x12\x03[\x02\x1b\n\x0c\n\
    \x05\x04\x04\x02\x08\x01\x12\x03[\x1c,\n\x0c\n\x05\x04\x04\x02\x08\x03\
    \x12\x03[/0\n\x0c\n\x05\x04\x04\x02\x08\x08\x12\x03\\\x06X\n\x0f\n\x08\
    \x04\x04\x02\x08\x08\xee\xfb\x03\x12\x03\\\x079\n\x0f\n\x08\x04\x04\x02\
    \x08\x08\xe9\xfb\x03\x12\x03\\;W\n\x0b\n\x04\x04\x04\x02\t\x12\x03]\x02\
    \x15\n\r\n\x05\x04\x04\x02\t\x04\x12\x04]\x02\\Y\n\x0c\n\x05\x04\x04\x02\
    \t\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x04\x02\t\x01\x12\x03]\t\x0f\n\
    \x0c\n\x05\x04\x04\x02\t\x03\x12\x03]\x12\x14\nZ\n\x02\x04\x05\x12\x03a\
    \0'\x1aO\x20MsgConnectionOpenAckResponse\x20defines\x20the\x20Msg/Connec\
    tionOpenAck\x20response\x20type.\n\n\n\n\x03\x04\x05\x01\x12\x03a\x08$\n\
    \x95\x01\n\x02\x04\x06\x12\x04e\0o\x01\x1a\x88\x01\x20MsgConnectionOpenC\
    onfirm\x20defines\x20a\x20msg\x20sent\x20by\x20a\x20Relayer\x20to\x20Cha\
    in\x20B\x20to\n\x20acknowledge\x20the\x20change\x20of\x20connection\x20s\
    tate\x20to\x20OPEN\x20on\x20Chain\x20A.\n\n\n\n\x03\x04\x06\x01\x12\x03e\
    \x08\x20\n\n\n\x03\x04\x06\x07\x12\x03f\x02-\n\r\n\x06\x04\x06\x07\x8d\
    \xf4\x03\x12\x03f\x02-\n\n\n\x03\x04\x06\x07\x12\x03g\x02-\n\r\n\x06\x04\
    \x06\x07\x81\xf4\x03\x12\x03g\x02-\n\x0b\n\x04\x04\x06\x02\0\x12\x03i\
    \x02M\n\r\n\x05\x04\x06\x02\0\x04\x12\x04i\x02g-\n\x0c\n\x05\x04\x06\x02\
    \0\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03i\t\x16\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03i\x19\x1a\n\x0c\n\x05\x04\x06\x02\0\
    \x08\x12\x03i\x1bL\n\x0f\n\x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03i\
    \x1cK\nV\n\x04\x04\x06\x02\x01\x12\x03k\x02[\x1aI\x20proof\x20for\x20the\
    \x20change\x20of\x20the\x20connection\x20state\x20on\x20Chain\x20A:\x20`\
    INIT\x20->\x20OPEN`\n\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04k\x02iM\n\x0c\
    \n\x05\x04\x06\x02\x01\x05\x12\x03k\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\
    \x01\x12\x03k\x1c%\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03k+,\n\x0c\n\
    \x05\x04\x06\x02\x01\x08\x12\x03k-Z\n\x0f\n\x08\x04\x06\x02\x01\x08\xee\
    \xfb\x03\x12\x03k.Y\n\x0c\n\x04\x04\x06\x02\x02\x12\x04l\x02mU\n\r\n\x05\
    \x04\x06\x02\x02\x04\x12\x04l\x02k[\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\
    \x03l\x02\x1b\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03l\x1c(\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03l+,\n\x0c\n\x05\x04\x06\x02\x02\x08\x12\x03m\
    \x06T\n\x0f\n\x08\x04\x06\x02\x02\x08\xee\xfb\x03\x12\x03m\x075\n\x0f\n\
    \x08\x04\x06\x02\x02\x08\xe9\xfb\x03\x12\x03m7S\n\x0b\n\x04\x04\x06\x02\
    \x03\x12\x03n\x02\x14\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04n\x02mU\n\x0c\
    \n\x05\x04\x06\x02\x03\x05\x12\x03n\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\
    \x01\x12\x03n\t\x0f\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03n\x12\x13\nb\
    \n\x02\x04\x07\x12\x03r\0+\x1aW\x20MsgConnectionOpenConfirmResponse\x20d\
    efines\x20the\x20Msg/ConnectionOpenConfirm\x20response\x20type.\n\n\n\n\
    \x03\x04\x07\x01\x12\x03r\x08(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
