// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/types/validator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorSet {
    // message fields
    pub validators: ::protobuf::RepeatedField<Validator>,
    pub proposer: ::protobuf::SingularPtrField<Validator>,
    pub total_voting_power: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSet {
    fn default() -> &'a ValidatorSet {
        <ValidatorSet as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSet {
    pub fn new() -> ValidatorSet {
        ::std::default::Default::default()
    }

    // repeated .tendermint.types.Validator validators = 1;


    pub fn get_validators(&self) -> &[Validator] {
        &self.validators
    }
    pub fn clear_validators(&mut self) {
        self.validators.clear();
    }

    // Param is passed by value, moved
    pub fn set_validators(&mut self, v: ::protobuf::RepeatedField<Validator>) {
        self.validators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validators(&mut self) -> &mut ::protobuf::RepeatedField<Validator> {
        &mut self.validators
    }

    // Take field
    pub fn take_validators(&mut self) -> ::protobuf::RepeatedField<Validator> {
        ::std::mem::replace(&mut self.validators, ::protobuf::RepeatedField::new())
    }

    // .tendermint.types.Validator proposer = 2;


    pub fn get_proposer(&self) -> &Validator {
        self.proposer.as_ref().unwrap_or_else(|| <Validator as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proposer(&mut self) {
        self.proposer.clear();
    }

    pub fn has_proposer(&self) -> bool {
        self.proposer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proposer(&mut self, v: Validator) {
        self.proposer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer(&mut self) -> &mut Validator {
        if self.proposer.is_none() {
            self.proposer.set_default();
        }
        self.proposer.as_mut().unwrap()
    }

    // Take field
    pub fn take_proposer(&mut self) -> Validator {
        self.proposer.take().unwrap_or_else(|| Validator::new())
    }

    // int64 total_voting_power = 3;


    pub fn get_total_voting_power(&self) -> i64 {
        self.total_voting_power
    }
    pub fn clear_total_voting_power(&mut self) {
        self.total_voting_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_voting_power(&mut self, v: i64) {
        self.total_voting_power = v;
    }
}

impl ::protobuf::Message for ValidatorSet {
    fn is_initialized(&self) -> bool {
        for v in &self.validators {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proposer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validators)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proposer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_voting_power = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.proposer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.total_voting_power != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_voting_power, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.validators {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.proposer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.total_voting_power != 0 {
            os.write_int64(3, self.total_voting_power)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSet {
        ValidatorSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Validator>>(
                "validators",
                |m: &ValidatorSet| { &m.validators },
                |m: &mut ValidatorSet| { &mut m.validators },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Validator>>(
                "proposer",
                |m: &ValidatorSet| { &m.proposer },
                |m: &mut ValidatorSet| { &mut m.proposer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "total_voting_power",
                |m: &ValidatorSet| { &m.total_voting_power },
                |m: &mut ValidatorSet| { &mut m.total_voting_power },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorSet>(
                "ValidatorSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorSet {
        static instance: ::protobuf::rt::LazyV2<ValidatorSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSet::new)
    }
}

impl ::protobuf::Clear for ValidatorSet {
    fn clear(&mut self) {
        self.validators.clear();
        self.proposer.clear();
        self.total_voting_power = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Validator {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub pub_key: ::protobuf::SingularPtrField<super::keys::PublicKey>,
    pub voting_power: i64,
    pub proposer_priority: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Validator {
    fn default() -> &'a Validator {
        <Validator as ::protobuf::Message>::default_instance()
    }
}

impl Validator {
    pub fn new() -> Validator {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // .tendermint.crypto.PublicKey pub_key = 2;


    pub fn get_pub_key(&self) -> &super::keys::PublicKey {
        self.pub_key.as_ref().unwrap_or_else(|| <super::keys::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: super::keys::PublicKey) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut super::keys::PublicKey {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> super::keys::PublicKey {
        self.pub_key.take().unwrap_or_else(|| super::keys::PublicKey::new())
    }

    // int64 voting_power = 3;


    pub fn get_voting_power(&self) -> i64 {
        self.voting_power
    }
    pub fn clear_voting_power(&mut self) {
        self.voting_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_voting_power(&mut self, v: i64) {
        self.voting_power = v;
    }

    // int64 proposer_priority = 4;


    pub fn get_proposer_priority(&self) -> i64 {
        self.proposer_priority
    }
    pub fn clear_proposer_priority(&mut self) {
        self.proposer_priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposer_priority(&mut self, v: i64) {
        self.proposer_priority = v;
    }
}

impl ::protobuf::Message for Validator {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.voting_power = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.proposer_priority = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.voting_power != 0 {
            my_size += ::protobuf::rt::value_size(3, self.voting_power, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.proposer_priority != 0 {
            my_size += ::protobuf::rt::value_size(4, self.proposer_priority, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.voting_power != 0 {
            os.write_int64(3, self.voting_power)?;
        }
        if self.proposer_priority != 0 {
            os.write_int64(4, self.proposer_priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Validator {
        Validator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &Validator| { &m.address },
                |m: &mut Validator| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::PublicKey>>(
                "pub_key",
                |m: &Validator| { &m.pub_key },
                |m: &mut Validator| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "voting_power",
                |m: &Validator| { &m.voting_power },
                |m: &mut Validator| { &mut m.voting_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "proposer_priority",
                |m: &Validator| { &m.proposer_priority },
                |m: &mut Validator| { &mut m.proposer_priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Validator>(
                "Validator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Validator {
        static instance: ::protobuf::rt::LazyV2<Validator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Validator::new)
    }
}

impl ::protobuf::Clear for Validator {
    fn clear(&mut self) {
        self.address.clear();
        self.pub_key.clear();
        self.voting_power = 0;
        self.proposer_priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Validator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Validator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimpleValidator {
    // message fields
    pub pub_key: ::protobuf::SingularPtrField<super::keys::PublicKey>,
    pub voting_power: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleValidator {
    fn default() -> &'a SimpleValidator {
        <SimpleValidator as ::protobuf::Message>::default_instance()
    }
}

impl SimpleValidator {
    pub fn new() -> SimpleValidator {
        ::std::default::Default::default()
    }

    // .tendermint.crypto.PublicKey pub_key = 1;


    pub fn get_pub_key(&self) -> &super::keys::PublicKey {
        self.pub_key.as_ref().unwrap_or_else(|| <super::keys::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: super::keys::PublicKey) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut super::keys::PublicKey {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> super::keys::PublicKey {
        self.pub_key.take().unwrap_or_else(|| super::keys::PublicKey::new())
    }

    // int64 voting_power = 2;


    pub fn get_voting_power(&self) -> i64 {
        self.voting_power
    }
    pub fn clear_voting_power(&mut self) {
        self.voting_power = 0;
    }

    // Param is passed by value, moved
    pub fn set_voting_power(&mut self, v: i64) {
        self.voting_power = v;
    }
}

impl ::protobuf::Message for SimpleValidator {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.voting_power = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.voting_power != 0 {
            my_size += ::protobuf::rt::value_size(2, self.voting_power, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.voting_power != 0 {
            os.write_int64(2, self.voting_power)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleValidator {
        SimpleValidator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::PublicKey>>(
                "pub_key",
                |m: &SimpleValidator| { &m.pub_key },
                |m: &mut SimpleValidator| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "voting_power",
                |m: &SimpleValidator| { &m.voting_power },
                |m: &mut SimpleValidator| { &mut m.voting_power },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimpleValidator>(
                "SimpleValidator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimpleValidator {
        static instance: ::protobuf::rt::LazyV2<SimpleValidator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleValidator::new)
    }
}

impl ::protobuf::Clear for SimpleValidator {
    fn clear(&mut self) {
        self.pub_key.clear();
        self.voting_power = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleValidator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleValidator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tendermint/types/validator.proto\x12\x10tendermint.types\x1a\x14go\
    goproto/gogo.proto\x1a\x1ctendermint/crypto/keys.proto\"\xb2\x01\n\x0cVa\
    lidatorSet\x12;\n\nvalidators\x18\x01\x20\x03(\x0b2\x1b.tendermint.types\
    .ValidatorR\nvalidators\x127\n\x08proposer\x18\x02\x20\x01(\x0b2\x1b.ten\
    dermint.types.ValidatorR\x08proposer\x12,\n\x12total_voting_power\x18\
    \x03\x20\x01(\x03R\x10totalVotingPower\"\xb2\x01\n\tValidator\x12\x18\n\
    \x07address\x18\x01\x20\x01(\x0cR\x07address\x12;\n\x07pub_key\x18\x02\
    \x20\x01(\x0b2\x1c.tendermint.crypto.PublicKeyR\x06pubKeyB\x04\xc8\xde\
    \x1f\0\x12!\n\x0cvoting_power\x18\x03\x20\x01(\x03R\x0bvotingPower\x12+\
    \n\x11proposer_priority\x18\x04\x20\x01(\x03R\x10proposerPriority\"k\n\
    \x0fSimpleValidator\x125\n\x07pub_key\x18\x01\x20\x01(\x0b2\x1c.tendermi\
    nt.crypto.PublicKeyR\x06pubKey\x12!\n\x0cvoting_power\x18\x02\x20\x01(\
    \x03R\x0bvotingPowerB9Z7github.com/tendermint/tendermint/proto/tendermin\
    t/typesJ\xa3\x06\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\x08\x18\n\x08\n\x01\x08\x12\x03\x03\0N\
    \n\t\n\x02\x08\x0b\x12\x03\x03\0N\n\t\n\x02\x03\0\x12\x03\x05\x07\x1d\n\
    \t\n\x02\x03\x01\x12\x03\x06\x07%\n\n\n\x02\x04\0\x12\x04\x08\0\x0c\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \t\x02,\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\t\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\t\x0b\x14\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x15\
    \x1f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t*+\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\n\x02,\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\n\x02\t,\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\n\x02\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\n\x15\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n*+\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03\x0b\x02,\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x0b\x02\
    \n,\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0b\x15'\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b*\
    +\n\n\n\x02\x04\x01\x12\x04\x0e\0\x13\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x0e\x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x024\n\r\n\x05\x04\
    \x01\x02\0\x04\x12\x04\x0f\x02\x0e\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0f\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\x1e%\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0f23\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\
    \x10\x02S\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x10\x02\x0f4\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x03\x10\x02\x1d\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x10\x1e%\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1023\n\x0c\n\
    \x05\x04\x01\x02\x01\x08\x12\x03\x104R\n\x0f\n\x08\x04\x01\x02\x01\x08\
    \xe9\xfb\x03\x12\x03\x105Q\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x11\x024\
    \n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x11\x02\x10S\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x11\x1e*\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1123\n\x0b\n\x04\x04\
    \x01\x02\x03\x12\x03\x12\x024\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x12\
    \x02\x114\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x12\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03\x12\x1e/\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03\x1223\n\n\n\x02\x04\x02\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x15\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x16\x02/\
    \n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x16\x02\x15\x19\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x16\x02\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x16\
    \x1e%\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x16-.\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03\x17\x02/\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x17\x02\
    \x16/\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03\x17\x1e*\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x17-.b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
