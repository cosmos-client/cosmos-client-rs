// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/base/abci/v1beta1/abci.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct TxResponse {
    // message fields
    pub height: i64,
    pub txhash: ::std::string::String,
    pub codespace: ::std::string::String,
    pub code: u32,
    pub data: ::std::string::String,
    pub raw_log: ::std::string::String,
    pub logs: ::protobuf::RepeatedField<ABCIMessageLog>,
    pub info: ::std::string::String,
    pub gas_wanted: i64,
    pub gas_used: i64,
    pub tx: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub timestamp: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxResponse {
    fn default() -> &'a TxResponse {
        <TxResponse as ::protobuf::Message>::default_instance()
    }
}

impl TxResponse {
    pub fn new() -> TxResponse {
        ::std::default::Default::default()
    }

    // int64 height = 1;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // string txhash = 2;


    pub fn get_txhash(&self) -> &str {
        &self.txhash
    }
    pub fn clear_txhash(&mut self) {
        self.txhash.clear();
    }

    // Param is passed by value, moved
    pub fn set_txhash(&mut self, v: ::std::string::String) {
        self.txhash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txhash(&mut self) -> &mut ::std::string::String {
        &mut self.txhash
    }

    // Take field
    pub fn take_txhash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txhash, ::std::string::String::new())
    }

    // string codespace = 3;


    pub fn get_codespace(&self) -> &str {
        &self.codespace
    }
    pub fn clear_codespace(&mut self) {
        self.codespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_codespace(&mut self, v: ::std::string::String) {
        self.codespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codespace(&mut self) -> &mut ::std::string::String {
        &mut self.codespace
    }

    // Take field
    pub fn take_codespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codespace, ::std::string::String::new())
    }

    // uint32 code = 4;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // string data = 5;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }

    // string raw_log = 6;


    pub fn get_raw_log(&self) -> &str {
        &self.raw_log
    }
    pub fn clear_raw_log(&mut self) {
        self.raw_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_log(&mut self, v: ::std::string::String) {
        self.raw_log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_log(&mut self) -> &mut ::std::string::String {
        &mut self.raw_log
    }

    // Take field
    pub fn take_raw_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raw_log, ::std::string::String::new())
    }

    // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;


    pub fn get_logs(&self) -> &[ABCIMessageLog] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<ABCIMessageLog>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<ABCIMessageLog> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<ABCIMessageLog> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }

    // string info = 8;


    pub fn get_info(&self) -> &str {
        &self.info
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::std::string::String) {
        self.info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ::std::string::String {
        &mut self.info
    }

    // Take field
    pub fn take_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.info, ::std::string::String::new())
    }

    // int64 gas_wanted = 9;


    pub fn get_gas_wanted(&self) -> i64 {
        self.gas_wanted
    }
    pub fn clear_gas_wanted(&mut self) {
        self.gas_wanted = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_wanted(&mut self, v: i64) {
        self.gas_wanted = v;
    }

    // int64 gas_used = 10;


    pub fn get_gas_used(&self) -> i64 {
        self.gas_used
    }
    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: i64) {
        self.gas_used = v;
    }

    // .google.protobuf.Any tx = 11;


    pub fn get_tx(&self) -> &::protobuf::well_known_types::Any {
        self.tx.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: ::protobuf::well_known_types::Any) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> ::protobuf::well_known_types::Any {
        self.tx.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string timestamp = 12;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.logs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.txhash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codespace)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raw_log)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logs)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.info)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gas_wanted = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gas_used = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.txhash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.txhash);
        }
        if !self.codespace.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.codespace);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(4, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.data);
        }
        if !self.raw_log.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.raw_log);
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.info.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.info);
        }
        if self.gas_wanted != 0 {
            my_size += ::protobuf::rt::value_size(9, self.gas_wanted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(10, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if !self.txhash.is_empty() {
            os.write_string(2, &self.txhash)?;
        }
        if !self.codespace.is_empty() {
            os.write_string(3, &self.codespace)?;
        }
        if self.code != 0 {
            os.write_uint32(4, self.code)?;
        }
        if !self.data.is_empty() {
            os.write_string(5, &self.data)?;
        }
        if !self.raw_log.is_empty() {
            os.write_string(6, &self.raw_log)?;
        }
        for v in &self.logs {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.info.is_empty() {
            os.write_string(8, &self.info)?;
        }
        if self.gas_wanted != 0 {
            os.write_int64(9, self.gas_wanted)?;
        }
        if self.gas_used != 0 {
            os.write_int64(10, self.gas_used)?;
        }
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(12, &self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxResponse {
        TxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &TxResponse| { &m.height },
                |m: &mut TxResponse| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "txhash",
                |m: &TxResponse| { &m.txhash },
                |m: &mut TxResponse| { &mut m.txhash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "codespace",
                |m: &TxResponse| { &m.codespace },
                |m: &mut TxResponse| { &mut m.codespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "code",
                |m: &TxResponse| { &m.code },
                |m: &mut TxResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &TxResponse| { &m.data },
                |m: &mut TxResponse| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "raw_log",
                |m: &TxResponse| { &m.raw_log },
                |m: &mut TxResponse| { &mut m.raw_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ABCIMessageLog>>(
                "logs",
                |m: &TxResponse| { &m.logs },
                |m: &mut TxResponse| { &mut m.logs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "info",
                |m: &TxResponse| { &m.info },
                |m: &mut TxResponse| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gas_wanted",
                |m: &TxResponse| { &m.gas_wanted },
                |m: &mut TxResponse| { &mut m.gas_wanted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gas_used",
                |m: &TxResponse| { &m.gas_used },
                |m: &mut TxResponse| { &mut m.gas_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "tx",
                |m: &TxResponse| { &m.tx },
                |m: &mut TxResponse| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "timestamp",
                |m: &TxResponse| { &m.timestamp },
                |m: &mut TxResponse| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxResponse>(
                "TxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxResponse {
        static instance: ::protobuf::rt::LazyV2<TxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxResponse::new)
    }
}

impl ::protobuf::Clear for TxResponse {
    fn clear(&mut self) {
        self.height = 0;
        self.txhash.clear();
        self.codespace.clear();
        self.code = 0;
        self.data.clear();
        self.raw_log.clear();
        self.logs.clear();
        self.info.clear();
        self.gas_wanted = 0;
        self.gas_used = 0;
        self.tx.clear();
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ABCIMessageLog {
    // message fields
    pub msg_index: u32,
    pub log: ::std::string::String,
    pub events: ::protobuf::RepeatedField<StringEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ABCIMessageLog {
    fn default() -> &'a ABCIMessageLog {
        <ABCIMessageLog as ::protobuf::Message>::default_instance()
    }
}

impl ABCIMessageLog {
    pub fn new() -> ABCIMessageLog {
        ::std::default::Default::default()
    }

    // uint32 msg_index = 1;


    pub fn get_msg_index(&self) -> u32 {
        self.msg_index
    }
    pub fn clear_msg_index(&mut self) {
        self.msg_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_msg_index(&mut self, v: u32) {
        self.msg_index = v;
    }

    // string log = 2;


    pub fn get_log(&self) -> &str {
        &self.log
    }
    pub fn clear_log(&mut self) {
        self.log.clear();
    }

    // Param is passed by value, moved
    pub fn set_log(&mut self, v: ::std::string::String) {
        self.log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log(&mut self) -> &mut ::std::string::String {
        &mut self.log
    }

    // Take field
    pub fn take_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log, ::std::string::String::new())
    }

    // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3;


    pub fn get_events(&self) -> &[StringEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<StringEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<StringEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<StringEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ABCIMessageLog {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.msg_index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.msg_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.msg_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.log.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.log);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.msg_index != 0 {
            os.write_uint32(1, self.msg_index)?;
        }
        if !self.log.is_empty() {
            os.write_string(2, &self.log)?;
        }
        for v in &self.events {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ABCIMessageLog {
        ABCIMessageLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "msg_index",
                |m: &ABCIMessageLog| { &m.msg_index },
                |m: &mut ABCIMessageLog| { &mut m.msg_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log",
                |m: &ABCIMessageLog| { &m.log },
                |m: &mut ABCIMessageLog| { &mut m.log },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StringEvent>>(
                "events",
                |m: &ABCIMessageLog| { &m.events },
                |m: &mut ABCIMessageLog| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ABCIMessageLog>(
                "ABCIMessageLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ABCIMessageLog {
        static instance: ::protobuf::rt::LazyV2<ABCIMessageLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ABCIMessageLog::new)
    }
}

impl ::protobuf::Clear for ABCIMessageLog {
    fn clear(&mut self) {
        self.msg_index = 0;
        self.log.clear();
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ABCIMessageLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ABCIMessageLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringEvent {
    // message fields
    pub field_type: ::std::string::String,
    pub attributes: ::protobuf::RepeatedField<Attribute>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringEvent {
    fn default() -> &'a StringEvent {
        <StringEvent as ::protobuf::Message>::default_instance()
    }
}

impl StringEvent {
    pub fn new() -> StringEvent {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2;


    pub fn get_attributes(&self) -> &[Attribute] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<Attribute>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<Attribute> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<Attribute> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        for v in &self.attributes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringEvent {
        StringEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &StringEvent| { &m.field_type },
                |m: &mut StringEvent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Attribute>>(
                "attributes",
                |m: &StringEvent| { &m.attributes },
                |m: &mut StringEvent| { &mut m.attributes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringEvent>(
                "StringEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringEvent {
        static instance: ::protobuf::rt::LazyV2<StringEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringEvent::new)
    }
}

impl ::protobuf::Clear for StringEvent {
    fn clear(&mut self) {
        self.field_type.clear();
        self.attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Attribute {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Attribute {
    fn default() -> &'a Attribute {
        <Attribute as ::protobuf::Message>::default_instance()
    }
}

impl Attribute {
    pub fn new() -> Attribute {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Attribute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Attribute {
        Attribute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Attribute| { &m.key },
                |m: &mut Attribute| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Attribute| { &m.value },
                |m: &mut Attribute| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Attribute>(
                "Attribute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Attribute {
        static instance: ::protobuf::rt::LazyV2<Attribute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Attribute::new)
    }
}

impl ::protobuf::Clear for Attribute {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Attribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attribute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GasInfo {
    // message fields
    pub gas_wanted: u64,
    pub gas_used: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GasInfo {
    fn default() -> &'a GasInfo {
        <GasInfo as ::protobuf::Message>::default_instance()
    }
}

impl GasInfo {
    pub fn new() -> GasInfo {
        ::std::default::Default::default()
    }

    // uint64 gas_wanted = 1;


    pub fn get_gas_wanted(&self) -> u64 {
        self.gas_wanted
    }
    pub fn clear_gas_wanted(&mut self) {
        self.gas_wanted = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_wanted(&mut self, v: u64) {
        self.gas_wanted = v;
    }

    // uint64 gas_used = 2;


    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }
}

impl ::protobuf::Message for GasInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_wanted = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.gas_wanted != 0 {
            my_size += ::protobuf::rt::value_size(1, self.gas_wanted, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(2, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.gas_wanted != 0 {
            os.write_uint64(1, self.gas_wanted)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(2, self.gas_used)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GasInfo {
        GasInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_wanted",
                |m: &GasInfo| { &m.gas_wanted },
                |m: &mut GasInfo| { &mut m.gas_wanted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_used",
                |m: &GasInfo| { &m.gas_used },
                |m: &mut GasInfo| { &mut m.gas_used },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GasInfo>(
                "GasInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GasInfo {
        static instance: ::protobuf::rt::LazyV2<GasInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GasInfo::new)
    }
}

impl ::protobuf::Clear for GasInfo {
    fn clear(&mut self) {
        self.gas_wanted = 0;
        self.gas_used = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GasInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GasInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Result {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub log: ::std::string::String,
    pub events: ::protobuf::RepeatedField<super::types::Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Result {
    fn default() -> &'a Result {
        <Result as ::protobuf::Message>::default_instance()
    }
}

impl Result {
    pub fn new() -> Result {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string log = 2;


    pub fn get_log(&self) -> &str {
        &self.log
    }
    pub fn clear_log(&mut self) {
        self.log.clear();
    }

    // Param is passed by value, moved
    pub fn set_log(&mut self, v: ::std::string::String) {
        self.log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log(&mut self) -> &mut ::std::string::String {
        &mut self.log
    }

    // Take field
    pub fn take_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log, ::std::string::String::new())
    }

    // repeated .tendermint.abci.Event events = 3;


    pub fn get_events(&self) -> &[super::types::Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<super::types::Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<super::types::Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<super::types::Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Result {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if !self.log.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.log);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if !self.log.is_empty() {
            os.write_string(2, &self.log)?;
        }
        for v in &self.events {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Result {
        Result::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Result| { &m.data },
                |m: &mut Result| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log",
                |m: &Result| { &m.log },
                |m: &mut Result| { &mut m.log },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::Event>>(
                "events",
                |m: &Result| { &m.events },
                |m: &mut Result| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Result>(
                "Result",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Result {
        static instance: ::protobuf::rt::LazyV2<Result> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Result::new)
    }
}

impl ::protobuf::Clear for Result {
    fn clear(&mut self) {
        self.data.clear();
        self.log.clear();
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Result {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Result {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimulationResponse {
    // message fields
    pub gas_info: ::protobuf::SingularPtrField<GasInfo>,
    pub result: ::protobuf::SingularPtrField<Result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimulationResponse {
    fn default() -> &'a SimulationResponse {
        <SimulationResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulationResponse {
    pub fn new() -> SimulationResponse {
        ::std::default::Default::default()
    }

    // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;


    pub fn get_gas_info(&self) -> &GasInfo {
        self.gas_info.as_ref().unwrap_or_else(|| <GasInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gas_info(&mut self) {
        self.gas_info.clear();
    }

    pub fn has_gas_info(&self) -> bool {
        self.gas_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_info(&mut self, v: GasInfo) {
        self.gas_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_info(&mut self) -> &mut GasInfo {
        if self.gas_info.is_none() {
            self.gas_info.set_default();
        }
        self.gas_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_info(&mut self) -> GasInfo {
        self.gas_info.take().unwrap_or_else(|| GasInfo::new())
    }

    // .cosmos.base.abci.v1beta1.Result result = 2;


    pub fn get_result(&self) -> &Result {
        self.result.as_ref().unwrap_or_else(|| <Result as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: Result) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut Result {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> Result {
        self.result.take().unwrap_or_else(|| Result::new())
    }
}

impl ::protobuf::Message for SimulationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gas_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gas_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gas_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gas_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimulationResponse {
        SimulationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GasInfo>>(
                "gas_info",
                |m: &SimulationResponse| { &m.gas_info },
                |m: &mut SimulationResponse| { &mut m.gas_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Result>>(
                "result",
                |m: &SimulationResponse| { &m.result },
                |m: &mut SimulationResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimulationResponse>(
                "SimulationResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimulationResponse {
        static instance: ::protobuf::rt::LazyV2<SimulationResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimulationResponse::new)
    }
}

impl ::protobuf::Clear for SimulationResponse {
    fn clear(&mut self) {
        self.gas_info.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimulationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgData {
    // message fields
    pub msg_type: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgData {
    fn default() -> &'a MsgData {
        <MsgData as ::protobuf::Message>::default_instance()
    }
}

impl MsgData {
    pub fn new() -> MsgData {
        ::std::default::Default::default()
    }

    // string msg_type = 1;


    pub fn get_msg_type(&self) -> &str {
        &self.msg_type
    }
    pub fn clear_msg_type(&mut self) {
        self.msg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_type(&mut self, v: ::std::string::String) {
        self.msg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_type(&mut self) -> &mut ::std::string::String {
        &mut self.msg_type
    }

    // Take field
    pub fn take_msg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_type, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.msg_type.is_empty() {
            os.write_string(1, &self.msg_type)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgData {
        MsgData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_type",
                |m: &MsgData| { &m.msg_type },
                |m: &mut MsgData| { &mut m.msg_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &MsgData| { &m.data },
                |m: &mut MsgData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgData>(
                "MsgData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgData {
        static instance: ::protobuf::rt::LazyV2<MsgData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgData::new)
    }
}

impl ::protobuf::Clear for MsgData {
    fn clear(&mut self) {
        self.msg_type.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxMsgData {
    // message fields
    pub data: ::protobuf::RepeatedField<MsgData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxMsgData {
    fn default() -> &'a TxMsgData {
        <TxMsgData as ::protobuf::Message>::default_instance()
    }
}

impl TxMsgData {
    pub fn new() -> TxMsgData {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.abci.v1beta1.MsgData data = 1;


    pub fn get_data(&self) -> &[MsgData] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<MsgData>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<MsgData> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<MsgData> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TxMsgData {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.data {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxMsgData {
        TxMsgData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MsgData>>(
                "data",
                |m: &TxMsgData| { &m.data },
                |m: &mut TxMsgData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxMsgData>(
                "TxMsgData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxMsgData {
        static instance: ::protobuf::rt::LazyV2<TxMsgData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxMsgData::new)
    }
}

impl ::protobuf::Clear for TxMsgData {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxMsgData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxMsgData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SearchTxsResult {
    // message fields
    pub total_count: u64,
    pub count: u64,
    pub page_number: u64,
    pub page_total: u64,
    pub limit: u64,
    pub txs: ::protobuf::RepeatedField<TxResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SearchTxsResult {
    fn default() -> &'a SearchTxsResult {
        <SearchTxsResult as ::protobuf::Message>::default_instance()
    }
}

impl SearchTxsResult {
    pub fn new() -> SearchTxsResult {
        ::std::default::Default::default()
    }

    // uint64 total_count = 1;


    pub fn get_total_count(&self) -> u64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: u64) {
        self.total_count = v;
    }

    // uint64 count = 2;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    // uint64 page_number = 3;


    pub fn get_page_number(&self) -> u64 {
        self.page_number
    }
    pub fn clear_page_number(&mut self) {
        self.page_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_number(&mut self, v: u64) {
        self.page_number = v;
    }

    // uint64 page_total = 4;


    pub fn get_page_total(&self) -> u64 {
        self.page_total
    }
    pub fn clear_page_total(&mut self) {
        self.page_total = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_total(&mut self, v: u64) {
        self.page_total = v;
    }

    // uint64 limit = 5;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }

    // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6;


    pub fn get_txs(&self) -> &[TxResponse] {
        &self.txs
    }
    pub fn clear_txs(&mut self) {
        self.txs.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs(&mut self, v: ::protobuf::RepeatedField<TxResponse>) {
        self.txs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txs(&mut self) -> &mut ::protobuf::RepeatedField<TxResponse> {
        &mut self.txs
    }

    // Take field
    pub fn take_txs(&mut self) -> ::protobuf::RepeatedField<TxResponse> {
        ::std::mem::replace(&mut self.txs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SearchTxsResult {
    fn is_initialized(&self) -> bool {
        for v in &self.txs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.page_number = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.page_total = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.txs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.page_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.page_total != 0 {
            my_size += ::protobuf::rt::value_size(4, self.page_total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_uint64(1, self.total_count)?;
        }
        if self.count != 0 {
            os.write_uint64(2, self.count)?;
        }
        if self.page_number != 0 {
            os.write_uint64(3, self.page_number)?;
        }
        if self.page_total != 0 {
            os.write_uint64(4, self.page_total)?;
        }
        if self.limit != 0 {
            os.write_uint64(5, self.limit)?;
        }
        for v in &self.txs {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SearchTxsResult {
        SearchTxsResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_count",
                |m: &SearchTxsResult| { &m.total_count },
                |m: &mut SearchTxsResult| { &mut m.total_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "count",
                |m: &SearchTxsResult| { &m.count },
                |m: &mut SearchTxsResult| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "page_number",
                |m: &SearchTxsResult| { &m.page_number },
                |m: &mut SearchTxsResult| { &mut m.page_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "page_total",
                |m: &SearchTxsResult| { &m.page_total },
                |m: &mut SearchTxsResult| { &mut m.page_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "limit",
                |m: &SearchTxsResult| { &m.limit },
                |m: &mut SearchTxsResult| { &mut m.limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TxResponse>>(
                "txs",
                |m: &SearchTxsResult| { &m.txs },
                |m: &mut SearchTxsResult| { &mut m.txs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SearchTxsResult>(
                "SearchTxsResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SearchTxsResult {
        static instance: ::protobuf::rt::LazyV2<SearchTxsResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SearchTxsResult::new)
    }
}

impl ::protobuf::Clear for SearchTxsResult {
    fn clear(&mut self) {
        self.total_count = 0;
        self.count = 0;
        self.page_number = 0;
        self.page_total = 0;
        self.limit = 0;
        self.txs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SearchTxsResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SearchTxsResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#cosmos/base/abci/v1beta1/abci.proto\x12\x18cosmos.base.abci.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1btendermint/abci/types.proto\x1a\x19g\
    oogle/protobuf/any.proto\"\x96\x03\n\nTxResponse\x12\x16\n\x06height\x18\
    \x01\x20\x01(\x03R\x06height\x12\"\n\x06txhash\x18\x02\x20\x01(\tR\x06tx\
    hashB\n\xe2\xde\x1f\x06TxHash\x12\x1c\n\tcodespace\x18\x03\x20\x01(\tR\t\
    codespace\x12\x12\n\x04code\x18\x04\x20\x01(\rR\x04code\x12\x12\n\x04dat\
    a\x18\x05\x20\x01(\tR\x04data\x12\x17\n\x07raw_log\x18\x06\x20\x01(\tR\
    \x06rawLog\x12U\n\x04logs\x18\x07\x20\x03(\x0b2(.cosmos.base.abci.v1beta\
    1.ABCIMessageLogR\x04logsB\x17\xaa\xdf\x1f\x0fABCIMessageLogs\xc8\xde\
    \x1f\0\x12\x12\n\x04info\x18\x08\x20\x01(\tR\x04info\x12\x1d\n\ngas_want\
    ed\x18\t\x20\x01(\x03R\tgasWanted\x12\x19\n\x08gas_used\x18\n\x20\x01(\
    \x03R\x07gasUsed\x12$\n\x02tx\x18\x0b\x20\x01(\x0b2\x14.google.protobuf.\
    AnyR\x02tx\x12\x1c\n\ttimestamp\x18\x0c\x20\x01(\tR\ttimestamp:\x04\x88\
    \xa0\x1f\0\"\x9a\x01\n\x0eABCIMessageLog\x12\x1b\n\tmsg_index\x18\x01\
    \x20\x01(\rR\x08msgIndex\x12\x10\n\x03log\x18\x02\x20\x01(\tR\x03log\x12\
    S\n\x06events\x18\x03\x20\x03(\x0b2%.cosmos.base.abci.v1beta1.StringEven\
    tR\x06eventsB\x14\xaa\xdf\x1f\x0cStringEvents\xc8\xde\x1f\0:\x04\x80\xdc\
    \x20\x01\"r\n\x0bStringEvent\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04ty\
    pe\x12I\n\nattributes\x18\x02\x20\x03(\x0b2#.cosmos.base.abci.v1beta1.At\
    tributeR\nattributesB\x04\xc8\xde\x1f\0:\x04\x80\xdc\x20\x01\"3\n\tAttri\
    bute\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value\"o\n\x07GasInfo\x124\n\ngas_wanted\x18\x01\x20\
    \x01(\x04R\tgasWantedB\x15\xf2\xde\x1f\x11yaml:\"gas_wanted\"\x12.\n\x08\
    gas_used\x18\x02\x20\x01(\x04R\x07gasUsedB\x13\xf2\xde\x1f\x0fyaml:\"gas\
    _used\"\"j\n\x06Result\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\
    \x12\x10\n\x03log\x18\x02\x20\x01(\tR\x03log\x124\n\x06events\x18\x03\
    \x20\x03(\x0b2\x16.tendermint.abci.EventR\x06eventsB\x04\xc8\xde\x1f\0:\
    \x04\x88\xa0\x1f\0\"\x96\x01\n\x12SimulationResponse\x12F\n\x08gas_info\
    \x18\x01\x20\x01(\x0b2!.cosmos.base.abci.v1beta1.GasInfoR\x07gasInfoB\
    \x08\xd0\xde\x1f\x01\xc8\xde\x1f\0\x128\n\x06result\x18\x02\x20\x01(\x0b\
    2\x20.cosmos.base.abci.v1beta1.ResultR\x06result\">\n\x07MsgData\x12\x19\
    \n\x08msg_type\x18\x01\x20\x01(\tR\x07msgType\x12\x12\n\x04data\x18\x02\
    \x20\x01(\x0cR\x04data:\x04\x80\xdc\x20\x01\"H\n\tTxMsgData\x125\n\x04da\
    ta\x18\x01\x20\x03(\x0b2!.cosmos.base.abci.v1beta1.MsgDataR\x04data:\x04\
    \x80\xdc\x20\x01\"\xcf\x02\n\x0fSearchTxsResult\x12F\n\x0btotal_count\
    \x18\x01\x20\x01(\x04R\ntotalCountB%\xea\xde\x1f\x0btotal_count\xf2\xde\
    \x1f\x12yaml:\"total_count\"\x12\x14\n\x05count\x18\x02\x20\x01(\x04R\
    \x05count\x12F\n\x0bpage_number\x18\x03\x20\x01(\x04R\npageNumberB%\xea\
    \xde\x1f\x0bpage_number\xf2\xde\x1f\x12yaml:\"page_number\"\x12B\n\npage\
    _total\x18\x04\x20\x01(\x04R\tpageTotalB#\xf2\xde\x1f\x11yaml:\"page_tot\
    al\"\xea\xde\x1f\npage_total\x12\x14\n\x05limit\x18\x05\x20\x01(\x04R\
    \x05limit\x126\n\x03txs\x18\x06\x20\x03(\x0b2$.cosmos.base.abci.v1beta1.\
    TxResponseR\x03txs:\x04\x80\xdc\x20\x01B(Z\"github.com/cosmos/cosmos-sdk\
    /types\xd8\xe1\x1e\0J\xb6,\n\x07\x12\x05\0\0\x88\x01\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x20\n\t\n\x02\x03\0\x12\
    \x03\x03\x07\x1d\n\t\n\x02\x03\x01\x12\x03\x04\x07$\n\t\n\x02\x03\x02\
    \x12\x03\x05\x07\"\n\x08\n\x01\x08\x12\x03\x07\0O\n\t\n\x02\x08\x0b\x12\
    \x03\x07\0O\n\x08\n\x01\x08\x12\x03\x08\00\n\x0b\n\x04\x08\x9b\xec\x03\
    \x12\x03\x08\00\n\x8e\x01\n\x02\x04\0\x12\x04\x0c\0)\x01\x1a\x81\x01\x20\
    TxResponse\x20defines\x20a\x20structure\x20containing\x20relevant\x20tx\
    \x20data\x20and\x20metadata.\x20The\n\x20tags\x20are\x20stringified\x20a\
    nd\x20the\x20log\x20is\x20JSON\x20decoded.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x0c\x08\x12\n\n\n\x03\x04\0\x07\x12\x03\r\x02-\n\r\n\x06\x04\0\x07\x81\
    \xf4\x03\x12\x03\r\x02-\n\x1f\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x13\x1a\
    \x12\x20The\x20block\x20height\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0f\
    \x02\r-\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\
    \x11\x12\n$\n\x04\x04\0\x02\x01\x12\x03\x11\x028\x1a\x17\x20The\x20trans\
    action\x20hash.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x11\x02\x0f\x13\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x11\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x11\x12\
    \x13\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x11\x147\n\x0f\n\x08\x04\0\
    \x02\x01\x08\xec\xfb\x03\x12\x03\x11\x156\n%\n\x04\x04\0\x02\x02\x12\x03\
    \x13\x02\x17\x1a\x18\x20Namespace\x20for\x20the\x20Code\n\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04\x13\x02\x118\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13\t\x12\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x13\x15\x16\n\x1d\n\x04\x04\0\x02\x03\x12\
    \x03\x15\x02\x12\x1a\x10\x20Response\x20code.\n\n\r\n\x05\x04\0\x02\x03\
    \x04\x12\x04\x15\x02\x13\x17\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x15\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x15\t\r\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x15\x10\x11\n$\n\x04\x04\0\x02\x04\x12\x03\x17\x02\
    \x12\x1a\x17\x20Result\x20bytes,\x20if\x20any.\n\n\r\n\x05\x04\0\x02\x04\
    \x04\x12\x04\x17\x02\x15\x12\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x17\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x17\t\r\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03\x17\x10\x11\n^\n\x04\x04\0\x02\x05\x12\x03\x1a\x02\
    \x15\x1aQ\x20The\x20output\x20of\x20the\x20application's\x20logger\x20(r\
    aw\x20string).\x20May\x20be\n\x20non-deterministic.\n\n\r\n\x05\x04\0\
    \x02\x05\x04\x12\x04\x1a\x02\x17\x12\n\x0c\n\x05\x04\0\x02\x05\x05\x12\
    \x03\x1a\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1a\t\x10\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03\x1a\x13\x14\nX\n\x04\x04\0\x02\x06\x12\
    \x03\x1c\x02p\x1aK\x20The\x20output\x20of\x20the\x20application's\x20log\
    ger\x20(typed).\x20May\x20be\x20non-deterministic.\n\n\x0c\n\x05\x04\0\
    \x02\x06\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x1c\
    \x0b\x19\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1c\x1a\x1e\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03\x1c!\"\n\x0c\n\x05\x04\0\x02\x06\x08\x12\x03\
    \x1c#o\n\x0f\n\x08\x04\0\x02\x06\x08\xf5\xfb\x03\x12\x03\x1c$P\n\x0f\n\
    \x08\x04\0\x02\x06\x08\xe9\xfb\x03\x12\x03\x1cRn\n@\n\x04\x04\0\x02\x07\
    \x12\x03\x1e\x02\x12\x1a3\x20Additional\x20information.\x20May\x20be\x20\
    non-deterministic.\n\n\r\n\x05\x04\0\x02\x07\x04\x12\x04\x1e\x02\x1cp\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x07\x01\x12\x03\x1e\t\r\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1e\x10\
    \x11\n7\n\x04\x04\0\x02\x08\x12\x03\x20\x02\x17\x1a*\x20Amount\x20of\x20\
    gas\x20requested\x20for\x20transaction.\n\n\r\n\x05\x04\0\x02\x08\x04\
    \x12\x04\x20\x02\x1e\x12\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x20\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x20\x08\x12\n\x0c\n\x05\x04\0\
    \x02\x08\x03\x12\x03\x20\x15\x16\n5\n\x04\x04\0\x02\t\x12\x03\"\x02\x16\
    \x1a(\x20Amount\x20of\x20gas\x20consumed\x20by\x20transaction.\n\n\r\n\
    \x05\x04\0\x02\t\x04\x12\x04\"\x02\x20\x17\n\x0c\n\x05\x04\0\x02\t\x05\
    \x12\x03\"\x02\x07\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\"\x08\x10\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03\"\x13\x15\n-\n\x04\x04\0\x02\n\x12\x03$\x02\
    \x1e\x1a\x20\x20The\x20request\x20transaction\x20bytes.\n\n\r\n\x05\x04\
    \0\x02\n\x04\x12\x04$\x02\"\x16\n\x0c\n\x05\x04\0\x02\n\x06\x12\x03$\x02\
    \x15\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03$\x16\x18\n\x0c\n\x05\x04\0\x02\
    \n\x03\x12\x03$\x1b\x1d\n\xb9\x01\n\x04\x04\0\x02\x0b\x12\x03(\x02\x18\
    \x1a\xab\x01\x20Time\x20of\x20the\x20previous\x20block.\x20For\x20height\
    s\x20>\x201,\x20it's\x20the\x20weighted\x20median\x20of\n\x20the\x20time\
    stamps\x20of\x20the\x20valid\x20votes\x20in\x20the\x20block.LastCommit.\
    \x20For\x20height\x20==\x201,\n\x20it's\x20genesis\x20time.\n\n\r\n\x05\
    \x04\0\x02\x0b\x04\x12\x04(\x02$\x1e\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\
    \x03(\x02\x08\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03(\t\x12\n\x0c\n\x05\
    \x04\0\x02\x0b\x03\x12\x03(\x15\x17\n[\n\x02\x04\x01\x12\x04,\05\x01\x1a\
    O\x20ABCIMessageLog\x20defines\x20a\x20structure\x20containing\x20an\x20\
    indexed\x20tx\x20ABCI\x20message\x20log.\n\n\n\n\x03\x04\x01\x01\x12\x03\
    ,\x08\x16\n\n\n\x03\x04\x01\x07\x12\x03-\x02%\n\r\n\x06\x04\x01\x07\xc0\
    \x8b\x04\x12\x03-\x02%\n\x0b\n\x04\x04\x01\x02\0\x12\x03/\x02\x17\n\r\n\
    \x05\x04\x01\x02\0\x04\x12\x04/\x02-%\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03/\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03/\t\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03/\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x030\
    \x02\x17\n\r\n\x05\x04\x01\x02\x01\x04\x12\x040\x02/\x17\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x030\t\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x030\x15\x16\na\n\x04\
    \x04\x01\x02\x02\x12\x034\x02l\x1aT\x20Events\x20contains\x20a\x20slice\
    \x20of\x20Event\x20objects\x20that\x20were\x20emitted\x20during\x20some\
    \n\x20execution.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x034\x02\n\n\x0c\
    \n\x05\x04\x01\x02\x02\x06\x12\x034\x0b\x16\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x034\x17\x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x034\x20!\n\
    \x0c\n\x05\x04\x01\x02\x02\x08\x12\x034\"k\n\x0f\n\x08\x04\x01\x02\x02\
    \x08\xf5\xfb\x03\x12\x034#L\n\x0f\n\x08\x04\x01\x02\x02\x08\xe9\xfb\x03\
    \x12\x034Nj\n\x93\x01\n\x02\x04\x02\x12\x049\0>\x01\x1a\x86\x01\x20Strin\
    gEvent\x20defines\x20en\x20Event\x20object\x20wrapper\x20where\x20all\
    \x20the\x20attributes\n\x20contain\x20key/value\x20pairs\x20that\x20are\
    \x20strings\x20instead\x20of\x20raw\x20bytes.\n\n\n\n\x03\x04\x02\x01\
    \x12\x039\x08\x13\n\n\n\x03\x04\x02\x07\x12\x03:\x02%\n\r\n\x06\x04\x02\
    \x07\xc0\x8b\x04\x12\x03:\x02%\n\x0b\n\x04\x04\x02\x02\0\x12\x03<\x02$\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04<\x02:%\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03<\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03<\x15\x19\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03<\"#\n\x0b\n\x04\x04\x02\x02\x01\x12\x03=\
    \x02C\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x06\x12\x03=\x0b\x14\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03=\
    \x15\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03=\"#\n\x0c\n\x05\x04\x02\
    \x02\x01\x08\x12\x03=$B\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\
    \x03=%A\no\n\x02\x04\x03\x12\x04B\0E\x01\x1ac\x20Attribute\x20defines\
    \x20an\x20attribute\x20wrapper\x20where\x20the\x20key\x20and\x20value\
    \x20are\n\x20strings\x20instead\x20of\x20raw\x20bytes.\n\n\n\n\x03\x04\
    \x03\x01\x12\x03B\x08\x11\n\x0b\n\x04\x04\x03\x02\0\x12\x03C\x02\x13\n\r\
    \n\x05\x04\x03\x02\0\x04\x12\x04C\x02B\x13\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03C\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03C\t\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03C\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03D\x02\x13\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04D\x02C\x13\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03D\t\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03D\x11\x12\n7\
    \n\x02\x04\x04\x12\x04H\0N\x01\x1a+\x20GasInfo\x20defines\x20tx\x20execu\
    tion\x20gas\x20context.\n\n\n\n\x03\x04\x04\x01\x12\x03H\x08\x0f\nR\n\
    \x04\x04\x04\x02\0\x12\x03J\x02G\x1aE\x20GasWanted\x20is\x20the\x20maxim\
    um\x20units\x20of\x20work\x20we\x20allow\x20this\x20tx\x20to\x20perform.\
    \n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04J\x02H\x11\n\x0c\n\x05\x04\x04\x02\
    \0\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03J\t\x13\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03J\x16\x17\n\x0c\n\x05\x04\x04\x02\0\
    \x08\x12\x03J\x18F\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03J\
    \x19E\n>\n\x04\x04\x04\x02\x01\x12\x03M\x02C\x1a1\x20GasUsed\x20is\x20th\
    e\x20amount\x20of\x20gas\x20actually\x20consumed.\n\n\r\n\x05\x04\x04\
    \x02\x01\x04\x12\x04M\x02JG\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03M\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03M\t\x11\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03M\x14\x15\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03M\
    \x16B\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03M\x17A\nH\n\x02\
    \x04\x05\x12\x04Q\0^\x01\x1a<\x20Result\x20is\x20the\x20union\x20of\x20R\
    esponseFormat\x20and\x20ResponseCheckTx.\n\n\n\n\x03\x04\x05\x01\x12\x03\
    Q\x08\x0e\n\n\n\x03\x04\x05\x07\x12\x03R\x02-\n\r\n\x06\x04\x05\x07\x81\
    \xf4\x03\x12\x03R\x02-\n\xa4\x01\n\x04\x04\x05\x02\0\x12\x03V\x02\x11\
    \x1a\x96\x01\x20Data\x20is\x20any\x20data\x20returned\x20from\x20message\
    \x20or\x20handler\x20execution.\x20It\x20MUST\x20be\n\x20length\x20prefi\
    xed\x20in\x20order\x20to\x20separate\x20data\x20from\x20multiple\x20mess\
    age\x20executions.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04V\x02R-\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03V\x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\
    \x12\x03V\x08\x0c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03V\x0f\x10\nR\n\
    \x04\x04\x05\x02\x01\x12\x03Y\x02\x11\x1aE\x20Log\x20contains\x20the\x20\
    log\x20information\x20from\x20message\x20or\x20handler\x20execution.\n\n\
    \r\n\x05\x04\x05\x02\x01\x04\x12\x04Y\x02V\x11\n\x0c\n\x05\x04\x05\x02\
    \x01\x05\x12\x03Y\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03Y\t\x0c\
    \n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03Y\x0f\x10\no\n\x04\x04\x05\x02\
    \x02\x12\x03]\x02K\x1ab\x20Events\x20contains\x20a\x20slice\x20of\x20Eve\
    nt\x20objects\x20that\x20were\x20emitted\x20during\x20message\n\x20or\
    \x20handler\x20execution.\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03]\x02\
    \n\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03]\x0b\x20\n\x0c\n\x05\x04\x05\
    \x02\x02\x01\x12\x03]!'\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03]*+\n\x0c\
    \n\x05\x04\x05\x02\x02\x08\x12\x03],J\n\x0f\n\x08\x04\x05\x02\x02\x08\
    \xe9\xfb\x03\x12\x03]-I\nn\n\x02\x04\x06\x12\x04b\0e\x01\x1ab\x20Simulat\
    ionResponse\x20defines\x20the\x20response\x20generated\x20when\x20a\x20t\
    ransaction\x20is\n\x20successfully\x20simulated.\n\n\n\n\x03\x04\x06\x01\
    \x12\x03b\x08\x1a\n\x0b\n\x04\x04\x06\x02\0\x12\x03c\x02P\n\r\n\x05\x04\
    \x06\x02\0\x04\x12\x04c\x02b\x1c\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03c\
    \x02\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03c\n\x12\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x03c\x15\x16\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03c\x17O\
    \n\x0f\n\x08\x04\x06\x02\0\x08\xea\xfb\x03\x12\x03c\x180\n\x0f\n\x08\x04\
    \x06\x02\0\x08\xe9\xfb\x03\x12\x03c2N\n\x0b\n\x04\x04\x06\x02\x01\x12\
    \x03d\x02\x17\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04d\x02cP\n\x0c\n\x05\
    \x04\x06\x02\x01\x06\x12\x03d\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\
    \x12\x03d\n\x10\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03d\x15\x16\n]\n\
    \x02\x04\x07\x12\x04i\0n\x01\x1aQ\x20MsgData\x20defines\x20the\x20data\
    \x20returned\x20in\x20a\x20Result\x20object\x20during\x20message\n\x20ex\
    ecution.\n\n\n\n\x03\x04\x07\x01\x12\x03i\x08\x0f\n\n\n\x03\x04\x07\x07\
    \x12\x03j\x02%\n\r\n\x06\x04\x07\x07\xc0\x8b\x04\x12\x03j\x02%\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03l\x02\x16\n\r\n\x05\x04\x07\x02\0\x04\x12\x04l\
    \x02j%\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03l\x02\x08\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x03l\t\x11\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03l\x14\
    \x15\n\x0b\n\x04\x04\x07\x02\x01\x12\x03m\x02\x16\n\r\n\x05\x04\x07\x02\
    \x01\x04\x12\x04m\x02l\x16\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03m\x02\
    \x07\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03m\t\r\n\x0c\n\x05\x04\x07\
    \x02\x01\x03\x12\x03m\x14\x15\nn\n\x02\x04\x08\x12\x04r\0v\x01\x1ab\x20T\
    xMsgData\x20defines\x20a\x20list\x20of\x20MsgData.\x20A\x20transaction\
    \x20will\x20have\x20a\x20MsgData\x20object\n\x20for\x20each\x20message.\
    \n\n\n\n\x03\x04\x08\x01\x12\x03r\x08\x11\n\n\n\x03\x04\x08\x07\x12\x03s\
    \x02%\n\r\n\x06\x04\x08\x07\xc0\x8b\x04\x12\x03s\x02%\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03u\x02\x1c\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03u\x02\n\
    \n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03u\x0b\x12\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x03u\x13\x17\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03u\x1a\x1b\n\
    L\n\x02\x04\t\x12\x05y\0\x88\x01\x01\x1a?\x20SearchTxsResult\x20defines\
    \x20a\x20structure\x20for\x20querying\x20txs\x20pageable\n\n\n\n\x03\x04\
    \t\x01\x12\x03y\x08\x17\n\n\n\x03\x04\t\x07\x12\x03z\x02%\n\r\n\x06\x04\
    \t\x07\xc0\x8b\x04\x12\x03z\x02%\n\x1f\n\x04\x04\t\x02\0\x12\x03}\x02n\
    \x1a\x12\x20Count\x20of\x20all\x20txs\n\n\r\n\x05\x04\t\x02\0\x04\x12\
    \x04}\x02z%\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\
    \t\x02\0\x01\x12\x03}\t\x14\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03}\x17\x18\
    \n\x0c\n\x05\x04\t\x02\0\x08\x12\x03}\x19m\n\x0f\n\x08\x04\t\x02\0\x08\
    \xee\xfb\x03\x12\x03}\x1aG\n\x0f\n\x08\x04\t\x02\0\x08\xed\xfb\x03\x12\
    \x03}Il\n+\n\x04\x04\t\x02\x01\x12\x03\x7f\x02\x13\x1a\x1e\x20Count\x20o\
    f\x20txs\x20in\x20current\x20page\n\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\
    \x7f\x02}n\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\
    \x04\t\x02\x01\x01\x12\x03\x7f\t\x0e\n\x0c\n\x05\x04\t\x02\x01\x03\x12\
    \x03\x7f\x11\x12\n3\n\x04\x04\t\x02\x02\x12\x04\x81\x01\x02n\x1a%\x20Ind\
    ex\x20of\x20current\x20page,\x20start\x20from\x201\n\n\x0e\n\x05\x04\t\
    \x02\x02\x04\x12\x05\x81\x01\x02\x7f\x13\n\r\n\x05\x04\t\x02\x02\x05\x12\
    \x04\x81\x01\x02\x08\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\x81\x01\t\x14\n\
    \r\n\x05\x04\t\x02\x02\x03\x12\x04\x81\x01\x17\x18\n\r\n\x05\x04\t\x02\
    \x02\x08\x12\x04\x81\x01\x19m\n\x10\n\x08\x04\t\x02\x02\x08\xee\xfb\x03\
    \x12\x04\x81\x01\x1aG\n\x10\n\x08\x04\t\x02\x02\x08\xed\xfb\x03\x12\x04\
    \x81\x01Il\n$\n\x04\x04\t\x02\x03\x12\x04\x83\x01\x02k\x1a\x16\x20Count\
    \x20of\x20total\x20pages\n\n\x0f\n\x05\x04\t\x02\x03\x04\x12\x06\x83\x01\
    \x02\x81\x01n\n\r\n\x05\x04\t\x02\x03\x05\x12\x04\x83\x01\x02\x08\n\r\n\
    \x05\x04\t\x02\x03\x01\x12\x04\x83\x01\t\x13\n\r\n\x05\x04\t\x02\x03\x03\
    \x12\x04\x83\x01\x16\x17\n\r\n\x05\x04\t\x02\x03\x08\x12\x04\x83\x01\x18\
    j\n\x10\n\x08\x04\t\x02\x03\x08\xee\xfb\x03\x12\x04\x83\x01\x19E\n\x10\n\
    \x08\x04\t\x02\x03\x08\xed\xfb\x03\x12\x04\x83\x01Gi\n&\n\x04\x04\t\x02\
    \x04\x12\x04\x85\x01\x02\x13\x1a\x18\x20Max\x20count\x20txs\x20per\x20pa\
    ge\n\n\x0f\n\x05\x04\t\x02\x04\x04\x12\x06\x85\x01\x02\x83\x01k\n\r\n\
    \x05\x04\t\x02\x04\x05\x12\x04\x85\x01\x02\x08\n\r\n\x05\x04\t\x02\x04\
    \x01\x12\x04\x85\x01\t\x0e\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\x85\x01\
    \x11\x12\n+\n\x04\x04\t\x02\x05\x12\x04\x87\x01\x02\x1e\x1a\x1d\x20List\
    \x20of\x20txs\x20in\x20current\x20page\n\n\r\n\x05\x04\t\x02\x05\x04\x12\
    \x04\x87\x01\x02\n\n\r\n\x05\x04\t\x02\x05\x06\x12\x04\x87\x01\x0b\x15\n\
    \r\n\x05\x04\t\x02\x05\x01\x12\x04\x87\x01\x16\x19\n\r\n\x05\x04\t\x02\
    \x05\x03\x12\x04\x87\x01\x1c\x1db\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
