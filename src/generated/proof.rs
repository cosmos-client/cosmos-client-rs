// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/crypto/proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Proof {
    // message fields
    pub total: i64,
    pub index: i64,
    pub leaf_hash: ::std::vec::Vec<u8>,
    pub aunts: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Proof {
    fn default() -> &'a Proof {
        <Proof as ::protobuf::Message>::default_instance()
    }
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    // int64 total = 1;


    pub fn get_total(&self) -> i64 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i64) {
        self.total = v;
    }

    // int64 index = 2;


    pub fn get_index(&self) -> i64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i64) {
        self.index = v;
    }

    // bytes leaf_hash = 3;


    pub fn get_leaf_hash(&self) -> &[u8] {
        &self.leaf_hash
    }
    pub fn clear_leaf_hash(&mut self) {
        self.leaf_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_leaf_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.leaf_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leaf_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.leaf_hash
    }

    // Take field
    pub fn take_leaf_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.leaf_hash, ::std::vec::Vec::new())
    }

    // repeated bytes aunts = 4;


    pub fn get_aunts(&self) -> &[::std::vec::Vec<u8>] {
        &self.aunts
    }
    pub fn clear_aunts(&mut self) {
        self.aunts.clear();
    }

    // Param is passed by value, moved
    pub fn set_aunts(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.aunts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aunts(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.aunts
    }

    // Take field
    pub fn take_aunts(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.aunts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Proof {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.leaf_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.aunts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leaf_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.leaf_hash);
        }
        for value in &self.aunts {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_int64(1, self.total)?;
        }
        if self.index != 0 {
            os.write_int64(2, self.index)?;
        }
        if !self.leaf_hash.is_empty() {
            os.write_bytes(3, &self.leaf_hash)?;
        }
        for v in &self.aunts {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "total",
                |m: &Proof| { &m.total },
                |m: &mut Proof| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "index",
                |m: &Proof| { &m.index },
                |m: &mut Proof| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "leaf_hash",
                |m: &Proof| { &m.leaf_hash },
                |m: &mut Proof| { &mut m.leaf_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "aunts",
                |m: &Proof| { &m.aunts },
                |m: &mut Proof| { &mut m.aunts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Proof>(
                "Proof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Proof {
        static instance: ::protobuf::rt::LazyV2<Proof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Proof::new)
    }
}

impl ::protobuf::Clear for Proof {
    fn clear(&mut self) {
        self.total = 0;
        self.index = 0;
        self.leaf_hash.clear();
        self.aunts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValueOp {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    pub proof: ::protobuf::SingularPtrField<Proof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValueOp {
    fn default() -> &'a ValueOp {
        <ValueOp as ::protobuf::Message>::default_instance()
    }
}

impl ValueOp {
    pub fn new() -> ValueOp {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // .tendermint.crypto.Proof proof = 2;


    pub fn get_proof(&self) -> &Proof {
        self.proof.as_ref().unwrap_or_else(|| <Proof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: Proof) {
        self.proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut Proof {
        if self.proof.is_none() {
            self.proof.set_default();
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> Proof {
        self.proof.take().unwrap_or_else(|| Proof::new())
    }
}

impl ::protobuf::Message for ValueOp {
    fn is_initialized(&self) -> bool {
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if let Some(ref v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if let Some(ref v) = self.proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValueOp {
        ValueOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &ValueOp| { &m.key },
                |m: &mut ValueOp| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Proof>>(
                "proof",
                |m: &ValueOp| { &m.proof },
                |m: &mut ValueOp| { &mut m.proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValueOp>(
                "ValueOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValueOp {
        static instance: ::protobuf::rt::LazyV2<ValueOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValueOp::new)
    }
}

impl ::protobuf::Clear for ValueOp {
    fn clear(&mut self) {
        self.key.clear();
        self.proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValueOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DominoOp {
    // message fields
    pub key: ::std::string::String,
    pub input: ::std::string::String,
    pub output: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DominoOp {
    fn default() -> &'a DominoOp {
        <DominoOp as ::protobuf::Message>::default_instance()
    }
}

impl DominoOp {
    pub fn new() -> DominoOp {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string input = 2;


    pub fn get_input(&self) -> &str {
        &self.input
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::string::String) {
        self.input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::string::String {
        &mut self.input
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.input, ::std::string::String::new())
    }

    // string output = 3;


    pub fn get_output(&self) -> &str {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::string::String) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::string::String {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.output, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DominoOp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.input)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.output)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.input);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.input.is_empty() {
            os.write_string(2, &self.input)?;
        }
        if !self.output.is_empty() {
            os.write_string(3, &self.output)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DominoOp {
        DominoOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &DominoOp| { &m.key },
                |m: &mut DominoOp| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "input",
                |m: &DominoOp| { &m.input },
                |m: &mut DominoOp| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "output",
                |m: &DominoOp| { &m.output },
                |m: &mut DominoOp| { &mut m.output },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DominoOp>(
                "DominoOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DominoOp {
        static instance: ::protobuf::rt::LazyV2<DominoOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DominoOp::new)
    }
}

impl ::protobuf::Clear for DominoOp {
    fn clear(&mut self) {
        self.key.clear();
        self.input.clear();
        self.output.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DominoOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DominoOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofOp {
    // message fields
    pub field_type: ::std::string::String,
    pub key: ::std::vec::Vec<u8>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProofOp {
    fn default() -> &'a ProofOp {
        <ProofOp as ::protobuf::Message>::default_instance()
    }
}

impl ProofOp {
    pub fn new() -> ProofOp {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // bytes key = 2;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProofOp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofOp {
        ProofOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &ProofOp| { &m.field_type },
                |m: &mut ProofOp| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &ProofOp| { &m.key },
                |m: &mut ProofOp| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ProofOp| { &m.data },
                |m: &mut ProofOp| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProofOp>(
                "ProofOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProofOp {
        static instance: ::protobuf::rt::LazyV2<ProofOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProofOp::new)
    }
}

impl ::protobuf::Clear for ProofOp {
    fn clear(&mut self) {
        self.field_type.clear();
        self.key.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofOps {
    // message fields
    pub ops: ::protobuf::RepeatedField<ProofOp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProofOps {
    fn default() -> &'a ProofOps {
        <ProofOps as ::protobuf::Message>::default_instance()
    }
}

impl ProofOps {
    pub fn new() -> ProofOps {
        ::std::default::Default::default()
    }

    // repeated .tendermint.crypto.ProofOp ops = 1;


    pub fn get_ops(&self) -> &[ProofOp] {
        &self.ops
    }
    pub fn clear_ops(&mut self) {
        self.ops.clear();
    }

    // Param is passed by value, moved
    pub fn set_ops(&mut self, v: ::protobuf::RepeatedField<ProofOp>) {
        self.ops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ops(&mut self) -> &mut ::protobuf::RepeatedField<ProofOp> {
        &mut self.ops
    }

    // Take field
    pub fn take_ops(&mut self) -> ::protobuf::RepeatedField<ProofOp> {
        ::std::mem::replace(&mut self.ops, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProofOps {
    fn is_initialized(&self) -> bool {
        for v in &self.ops {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ops)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ops {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ops {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofOps {
        ProofOps::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProofOp>>(
                "ops",
                |m: &ProofOps| { &m.ops },
                |m: &mut ProofOps| { &mut m.ops },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProofOps>(
                "ProofOps",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProofOps {
        static instance: ::protobuf::rt::LazyV2<ProofOps> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProofOps::new)
    }
}

impl ::protobuf::Clear for ProofOps {
    fn clear(&mut self) {
        self.ops.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofOps {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOps {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dtendermint/crypto/proof.proto\x12\x11tendermint.crypto\x1a\x14gogo\
    proto/gogo.proto\"f\n\x05Proof\x12\x14\n\x05total\x18\x01\x20\x01(\x03R\
    \x05total\x12\x14\n\x05index\x18\x02\x20\x01(\x03R\x05index\x12\x1b\n\tl\
    eaf_hash\x18\x03\x20\x01(\x0cR\x08leafHash\x12\x14\n\x05aunts\x18\x04\
    \x20\x03(\x0cR\x05aunts\"K\n\x07ValueOp\x12\x10\n\x03key\x18\x01\x20\x01\
    (\x0cR\x03key\x12.\n\x05proof\x18\x02\x20\x01(\x0b2\x18.tendermint.crypt\
    o.ProofR\x05proof\"J\n\x08DominoOp\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05input\x18\x02\x20\x01(\tR\x05input\x12\x16\n\x06out\
    put\x18\x03\x20\x01(\tR\x06output\"C\n\x07ProofOp\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x10\n\x03key\x18\x02\x20\x01(\x0cR\x03key\
    \x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\">\n\x08ProofOps\x122\n\
    \x03ops\x18\x01\x20\x03(\x0b2\x1a.tendermint.crypto.ProofOpR\x03opsB\x04\
    \xc8\xde\x1f\0B:Z8github.com/tendermint/tendermint/proto/tendermint/cryp\
    toJ\xf8\n\n\x06\x12\x04\0\0(\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x01\x08\x19\n\x08\n\x01\x08\x12\x03\x03\0O\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0O\n\t\n\x02\x03\0\x12\x03\x05\x07\x1d\n\n\n\x02\
    \x04\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\r\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x08\x02\x1f\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x08\x02\x07\x0f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x07\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x08\x11\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x08\x1d\x1e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x1f\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\t\x02\x08\x1f\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\t\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\t\x1d\x1e\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\n\x02\x1f\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\n\x02\t\x1f\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\n\x11\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x1d\x1e\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x0b\x02\x1f\n\x0c\n\x05\x04\0\x02\x03\x04\
    \x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x0b\x10\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x11\x16\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0b\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x0e\0\x14\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x0e\x08\x0f\n&\n\x04\x04\x01\x02\0\x12\x03\
    \x10\x02\x10\x1a\x19\x20Encoded\x20in\x20ProofOp.Key.\n\n\r\n\x05\x04\
    \x01\x02\0\x04\x12\x04\x10\x02\x0e\x11\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x10\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x10\x08\x0b\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x10\x0e\x0f\n(\n\x04\x04\x01\x02\x01\
    \x12\x03\x13\x02\x12\x1a\x1b\x20To\x20encode\x20in\x20ProofOp.Data\n\n\r\
    \n\x05\x04\x01\x02\x01\x04\x12\x04\x13\x02\x10\x10\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x13\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x13\x10\x11\n\n\n\x02\
    \x04\x02\x12\x04\x16\0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x10\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x02\x14\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04\x17\x02\x16\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\t\x0c\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x17\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x18\x02\x14\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x18\x02\x17\x14\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x18\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\
    \x12\x13\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x19\x02\x14\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04\x19\x02\x18\x14\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x19\t\x0f\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x19\x12\x13\n\xae\x01\n\x02\x04\
    \x03\x12\x04\x1f\0#\x01\x1a\xa1\x01\x20ProofOp\x20defines\x20an\x20opera\
    tion\x20used\x20for\x20calculating\x20Merkle\x20root\n\x20The\x20data\
    \x20could\x20be\x20arbitrary\x20format,\x20providing\x20nessecary\x20dat\
    a\n\x20for\x20example\x20neighbouring\x20node\x20hash\n\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1f\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x20\x02\
    \x12\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x20\x02\x1f\x11\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\
    \x20\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\x10\x11\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03!\x02\x12\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04!\
    \x02\x20\x12\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03!\x02\x07\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03!\t\x0c\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03!\x10\x11\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\"\x02\x12\n\r\n\
    \x05\x04\x03\x02\x02\x04\x12\x04\"\x02!\x12\n\x0c\n\x05\x04\x03\x02\x02\
    \x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\"\t\r\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\"\x10\x11\nF\n\x02\x04\x04\x12\
    \x04&\0(\x01\x1a:\x20ProofOps\x20is\x20Merkle\x20proof\x20defined\x20by\
    \x20the\x20list\x20of\x20ProofOps\n\n\n\n\x03\x04\x04\x01\x12\x03&\x08\
    \x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03'\x02:\n\x0c\n\x05\x04\x04\x02\0\
    \x04\x12\x03'\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03'\x0b\x12\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03'\x13\x16\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03'\x19\x1a\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03'\x1b9\n\x0f\n\
    \x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03'\x1c8b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
