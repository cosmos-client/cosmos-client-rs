// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/capability/v1beta1/capability.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Capability {
    // message fields
    pub index: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Capability {
    fn default() -> &'a Capability {
        <Capability as ::protobuf::Message>::default_instance()
    }
}

impl Capability {
    pub fn new() -> Capability {
        ::std::default::Default::default()
    }

    // uint64 index = 1;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }
}

impl ::protobuf::Message for Capability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Capability {
        Capability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &Capability| { &m.index },
                |m: &mut Capability| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Capability>(
                "Capability",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Capability {
        static instance: ::protobuf::rt::LazyV2<Capability> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Capability::new)
    }
}

impl ::protobuf::Clear for Capability {
    fn clear(&mut self) {
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Capability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Owner {
    // message fields
    pub module: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Owner {
    fn default() -> &'a Owner {
        <Owner as ::protobuf::Message>::default_instance()
    }
}

impl Owner {
    pub fn new() -> Owner {
        ::std::default::Default::default()
    }

    // string module = 1;


    pub fn get_module(&self) -> &str {
        &self.module
    }
    pub fn clear_module(&mut self) {
        self.module.clear();
    }

    // Param is passed by value, moved
    pub fn set_module(&mut self, v: ::std::string::String) {
        self.module = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module(&mut self) -> &mut ::std::string::String {
        &mut self.module
    }

    // Take field
    pub fn take_module(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Owner {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.module.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.module);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.module.is_empty() {
            os.write_string(1, &self.module)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Owner {
        Owner::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "module",
                |m: &Owner| { &m.module },
                |m: &mut Owner| { &mut m.module },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Owner| { &m.name },
                |m: &mut Owner| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Owner>(
                "Owner",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Owner {
        static instance: ::protobuf::rt::LazyV2<Owner> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Owner::new)
    }
}

impl ::protobuf::Clear for Owner {
    fn clear(&mut self) {
        self.module.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Owner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Owner {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CapabilityOwners {
    // message fields
    pub owners: ::protobuf::RepeatedField<Owner>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CapabilityOwners {
    fn default() -> &'a CapabilityOwners {
        <CapabilityOwners as ::protobuf::Message>::default_instance()
    }
}

impl CapabilityOwners {
    pub fn new() -> CapabilityOwners {
        ::std::default::Default::default()
    }

    // repeated .cosmos.capability.v1beta1.Owner owners = 1;


    pub fn get_owners(&self) -> &[Owner] {
        &self.owners
    }
    pub fn clear_owners(&mut self) {
        self.owners.clear();
    }

    // Param is passed by value, moved
    pub fn set_owners(&mut self, v: ::protobuf::RepeatedField<Owner>) {
        self.owners = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owners(&mut self) -> &mut ::protobuf::RepeatedField<Owner> {
        &mut self.owners
    }

    // Take field
    pub fn take_owners(&mut self) -> ::protobuf::RepeatedField<Owner> {
        ::std::mem::replace(&mut self.owners, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CapabilityOwners {
    fn is_initialized(&self) -> bool {
        for v in &self.owners {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.owners)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.owners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.owners {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CapabilityOwners {
        CapabilityOwners::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Owner>>(
                "owners",
                |m: &CapabilityOwners| { &m.owners },
                |m: &mut CapabilityOwners| { &mut m.owners },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CapabilityOwners>(
                "CapabilityOwners",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CapabilityOwners {
        static instance: ::protobuf::rt::LazyV2<CapabilityOwners> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CapabilityOwners::new)
    }
}

impl ::protobuf::Clear for CapabilityOwners {
    fn clear(&mut self) {
        self.owners.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CapabilityOwners {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CapabilityOwners {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*cosmos/capability/v1beta1/capability.proto\x12\x19cosmos.capability.v\
    1beta1\x1a\x14gogoproto/gogo.proto\":\n\nCapability\x12&\n\x05index\x18\
    \x01\x20\x01(\x04R\x05indexB\x10\xf2\xde\x1f\x0cyaml:\"index\":\x04\x98\
    \xa0\x1f\0\"a\n\x05Owner\x12)\n\x06module\x18\x01\x20\x01(\tR\x06moduleB\
    \x11\xf2\xde\x1f\ryaml:\"module\"\x12#\n\x04name\x18\x02\x20\x01(\tR\x04\
    nameB\x0f\xf2\xde\x1f\x0byaml:\"name\":\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\
    \"R\n\x10CapabilityOwners\x12>\n\x06owners\x18\x01\x20\x03(\x0b2\x20.cos\
    mos.capability.v1beta1.OwnerR\x06ownersB\x04\xc8\xde\x1f\0B1Z/github.com\
    /cosmos/cosmos-sdk/x/capability/typesJ\xbe\x07\n\x06\x12\x04\0\0\x1d\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08!\n\x08\
    \n\x01\x08\x12\x03\x03\0F\n\t\n\x02\x08\x0b\x12\x03\x03\0F\n\t\n\x02\x03\
    \0\x12\x03\x05\x07\x1d\n\x88\x01\n\x02\x04\0\x12\x04\t\0\r\x01\x1a|\x20C\
    apability\x20defines\x20an\x20implementation\x20of\x20an\x20object\x20ca\
    pability.\x20The\x20index\n\x20provided\x20to\x20a\x20Capability\x20must\
    \x20be\x20globally\x20unique.\n\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x12\n\
    \n\n\x03\x04\0\x07\x12\x03\n\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\
    \x03\n\x02.\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02=\n\r\n\x05\x04\0\x02\
    \0\x04\x12\x04\x0c\x02\n.\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x0e\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x0c\x11\x12\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c\x13<\
    \n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0c\x14;\nz\n\x02\x04\
    \x01\x12\x04\x11\0\x17\x01\x1an\x20Owner\x20defines\x20a\x20single\x20ca\
    pability\x20owner.\x20An\x20owner\x20is\x20defined\x20by\x20the\x20name\
    \x20of\n\x20capability\x20and\x20the\x20module\x20name.\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x11\x08\r\n\n\n\x03\x04\x01\x07\x12\x03\x12\x02.\n\r\n\
    \x06\x04\x01\x07\x83\xf4\x03\x12\x03\x12\x02.\n\n\n\x03\x04\x01\x07\x12\
    \x03\x13\x02.\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x13\x02.\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x15\x02?\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x15\x02\x13.\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x15\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x15\x12\x13\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x15\x14>\n\
    \x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\x03\x12\x03\x15\x15=\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x16\x02=\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    \x16\x02\x15?\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03\x16\t\r\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x16\x12\x13\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x16\x14\
    <\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x16\x15;\nq\n\x02\
    \x04\x02\x12\x04\x1b\0\x1d\x01\x1ae\x20CapabilityOwners\x20defines\x20a\
    \x20set\x20of\x20owners\x20of\x20a\x20single\x20Capability.\x20The\x20se\
    t\x20of\n\x20owners\x20must\x20be\x20unique.\n\n\n\n\x03\x04\x02\x01\x12\
    \x03\x1b\x08\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1c\x02;\n\x0c\n\x05\
    \x04\x02\x02\0\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x1c\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1c\x11\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03\x1c\x1a\x1b\n\x0c\n\x05\x04\x02\x02\0\
    \x08\x12\x03\x1c\x1c:\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\
    \x1c\x1d9b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
