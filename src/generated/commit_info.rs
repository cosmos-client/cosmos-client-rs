// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/base/store/v1beta1/commit_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct CommitInfo {
    // message fields
    pub version: i64,
    pub store_infos: ::protobuf::RepeatedField<StoreInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitInfo {
    fn default() -> &'a CommitInfo {
        <CommitInfo as ::protobuf::Message>::default_instance()
    }
}

impl CommitInfo {
    pub fn new() -> CommitInfo {
        ::std::default::Default::default()
    }

    // int64 version = 1;


    pub fn get_version(&self) -> i64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    // repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2;


    pub fn get_store_infos(&self) -> &[StoreInfo] {
        &self.store_infos
    }
    pub fn clear_store_infos(&mut self) {
        self.store_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_store_infos(&mut self, v: ::protobuf::RepeatedField<StoreInfo>) {
        self.store_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_store_infos(&mut self) -> &mut ::protobuf::RepeatedField<StoreInfo> {
        &mut self.store_infos
    }

    // Take field
    pub fn take_store_infos(&mut self) -> ::protobuf::RepeatedField<StoreInfo> {
        ::std::mem::replace(&mut self.store_infos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CommitInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.store_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.store_infos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.store_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int64(1, self.version)?;
        }
        for v in &self.store_infos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitInfo {
        CommitInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "version",
                |m: &CommitInfo| { &m.version },
                |m: &mut CommitInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StoreInfo>>(
                "store_infos",
                |m: &CommitInfo| { &m.store_infos },
                |m: &mut CommitInfo| { &mut m.store_infos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitInfo>(
                "CommitInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommitInfo {
        static instance: ::protobuf::rt::LazyV2<CommitInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommitInfo::new)
    }
}

impl ::protobuf::Clear for CommitInfo {
    fn clear(&mut self) {
        self.version = 0;
        self.store_infos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StoreInfo {
    // message fields
    pub name: ::std::string::String,
    pub commit_id: ::protobuf::SingularPtrField<CommitID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreInfo {
    fn default() -> &'a StoreInfo {
        <StoreInfo as ::protobuf::Message>::default_instance()
    }
}

impl StoreInfo {
    pub fn new() -> StoreInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .cosmos.base.store.v1beta1.CommitID commit_id = 2;


    pub fn get_commit_id(&self) -> &CommitID {
        self.commit_id.as_ref().unwrap_or_else(|| <CommitID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_commit_id(&mut self) {
        self.commit_id.clear();
    }

    pub fn has_commit_id(&self) -> bool {
        self.commit_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_id(&mut self, v: CommitID) {
        self.commit_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_id(&mut self) -> &mut CommitID {
        if self.commit_id.is_none() {
            self.commit_id.set_default();
        }
        self.commit_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_id(&mut self) -> CommitID {
        self.commit_id.take().unwrap_or_else(|| CommitID::new())
    }
}

impl ::protobuf::Message for StoreInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.commit_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commit_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.commit_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.commit_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreInfo {
        StoreInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &StoreInfo| { &m.name },
                |m: &mut StoreInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommitID>>(
                "commit_id",
                |m: &StoreInfo| { &m.commit_id },
                |m: &mut StoreInfo| { &mut m.commit_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StoreInfo>(
                "StoreInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StoreInfo {
        static instance: ::protobuf::rt::LazyV2<StoreInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StoreInfo::new)
    }
}

impl ::protobuf::Clear for StoreInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.commit_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StoreInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitID {
    // message fields
    pub version: i64,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitID {
    fn default() -> &'a CommitID {
        <CommitID as ::protobuf::Message>::default_instance()
    }
}

impl CommitID {
    pub fn new() -> CommitID {
        ::std::default::Default::default()
    }

    // int64 version = 1;


    pub fn get_version(&self) -> i64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CommitID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int64(1, self.version)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitID {
        CommitID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "version",
                |m: &CommitID| { &m.version },
                |m: &mut CommitID| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CommitID| { &m.hash },
                |m: &mut CommitID| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitID>(
                "CommitID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommitID {
        static instance: ::protobuf::rt::LazyV2<CommitID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommitID::new)
    }
}

impl ::protobuf::Clear for CommitID {
    fn clear(&mut self) {
        self.version = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+cosmos/base/store/v1beta1/commit_info.proto\x12\x19cosmos.base.store.\
    v1beta1\x1a\x14gogoproto/gogo.proto\"s\n\nCommitInfo\x12\x18\n\x07versio\
    n\x18\x01\x20\x01(\x03R\x07version\x12K\n\x0bstore_infos\x18\x02\x20\x03\
    (\x0b2$.cosmos.base.store.v1beta1.StoreInfoR\nstoreInfosB\x04\xc8\xde\
    \x1f\0\"g\n\tStoreInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    F\n\tcommit_id\x18\x02\x20\x01(\x0b2#.cosmos.base.store.v1beta1.CommitID\
    R\x08commitIdB\x04\xc8\xde\x1f\0\">\n\x08CommitID\x12\x18\n\x07version\
    \x18\x01\x20\x01(\x03R\x07version\x12\x12\n\x04hash\x18\x02\x20\x01(\x0c\
    R\x04hash:\x04\x98\xa0\x1f\0B*Z(github.com/cosmos/cosmos-sdk/store/types\
    J\xb3\x07\n\x06\x12\x04\0\0\x1c\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x01\x08!\n\t\n\x02\x03\0\x12\x03\x03\x07\x1d\n\
    \x08\n\x01\x08\x12\x03\x05\0?\n\t\n\x02\x08\x0b\x12\x03\x05\0?\nn\n\x02\
    \x04\0\x12\x04\t\0\x0c\x01\x1ab\x20CommitInfo\x20defines\x20commit\x20in\
    formation\x20used\x20by\x20the\x20multi-store\x20when\x20committing\n\
    \x20a\x20version/height.\n\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x12\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\n\x02%\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\x02\
    \t\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\n\x15\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n#$\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x02D\n\x0c\n\x05\x04\0\x02\x01\x04\
    \x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0b\x0b\x14\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x15\x20\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0b#$\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x0b%C\n\x0f\
    \n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x0b&B\n\x83\x01\n\x02\x04\
    \x01\x12\x04\x10\0\x13\x01\x1aw\x20StoreInfo\x20defines\x20store-specifi\
    c\x20commit\x20information.\x20It\x20contains\x20a\x20reference\n\x20bet\
    ween\x20a\x20store\x20name\x20and\x20the\x20commit\x20ID.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x10\x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x11\
    \x02\x19\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x11\x02\x10\x13\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x11\x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11\x17\x18\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x12\x028\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04\x12\x02\x11\x19\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x12\x02\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x12\x0b\x14\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x12\x17\x18\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\
    \x03\x12\x197\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03\x12\
    \x1a6\n_\n\x02\x04\x02\x12\x04\x17\0\x1c\x01\x1aS\x20CommitID\x20defines\
    \x20the\x20committment\x20information\x20when\x20a\x20specific\x20store\
    \x20is\n\x20committed.\n\n\n\n\x03\x04\x02\x01\x12\x03\x17\x08\x10\n\n\n\
    \x03\x04\x02\x07\x12\x03\x18\x02.\n\r\n\x06\x04\x02\x07\x83\xf4\x03\x12\
    \x03\x18\x02.\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\x02\x14\n\r\n\x05\
    \x04\x02\x02\0\x04\x12\x04\x1a\x02\x18.\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\x08\x0f\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1a\x12\x13\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\x1b\x02\x14\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1b\x02\
    \x1a\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1b\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03\x1b\x08\x0c\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x1b\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
