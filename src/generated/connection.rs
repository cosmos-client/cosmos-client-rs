// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/connection/v1/connection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionEnd {
    // message fields
    pub client_id: ::std::string::String,
    pub versions: ::protobuf::RepeatedField<Version>,
    pub state: State,
    pub counterparty: ::protobuf::SingularPtrField<Counterparty>,
    pub delay_period: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionEnd {
    fn default() -> &'a ConnectionEnd {
        <ConnectionEnd as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionEnd {
    pub fn new() -> ConnectionEnd {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // repeated .ibc.core.connection.v1.Version versions = 2;


    pub fn get_versions(&self) -> &[Version] {
        &self.versions
    }
    pub fn clear_versions(&mut self) {
        self.versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_versions(&mut self, v: ::protobuf::RepeatedField<Version>) {
        self.versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_versions(&mut self) -> &mut ::protobuf::RepeatedField<Version> {
        &mut self.versions
    }

    // Take field
    pub fn take_versions(&mut self) -> ::protobuf::RepeatedField<Version> {
        ::std::mem::replace(&mut self.versions, ::protobuf::RepeatedField::new())
    }

    // .ibc.core.connection.v1.State state = 3;


    pub fn get_state(&self) -> State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    // .ibc.core.connection.v1.Counterparty counterparty = 4;


    pub fn get_counterparty(&self) -> &Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> Counterparty {
        self.counterparty.take().unwrap_or_else(|| Counterparty::new())
    }

    // uint64 delay_period = 5;


    pub fn get_delay_period(&self) -> u64 {
        self.delay_period
    }
    pub fn clear_delay_period(&mut self) {
        self.delay_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay_period(&mut self, v: u64) {
        self.delay_period = v;
    }
}

impl ::protobuf::Message for ConnectionEnd {
    fn is_initialized(&self) -> bool {
        for v in &self.versions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.versions)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.delay_period = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::value_size(5, self.delay_period, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.versions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(5, self.delay_period)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionEnd {
        ConnectionEnd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &ConnectionEnd| { &m.client_id },
                |m: &mut ConnectionEnd| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Version>>(
                "versions",
                |m: &ConnectionEnd| { &m.versions },
                |m: &mut ConnectionEnd| { &mut m.versions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "state",
                |m: &ConnectionEnd| { &m.state },
                |m: &mut ConnectionEnd| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Counterparty>>(
                "counterparty",
                |m: &ConnectionEnd| { &m.counterparty },
                |m: &mut ConnectionEnd| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "delay_period",
                |m: &ConnectionEnd| { &m.delay_period },
                |m: &mut ConnectionEnd| { &mut m.delay_period },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionEnd>(
                "ConnectionEnd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionEnd {
        static instance: ::protobuf::rt::LazyV2<ConnectionEnd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionEnd::new)
    }
}

impl ::protobuf::Clear for ConnectionEnd {
    fn clear(&mut self) {
        self.client_id.clear();
        self.versions.clear();
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
        self.counterparty.clear();
        self.delay_period = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionEnd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdentifiedConnection {
    // message fields
    pub id: ::std::string::String,
    pub client_id: ::std::string::String,
    pub versions: ::protobuf::RepeatedField<Version>,
    pub state: State,
    pub counterparty: ::protobuf::SingularPtrField<Counterparty>,
    pub delay_period: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentifiedConnection {
    fn default() -> &'a IdentifiedConnection {
        <IdentifiedConnection as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedConnection {
    pub fn new() -> IdentifiedConnection {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // repeated .ibc.core.connection.v1.Version versions = 3;


    pub fn get_versions(&self) -> &[Version] {
        &self.versions
    }
    pub fn clear_versions(&mut self) {
        self.versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_versions(&mut self, v: ::protobuf::RepeatedField<Version>) {
        self.versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_versions(&mut self) -> &mut ::protobuf::RepeatedField<Version> {
        &mut self.versions
    }

    // Take field
    pub fn take_versions(&mut self) -> ::protobuf::RepeatedField<Version> {
        ::std::mem::replace(&mut self.versions, ::protobuf::RepeatedField::new())
    }

    // .ibc.core.connection.v1.State state = 4;


    pub fn get_state(&self) -> State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    // .ibc.core.connection.v1.Counterparty counterparty = 5;


    pub fn get_counterparty(&self) -> &Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> Counterparty {
        self.counterparty.take().unwrap_or_else(|| Counterparty::new())
    }

    // uint64 delay_period = 6;


    pub fn get_delay_period(&self) -> u64 {
        self.delay_period
    }
    pub fn clear_delay_period(&mut self) {
        self.delay_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay_period(&mut self, v: u64) {
        self.delay_period = v;
    }
}

impl ::protobuf::Message for IdentifiedConnection {
    fn is_initialized(&self) -> bool {
        for v in &self.versions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.versions)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.delay_period = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.state);
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.delay_period != 0 {
            my_size += ::protobuf::rt::value_size(6, self.delay_period, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        for v in &self.versions {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.delay_period != 0 {
            os.write_uint64(6, self.delay_period)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentifiedConnection {
        IdentifiedConnection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &IdentifiedConnection| { &m.id },
                |m: &mut IdentifiedConnection| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &IdentifiedConnection| { &m.client_id },
                |m: &mut IdentifiedConnection| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Version>>(
                "versions",
                |m: &IdentifiedConnection| { &m.versions },
                |m: &mut IdentifiedConnection| { &mut m.versions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "state",
                |m: &IdentifiedConnection| { &m.state },
                |m: &mut IdentifiedConnection| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Counterparty>>(
                "counterparty",
                |m: &IdentifiedConnection| { &m.counterparty },
                |m: &mut IdentifiedConnection| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "delay_period",
                |m: &IdentifiedConnection| { &m.delay_period },
                |m: &mut IdentifiedConnection| { &mut m.delay_period },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentifiedConnection>(
                "IdentifiedConnection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentifiedConnection {
        static instance: ::protobuf::rt::LazyV2<IdentifiedConnection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentifiedConnection::new)
    }
}

impl ::protobuf::Clear for IdentifiedConnection {
    fn clear(&mut self) {
        self.id.clear();
        self.client_id.clear();
        self.versions.clear();
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
        self.counterparty.clear();
        self.delay_period = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentifiedConnection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedConnection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Counterparty {
    // message fields
    pub client_id: ::std::string::String,
    pub connection_id: ::std::string::String,
    pub prefix: ::protobuf::SingularPtrField<super::commitment::MerklePrefix>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Counterparty {
    fn default() -> &'a Counterparty {
        <Counterparty as ::protobuf::Message>::default_instance()
    }
}

impl Counterparty {
    pub fn new() -> Counterparty {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // string connection_id = 2;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }

    // .ibc.core.commitment.v1.MerklePrefix prefix = 3;


    pub fn get_prefix(&self) -> &super::commitment::MerklePrefix {
        self.prefix.as_ref().unwrap_or_else(|| <super::commitment::MerklePrefix as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: super::commitment::MerklePrefix) {
        self.prefix = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut super::commitment::MerklePrefix {
        if self.prefix.is_none() {
            self.prefix.set_default();
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> super::commitment::MerklePrefix {
        self.prefix.take().unwrap_or_else(|| super::commitment::MerklePrefix::new())
    }
}

impl ::protobuf::Message for Counterparty {
    fn is_initialized(&self) -> bool {
        for v in &self.prefix {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prefix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connection_id);
        }
        if let Some(ref v) = self.prefix.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if !self.connection_id.is_empty() {
            os.write_string(2, &self.connection_id)?;
        }
        if let Some(ref v) = self.prefix.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Counterparty {
        Counterparty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &Counterparty| { &m.client_id },
                |m: &mut Counterparty| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &Counterparty| { &m.connection_id },
                |m: &mut Counterparty| { &mut m.connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commitment::MerklePrefix>>(
                "prefix",
                |m: &Counterparty| { &m.prefix },
                |m: &mut Counterparty| { &mut m.prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Counterparty>(
                "Counterparty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Counterparty {
        static instance: ::protobuf::rt::LazyV2<Counterparty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Counterparty::new)
    }
}

impl ::protobuf::Clear for Counterparty {
    fn clear(&mut self) {
        self.client_id.clear();
        self.connection_id.clear();
        self.prefix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Counterparty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counterparty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientPaths {
    // message fields
    pub paths: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientPaths {
    fn default() -> &'a ClientPaths {
        <ClientPaths as ::protobuf::Message>::default_instance()
    }
}

impl ClientPaths {
    pub fn new() -> ClientPaths {
        ::std::default::Default::default()
    }

    // repeated string paths = 1;


    pub fn get_paths(&self) -> &[::std::string::String] {
        &self.paths
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.paths
    }

    // Take field
    pub fn take_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.paths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientPaths {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientPaths {
        ClientPaths::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "paths",
                |m: &ClientPaths| { &m.paths },
                |m: &mut ClientPaths| { &mut m.paths },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientPaths>(
                "ClientPaths",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientPaths {
        static instance: ::protobuf::rt::LazyV2<ClientPaths> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientPaths::new)
    }
}

impl ::protobuf::Clear for ClientPaths {
    fn clear(&mut self) {
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientPaths {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientPaths {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionPaths {
    // message fields
    pub client_id: ::std::string::String,
    pub paths: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionPaths {
    fn default() -> &'a ConnectionPaths {
        <ConnectionPaths as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionPaths {
    pub fn new() -> ConnectionPaths {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // repeated string paths = 2;


    pub fn get_paths(&self) -> &[::std::string::String] {
        &self.paths
    }
    pub fn clear_paths(&mut self) {
        self.paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.paths
    }

    // Take field
    pub fn take_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.paths, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ConnectionPaths {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.paths {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionPaths {
        ConnectionPaths::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &ConnectionPaths| { &m.client_id },
                |m: &mut ConnectionPaths| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "paths",
                |m: &ConnectionPaths| { &m.paths },
                |m: &mut ConnectionPaths| { &mut m.paths },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionPaths>(
                "ConnectionPaths",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionPaths {
        static instance: ::protobuf::rt::LazyV2<ConnectionPaths> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionPaths::new)
    }
}

impl ::protobuf::Clear for ConnectionPaths {
    fn clear(&mut self) {
        self.client_id.clear();
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionPaths {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionPaths {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Version {
    // message fields
    pub identifier: ::std::string::String,
    pub features: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Version {
    fn default() -> &'a Version {
        <Version as ::protobuf::Message>::default_instance()
    }
}

impl Version {
    pub fn new() -> Version {
        ::std::default::Default::default()
    }

    // string identifier = 1;


    pub fn get_identifier(&self) -> &str {
        &self.identifier
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ::std::string::String) {
        self.identifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ::std::string::String {
        &mut self.identifier
    }

    // Take field
    pub fn take_identifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.identifier, ::std::string::String::new())
    }

    // repeated string features = 2;


    pub fn get_features(&self) -> &[::std::string::String] {
        &self.features
    }
    pub fn clear_features(&mut self) {
        self.features.clear();
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.features = v;
    }

    // Mutable pointer to the field.
    pub fn mut_features(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.features
    }

    // Take field
    pub fn take_features(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.features, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Version {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.features)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.identifier.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.identifier);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.identifier.is_empty() {
            os.write_string(1, &self.identifier)?;
        }
        for v in &self.features {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Version {
        Version::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "identifier",
                |m: &Version| { &m.identifier },
                |m: &mut Version| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "features",
                |m: &Version| { &m.features },
                |m: &mut Version| { &mut m.features },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Version>(
                "Version",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Version {
        static instance: ::protobuf::rt::LazyV2<Version> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Version::new)
    }
}

impl ::protobuf::Clear for Version {
    fn clear(&mut self) {
        self.identifier.clear();
        self.features.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Version {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Version {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum State {
    STATE_UNINITIALIZED_UNSPECIFIED = 0,
    STATE_INIT = 1,
    STATE_TRYOPEN = 2,
    STATE_OPEN = 3,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::STATE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(State::STATE_INIT),
            2 => ::std::option::Option::Some(State::STATE_TRYOPEN),
            3 => ::std::option::Option::Some(State::STATE_OPEN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::STATE_UNINITIALIZED_UNSPECIFIED,
            State::STATE_INIT,
            State::STATE_TRYOPEN,
            State::STATE_OPEN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<State>("State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for State {
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::STATE_UNINITIALIZED_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'ibc/core/connection/v1/connection.proto\x12\x16ibc.core.connection.v1\
    \x1a\x14gogoproto/gogo.proto\x1a'ibc/core/commitment/v1/commitment.proto\
    \"\xc6\x02\n\rConnectionEnd\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08cli\
    entIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12;\n\x08versions\x18\x02\
    \x20\x03(\x0b2\x1f.ibc.core.connection.v1.VersionR\x08versions\x123\n\
    \x05state\x18\x03\x20\x01(\x0e2\x1d.ibc.core.connection.v1.StateR\x05sta\
    te\x12N\n\x0ccounterparty\x18\x04\x20\x01(\x0b2$.ibc.core.connection.v1.\
    CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12:\n\x0cdelay_period\
    \x18\x05\x20\x01(\x04R\x0bdelayPeriodB\x17\xf2\xde\x1f\x13yaml:\"delay_p\
    eriod\":\x04\x88\xa0\x1f\0\"\xec\x02\n\x14IdentifiedConnection\x12\x1d\n\
    \x02id\x18\x01\x20\x01(\tR\x02idB\r\xf2\xde\x1f\tyaml:\"id\"\x121\n\tcli\
    ent_id\x18\x02\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client\
    _id\"\x12;\n\x08versions\x18\x03\x20\x03(\x0b2\x1f.ibc.core.connection.v\
    1.VersionR\x08versions\x123\n\x05state\x18\x04\x20\x01(\x0e2\x1d.ibc.cor\
    e.connection.v1.StateR\x05state\x12N\n\x0ccounterparty\x18\x05\x20\x01(\
    \x0b2$.ibc.core.connection.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\
    \x1f\0\x12:\n\x0cdelay_period\x18\x06\x20\x01(\x04R\x0bdelayPeriodB\x17\
    \xf2\xde\x1f\x13yaml:\"delay_period\":\x04\x88\xa0\x1f\0\"\xca\x01\n\x0c\
    Counterparty\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\
    \xde\x1f\x10yaml:\"client_id\"\x12=\n\rconnection_id\x18\x02\x20\x01(\tR\
    \x0cconnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12B\n\x06pr\
    efix\x18\x03\x20\x01(\x0b2$.ibc.core.commitment.v1.MerklePrefixR\x06pref\
    ixB\x04\xc8\xde\x1f\0:\x04\x88\xa0\x1f\0\"#\n\x0bClientPaths\x12\x14\n\
    \x05paths\x18\x01\x20\x03(\tR\x05paths\"Z\n\x0fConnectionPaths\x121\n\tc\
    lient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"clie\
    nt_id\"\x12\x14\n\x05paths\x18\x02\x20\x03(\tR\x05paths\"K\n\x07Version\
    \x12\x1e\n\nidentifier\x18\x01\x20\x01(\tR\nidentifier\x12\x1a\n\x08feat\
    ures\x18\x02\x20\x03(\tR\x08features:\x04\x88\xa0\x1f\0*\x99\x01\n\x05St\
    ate\x126\n\x1fSTATE_UNINITIALIZED_UNSPECIFIED\x10\0\x1a\x11\x8a\x9d\x20\
    \rUNINITIALIZED\x12\x18\n\nSTATE_INIT\x10\x01\x1a\x08\x8a\x9d\x20\x04INI\
    T\x12\x1e\n\rSTATE_TRYOPEN\x10\x02\x1a\x0b\x8a\x9d\x20\x07TRYOPEN\x12\
    \x18\n\nSTATE_OPEN\x10\x03\x1a\x08\x8a\x9d\x20\x04OPEN\x1a\x04\x88\xa3\
    \x1e\0B=Z;github.com/cosmos/cosmos-sdk/x/ibc/core/03-connection/typesJ\
    \xe4#\n\x06\x12\x04\0\0g\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\x08\x1e\n\x08\n\x01\x08\x12\x03\x03\0R\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0R\n\t\n\x02\x03\0\x12\x03\x05\x07\x1d\n\t\n\x02\x03\
    \x01\x12\x03\x06\x070\n\xd9\x02\n\x02\x04\0\x12\x04\x0f\0\x1d\x01\x1a\
    \xba\x01\x20ConnectionEnd\x20defines\x20a\x20stateful\x20object\x20on\
    \x20a\x20chain\x20connected\x20to\x20another\n\x20separate\x20one.\n\x20\
    NOTE:\x20there\x20must\x20only\x20be\x202\x20defined\x20ConnectionEnds\
    \x20to\x20establish\n\x20a\x20connection\x20between\x20two\x20chains.\n2\
    \x8f\x01\x20ICS03\x20-\x20Connection\x20Data\x20Structures\x20as\x20defi\
    ned\x20in\n\x20https://github.com/cosmos/ics/tree/master/spec/ics-003-co\
    nnection-semantics#data-structures\n\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\
    \x15\n\n\n\x03\x04\0\x07\x12\x03\x10\x02-\n\r\n\x06\x04\0\x07\x81\xf4\
    \x03\x12\x03\x10\x02-\n6\n\x04\x04\0\x02\0\x12\x03\x12\x02E\x1a)\x20clie\
    nt\x20associated\x20with\x20this\x20connection.\n\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x12\x02\x10-\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x12\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\t\x12\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x12\x15\x16\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x12\x17D\
    \n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x12\x18C\n\x88\x01\n\
    \x04\x04\0\x02\x01\x12\x03\x15\x02\x20\x1a{\x20IBC\x20version\x20which\
    \x20can\x20be\x20utilised\x20to\x20determine\x20encodings\x20or\x20proto\
    cols\x20for\n\x20channels\x20or\x20packets\x20utilising\x20this\x20conne\
    ction.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x15\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x15\x13\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x1e\x1f\n3\n\x04\
    \x04\0\x02\x02\x12\x03\x17\x02\x12\x1a&\x20current\x20state\x20of\x20the\
    \x20connection\x20end.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x17\x02\x15\
    \x20\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x17\x08\r\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17\
    \x10\x11\nB\n\x04\x04\0\x02\x03\x12\x03\x19\x02?\x1a5\x20counterparty\
    \x20chain\x20associated\x20with\x20this\x20connection.\n\n\r\n\x05\x04\0\
    \x02\x03\x04\x12\x04\x19\x02\x17\x12\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\x19\x02\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x19\x0f\x1b\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x19\x1e\x1f\n\x0c\n\x05\x04\0\x02\x03\
    \x08\x12\x03\x19\x20>\n\x0f\n\x08\x04\0\x02\x03\x08\xe9\xfb\x03\x12\x03\
    \x19!=\n\xa7\x01\n\x04\x04\0\x02\x04\x12\x03\x1c\x02K\x1a\x99\x01\x20del\
    ay\x20period\x20that\x20must\x20pass\x20before\x20a\x20consensus\x20stat\
    e\x20can\x20be\x20used\x20for\x20packet-verification\n\x20NOTE:\x20delay\
    \x20period\x20logic\x20is\x20only\x20implemented\x20by\x20some\x20client\
    s.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x1c\x02\x19?\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x1c\t\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1c\x18\x19\n\x0c\n\x05\
    \x04\0\x02\x04\x08\x12\x03\x1c\x1aJ\n\x0f\n\x08\x04\0\x02\x04\x08\xee\
    \xfb\x03\x12\x03\x1c\x1bI\ne\n\x02\x04\x01\x12\x04!\00\x01\x1aY\x20Ident\
    ifiedConnection\x20defines\x20a\x20connection\x20with\x20additional\x20c\
    onnection\n\x20identifier\x20field.\n\n\n\n\x03\x04\x01\x01\x12\x03!\x08\
    \x1c\n\n\n\x03\x04\x01\x07\x12\x03\"\x02-\n\r\n\x06\x04\x01\x07\x81\xf4\
    \x03\x12\x03\"\x02-\n%\n\x04\x04\x01\x02\0\x12\x03$\x027\x1a\x18\x20conn\
    ection\x20identifier.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04$\x02\"-\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03$\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03$\x0e\x0f\n\x0c\
    \n\x05\x04\x01\x02\0\x08\x12\x03$\x106\n\x0f\n\x08\x04\x01\x02\0\x08\xee\
    \xfb\x03\x12\x03$\x115\n6\n\x04\x04\x01\x02\x01\x12\x03&\x02E\x1a)\x20cl\
    ient\x20associated\x20with\x20this\x20connection.\n\n\r\n\x05\x04\x01\
    \x02\x01\x04\x12\x04&\x02$7\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03&\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03&\t\x12\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03&\x15\x16\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03&\
    \x17D\n\x0f\n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03&\x18C\n\x87\
    \x01\n\x04\x04\x01\x02\x02\x12\x03)\x02\x20\x1az\x20IBC\x20version\x20wh\
    ich\x20can\x20be\x20utilised\x20to\x20determine\x20encodings\x20or\x20pr\
    otocols\x20for\n\x20channels\x20or\x20packets\x20utilising\x20this\x20co\
    nnection\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03)\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x06\x12\x03)\x0b\x12\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03)\x13\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03)\x1e\x1f\n3\n\
    \x04\x04\x01\x02\x03\x12\x03+\x02\x12\x1a&\x20current\x20state\x20of\x20\
    the\x20connection\x20end.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04+\x02)\
    \x20\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03+\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03+\x08\r\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03+\
    \x10\x11\nB\n\x04\x04\x01\x02\x04\x12\x03-\x02?\x1a5\x20counterparty\x20\
    chain\x20associated\x20with\x20this\x20connection.\n\n\r\n\x05\x04\x01\
    \x02\x04\x04\x12\x04-\x02+\x12\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03-\
    \x02\x0e\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03-\x0f\x1b\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03-\x1e\x1f\n\x0c\n\x05\x04\x01\x02\x04\x08\
    \x12\x03-\x20>\n\x0f\n\x08\x04\x01\x02\x04\x08\xe9\xfb\x03\x12\x03-!=\n<\
    \n\x04\x04\x01\x02\x05\x12\x03/\x02K\x1a/\x20delay\x20period\x20associat\
    ed\x20with\x20this\x20connection.\n\n\r\n\x05\x04\x01\x02\x05\x04\x12\
    \x04/\x02-?\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03/\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x05\x01\x12\x03/\t\x15\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\
    \x03/\x18\x19\n\x0c\n\x05\x04\x01\x02\x05\x08\x12\x03/\x1aJ\n\x0f\n\x08\
    \x04\x01\x02\x05\x08\xee\xfb\x03\x12\x03/\x1bI\nu\n\x02\x05\0\x12\x044\0\
    @\x01\x1ai\x20State\x20defines\x20if\x20a\x20connection\x20is\x20in\x20o\
    ne\x20of\x20the\x20following\x20states:\n\x20INIT,\x20TRYOPEN,\x20OPEN\
    \x20or\x20UNINITIALIZED.\n\n\n\n\x03\x05\0\x01\x12\x034\x05\n\n\n\n\x03\
    \x05\0\x03\x12\x035\x021\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x035\x021\n\
    \x1c\n\x04\x05\0\x02\0\x12\x038\x02[\x1a\x0f\x20Default\x20State\n\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x038\x02!\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    8$%\n\x0c\n\x05\x05\0\x02\0\x03\x12\x038&Z\n\x0f\n\x08\x05\0\x02\0\x03\
    \xd1\x83\x04\x12\x038'Y\nG\n\x04\x05\0\x02\x01\x12\x03:\x02=\x1a:\x20A\
    \x20connection\x20end\x20has\x20just\x20started\x20the\x20opening\x20han\
    dshake.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03:\x02\x0c\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03:\x0f\x10\n\x0c\n\x05\x05\0\x02\x01\x03\x12\x03:\
    \x11<\n\x0f\n\x08\x05\0\x02\x01\x03\xd1\x83\x04\x12\x03:\x12;\n_\n\x04\
    \x05\0\x02\x02\x12\x03=\x02C\x1aR\x20A\x20connection\x20end\x20has\x20ac\
    knowledged\x20the\x20handshake\x20step\x20on\x20the\x20counterparty\n\
    \x20chain.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03=\x02\x0f\n\x0c\n\x05\
    \x05\0\x02\x02\x02\x12\x03=\x12\x13\n\x0c\n\x05\x05\0\x02\x02\x03\x12\
    \x03=\x14B\n\x0f\n\x08\x05\0\x02\x02\x03\xd1\x83\x04\x12\x03=\x15A\n<\n\
    \x04\x05\0\x02\x03\x12\x03?\x02=\x1a/\x20A\x20connection\x20end\x20has\
    \x20completed\x20the\x20handshake.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03?\x02\x0c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03?\x0f\x10\n\x0c\n\x05\
    \x05\0\x02\x03\x03\x12\x03?\x11<\n\x0f\n\x08\x05\0\x02\x03\x03\xd1\x83\
    \x04\x12\x03?\x12;\n[\n\x02\x04\x02\x12\x04C\0N\x01\x1aO\x20Counterparty\
    \x20defines\x20the\x20counterparty\x20chain\x20associated\x20with\x20a\
    \x20connection\x20end.\n\n\n\n\x03\x04\x02\x01\x12\x03C\x08\x14\n\n\n\
    \x03\x04\x02\x07\x12\x03D\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03\
    D\x02-\nc\n\x04\x04\x02\x02\0\x12\x03H\x02E\x1aV\x20identifies\x20the\
    \x20client\x20on\x20the\x20counterparty\x20chain\x20associated\x20with\
    \x20a\x20given\n\x20connection.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04H\
    \x02D-\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03H\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03H\x15\
    \x16\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03H\x17D\n\x0f\n\x08\x04\x02\x02\
    \0\x08\xee\xfb\x03\x12\x03H\x18C\nk\n\x04\x04\x02\x02\x01\x12\x03K\x02M\
    \x1a^\x20identifies\x20the\x20connection\x20end\x20on\x20the\x20counterp\
    arty\x20chain\x20associated\x20with\x20a\n\x20given\x20connection.\n\n\r\
    \n\x05\x04\x02\x02\x01\x04\x12\x04K\x02HE\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03K\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03K\t\x16\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03K\x19\x1a\n\x0c\n\x05\x04\x02\x02\
    \x01\x08\x12\x03K\x1bL\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\
    \x03K\x1cK\nB\n\x04\x04\x02\x02\x02\x12\x03M\x02P\x1a5\x20commitment\x20\
    merkle\x20prefix\x20of\x20the\x20counterparty\x20chain.\n\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04M\x02KM\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03M\
    \x02%\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03M&,\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03M/0\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03M1O\n\x0f\n\
    \x08\x04\x02\x02\x02\x08\xe9\xfb\x03\x12\x03M2N\nM\n\x02\x04\x03\x12\x04\
    Q\0T\x01\x1aA\x20ClientPaths\x20define\x20all\x20the\x20connection\x20pa\
    ths\x20for\x20a\x20client\x20state.\n\n\n\n\x03\x04\x03\x01\x12\x03Q\x08\
    \x13\n'\n\x04\x04\x03\x02\0\x12\x03S\x02\x1c\x1a\x1a\x20list\x20of\x20co\
    nnection\x20paths\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03S\x02\n\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03S\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03S\x12\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03S\x1a\x1b\nW\n\
    \x02\x04\x04\x12\x04W\0\\\x01\x1aK\x20ConnectionPaths\x20define\x20all\
    \x20the\x20connection\x20paths\x20for\x20a\x20given\x20client\x20state.\
    \n\n\n\n\x03\x04\x04\x01\x12\x03W\x08\x17\n-\n\x04\x04\x04\x02\0\x12\x03\
    Y\x02E\x1a\x20\x20client\x20state\x20unique\x20identifier\n\n\r\n\x05\
    \x04\x04\x02\0\x04\x12\x04Y\x02W\x19\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03Y\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03Y\t\x12\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03Y\x15\x16\n\x0c\n\x05\x04\x04\x02\0\x08\x12\
    \x03Y\x17D\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03Y\x18C\n'\n\
    \x04\x04\x04\x02\x01\x12\x03[\x02\x1c\x1a\x1a\x20list\x20of\x20connectio\
    n\x20paths\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03[\x02\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x05\x12\x03[\x0b\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03[\x12\x17\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03[\x1a\x1b\ns\n\
    \x02\x04\x05\x12\x04`\0g\x01\x1ag\x20Version\x20defines\x20the\x20versio\
    ning\x20scheme\x20used\x20to\x20negotiate\x20the\x20IBC\x20verison\x20in\
    \n\x20the\x20connection\x20handshake.\n\n\n\n\x03\x04\x05\x01\x12\x03`\
    \x08\x0f\n\n\n\x03\x04\x05\x07\x12\x03a\x02-\n\r\n\x06\x04\x05\x07\x81\
    \xf4\x03\x12\x03a\x02-\n(\n\x04\x04\x05\x02\0\x12\x03d\x02\x18\x1a\x1b\
    \x20unique\x20version\x20identifier\n\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04d\x02a-\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03d\x02\x08\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x03d\t\x13\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03d\
    \x16\x17\nH\n\x04\x04\x05\x02\x01\x12\x03f\x02\x1f\x1a;\x20list\x20of\
    \x20features\x20compatible\x20with\x20the\x20specified\x20identifier\n\n\
    \x0c\n\x05\x04\x05\x02\x01\x04\x12\x03f\x02\n\n\x0c\n\x05\x04\x05\x02\
    \x01\x05\x12\x03f\x0b\x11\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03f\x12\
    \x1a\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03f\x1d\x1eb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
