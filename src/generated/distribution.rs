// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/distribution/v1beta1/distribution.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub community_tax: ::std::string::String,
    pub base_proposer_reward: ::std::string::String,
    pub bonus_proposer_reward: ::std::string::String,
    pub withdraw_addr_enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // string community_tax = 1;


    pub fn get_community_tax(&self) -> &str {
        &self.community_tax
    }
    pub fn clear_community_tax(&mut self) {
        self.community_tax.clear();
    }

    // Param is passed by value, moved
    pub fn set_community_tax(&mut self, v: ::std::string::String) {
        self.community_tax = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_community_tax(&mut self) -> &mut ::std::string::String {
        &mut self.community_tax
    }

    // Take field
    pub fn take_community_tax(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.community_tax, ::std::string::String::new())
    }

    // string base_proposer_reward = 2;


    pub fn get_base_proposer_reward(&self) -> &str {
        &self.base_proposer_reward
    }
    pub fn clear_base_proposer_reward(&mut self) {
        self.base_proposer_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_proposer_reward(&mut self, v: ::std::string::String) {
        self.base_proposer_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_proposer_reward(&mut self) -> &mut ::std::string::String {
        &mut self.base_proposer_reward
    }

    // Take field
    pub fn take_base_proposer_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_proposer_reward, ::std::string::String::new())
    }

    // string bonus_proposer_reward = 3;


    pub fn get_bonus_proposer_reward(&self) -> &str {
        &self.bonus_proposer_reward
    }
    pub fn clear_bonus_proposer_reward(&mut self) {
        self.bonus_proposer_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_bonus_proposer_reward(&mut self, v: ::std::string::String) {
        self.bonus_proposer_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bonus_proposer_reward(&mut self) -> &mut ::std::string::String {
        &mut self.bonus_proposer_reward
    }

    // Take field
    pub fn take_bonus_proposer_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bonus_proposer_reward, ::std::string::String::new())
    }

    // bool withdraw_addr_enabled = 4;


    pub fn get_withdraw_addr_enabled(&self) -> bool {
        self.withdraw_addr_enabled
    }
    pub fn clear_withdraw_addr_enabled(&mut self) {
        self.withdraw_addr_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_withdraw_addr_enabled(&mut self, v: bool) {
        self.withdraw_addr_enabled = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.community_tax)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_proposer_reward)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bonus_proposer_reward)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.withdraw_addr_enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.community_tax.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.community_tax);
        }
        if !self.base_proposer_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_proposer_reward);
        }
        if !self.bonus_proposer_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bonus_proposer_reward);
        }
        if self.withdraw_addr_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.community_tax.is_empty() {
            os.write_string(1, &self.community_tax)?;
        }
        if !self.base_proposer_reward.is_empty() {
            os.write_string(2, &self.base_proposer_reward)?;
        }
        if !self.bonus_proposer_reward.is_empty() {
            os.write_string(3, &self.bonus_proposer_reward)?;
        }
        if self.withdraw_addr_enabled != false {
            os.write_bool(4, self.withdraw_addr_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "community_tax",
                |m: &Params| { &m.community_tax },
                |m: &mut Params| { &mut m.community_tax },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_proposer_reward",
                |m: &Params| { &m.base_proposer_reward },
                |m: &mut Params| { &mut m.base_proposer_reward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bonus_proposer_reward",
                |m: &Params| { &m.bonus_proposer_reward },
                |m: &mut Params| { &mut m.bonus_proposer_reward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "withdraw_addr_enabled",
                |m: &Params| { &m.withdraw_addr_enabled },
                |m: &mut Params| { &mut m.withdraw_addr_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.community_tax.clear();
        self.base_proposer_reward.clear();
        self.bonus_proposer_reward.clear();
        self.withdraw_addr_enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorHistoricalRewards {
    // message fields
    pub cumulative_reward_ratio: ::protobuf::RepeatedField<super::coin::DecCoin>,
    pub reference_count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorHistoricalRewards {
    fn default() -> &'a ValidatorHistoricalRewards {
        <ValidatorHistoricalRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorHistoricalRewards {
    pub fn new() -> ValidatorHistoricalRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1;


    pub fn get_cumulative_reward_ratio(&self) -> &[super::coin::DecCoin] {
        &self.cumulative_reward_ratio
    }
    pub fn clear_cumulative_reward_ratio(&mut self) {
        self.cumulative_reward_ratio.clear();
    }

    // Param is passed by value, moved
    pub fn set_cumulative_reward_ratio(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.cumulative_reward_ratio = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cumulative_reward_ratio(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.cumulative_reward_ratio
    }

    // Take field
    pub fn take_cumulative_reward_ratio(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.cumulative_reward_ratio, ::protobuf::RepeatedField::new())
    }

    // uint32 reference_count = 2;


    pub fn get_reference_count(&self) -> u32 {
        self.reference_count
    }
    pub fn clear_reference_count(&mut self) {
        self.reference_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_reference_count(&mut self, v: u32) {
        self.reference_count = v;
    }
}

impl ::protobuf::Message for ValidatorHistoricalRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.cumulative_reward_ratio {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cumulative_reward_ratio)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.reference_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cumulative_reward_ratio {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.reference_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.reference_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cumulative_reward_ratio {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.reference_count != 0 {
            os.write_uint32(2, self.reference_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorHistoricalRewards {
        ValidatorHistoricalRewards::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "cumulative_reward_ratio",
                |m: &ValidatorHistoricalRewards| { &m.cumulative_reward_ratio },
                |m: &mut ValidatorHistoricalRewards| { &mut m.cumulative_reward_ratio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "reference_count",
                |m: &ValidatorHistoricalRewards| { &m.reference_count },
                |m: &mut ValidatorHistoricalRewards| { &mut m.reference_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorHistoricalRewards>(
                "ValidatorHistoricalRewards",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorHistoricalRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorHistoricalRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorHistoricalRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorHistoricalRewards {
    fn clear(&mut self) {
        self.cumulative_reward_ratio.clear();
        self.reference_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorHistoricalRewards {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorHistoricalRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorCurrentRewards {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    pub period: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorCurrentRewards {
    fn default() -> &'a ValidatorCurrentRewards {
        <ValidatorCurrentRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorCurrentRewards {
    pub fn new() -> ValidatorCurrentRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin rewards = 1;


    pub fn get_rewards(&self) -> &[super::coin::DecCoin] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }

    // uint64 period = 2;


    pub fn get_period(&self) -> u64 {
        self.period
    }
    pub fn clear_period(&mut self) {
        self.period = 0;
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: u64) {
        self.period = v;
    }
}

impl ::protobuf::Message for ValidatorCurrentRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.period = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.period != 0 {
            my_size += ::protobuf::rt::value_size(2, self.period, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.period != 0 {
            os.write_uint64(2, self.period)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorCurrentRewards {
        ValidatorCurrentRewards::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "rewards",
                |m: &ValidatorCurrentRewards| { &m.rewards },
                |m: &mut ValidatorCurrentRewards| { &mut m.rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "period",
                |m: &ValidatorCurrentRewards| { &m.period },
                |m: &mut ValidatorCurrentRewards| { &mut m.period },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorCurrentRewards>(
                "ValidatorCurrentRewards",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorCurrentRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorCurrentRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorCurrentRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorCurrentRewards {
    fn clear(&mut self) {
        self.rewards.clear();
        self.period = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorCurrentRewards {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorCurrentRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorAccumulatedCommission {
    // message fields
    pub commission: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorAccumulatedCommission {
    fn default() -> &'a ValidatorAccumulatedCommission {
        <ValidatorAccumulatedCommission as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorAccumulatedCommission {
    pub fn new() -> ValidatorAccumulatedCommission {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin commission = 1;


    pub fn get_commission(&self) -> &[super::coin::DecCoin] {
        &self.commission
    }
    pub fn clear_commission(&mut self) {
        self.commission.clear();
    }

    // Param is passed by value, moved
    pub fn set_commission(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.commission = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commission(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.commission
    }

    // Take field
    pub fn take_commission(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.commission, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorAccumulatedCommission {
    fn is_initialized(&self) -> bool {
        for v in &self.commission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.commission)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.commission {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.commission {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorAccumulatedCommission {
        ValidatorAccumulatedCommission::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "commission",
                |m: &ValidatorAccumulatedCommission| { &m.commission },
                |m: &mut ValidatorAccumulatedCommission| { &mut m.commission },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorAccumulatedCommission>(
                "ValidatorAccumulatedCommission",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorAccumulatedCommission {
        static instance: ::protobuf::rt::LazyV2<ValidatorAccumulatedCommission> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorAccumulatedCommission::new)
    }
}

impl ::protobuf::Clear for ValidatorAccumulatedCommission {
    fn clear(&mut self) {
        self.commission.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorAccumulatedCommission {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorAccumulatedCommission {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorOutstandingRewards {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorOutstandingRewards {
    fn default() -> &'a ValidatorOutstandingRewards {
        <ValidatorOutstandingRewards as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorOutstandingRewards {
    pub fn new() -> ValidatorOutstandingRewards {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin rewards = 1;


    pub fn get_rewards(&self) -> &[super::coin::DecCoin] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorOutstandingRewards {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorOutstandingRewards {
        ValidatorOutstandingRewards::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "rewards",
                |m: &ValidatorOutstandingRewards| { &m.rewards },
                |m: &mut ValidatorOutstandingRewards| { &mut m.rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorOutstandingRewards>(
                "ValidatorOutstandingRewards",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorOutstandingRewards {
        static instance: ::protobuf::rt::LazyV2<ValidatorOutstandingRewards> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorOutstandingRewards::new)
    }
}

impl ::protobuf::Clear for ValidatorOutstandingRewards {
    fn clear(&mut self) {
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorOutstandingRewards {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorOutstandingRewards {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorSlashEvent {
    // message fields
    pub validator_period: u64,
    pub fraction: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEvent {
    fn default() -> &'a ValidatorSlashEvent {
        <ValidatorSlashEvent as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEvent {
    pub fn new() -> ValidatorSlashEvent {
        ::std::default::Default::default()
    }

    // uint64 validator_period = 1;


    pub fn get_validator_period(&self) -> u64 {
        self.validator_period
    }
    pub fn clear_validator_period(&mut self) {
        self.validator_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator_period(&mut self, v: u64) {
        self.validator_period = v;
    }

    // string fraction = 2;


    pub fn get_fraction(&self) -> &str {
        &self.fraction
    }
    pub fn clear_fraction(&mut self) {
        self.fraction.clear();
    }

    // Param is passed by value, moved
    pub fn set_fraction(&mut self, v: ::std::string::String) {
        self.fraction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fraction(&mut self) -> &mut ::std::string::String {
        &mut self.fraction
    }

    // Take field
    pub fn take_fraction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fraction, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ValidatorSlashEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.validator_period = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fraction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.validator_period != 0 {
            my_size += ::protobuf::rt::value_size(1, self.validator_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.fraction.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.fraction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.validator_period != 0 {
            os.write_uint64(1, self.validator_period)?;
        }
        if !self.fraction.is_empty() {
            os.write_string(2, &self.fraction)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSlashEvent {
        ValidatorSlashEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "validator_period",
                |m: &ValidatorSlashEvent| { &m.validator_period },
                |m: &mut ValidatorSlashEvent| { &mut m.validator_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fraction",
                |m: &ValidatorSlashEvent| { &m.fraction },
                |m: &mut ValidatorSlashEvent| { &mut m.fraction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorSlashEvent>(
                "ValidatorSlashEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorSlashEvent {
        static instance: ::protobuf::rt::LazyV2<ValidatorSlashEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSlashEvent::new)
    }
}

impl ::protobuf::Clear for ValidatorSlashEvent {
    fn clear(&mut self) {
        self.validator_period = 0;
        self.fraction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorSlashEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorSlashEvents {
    // message fields
    pub validator_slash_events: ::protobuf::RepeatedField<ValidatorSlashEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEvents {
    fn default() -> &'a ValidatorSlashEvents {
        <ValidatorSlashEvents as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEvents {
    pub fn new() -> ValidatorSlashEvents {
        ::std::default::Default::default()
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1;


    pub fn get_validator_slash_events(&self) -> &[ValidatorSlashEvent] {
        &self.validator_slash_events
    }
    pub fn clear_validator_slash_events(&mut self) {
        self.validator_slash_events.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_slash_events(&mut self, v: ::protobuf::RepeatedField<ValidatorSlashEvent>) {
        self.validator_slash_events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_slash_events(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorSlashEvent> {
        &mut self.validator_slash_events
    }

    // Take field
    pub fn take_validator_slash_events(&mut self) -> ::protobuf::RepeatedField<ValidatorSlashEvent> {
        ::std::mem::replace(&mut self.validator_slash_events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorSlashEvents {
    fn is_initialized(&self) -> bool {
        for v in &self.validator_slash_events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_slash_events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.validator_slash_events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.validator_slash_events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSlashEvents {
        ValidatorSlashEvents::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorSlashEvent>>(
                "validator_slash_events",
                |m: &ValidatorSlashEvents| { &m.validator_slash_events },
                |m: &mut ValidatorSlashEvents| { &mut m.validator_slash_events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorSlashEvents>(
                "ValidatorSlashEvents",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorSlashEvents {
        static instance: ::protobuf::rt::LazyV2<ValidatorSlashEvents> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSlashEvents::new)
    }
}

impl ::protobuf::Clear for ValidatorSlashEvents {
    fn clear(&mut self) {
        self.validator_slash_events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorSlashEvents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEvents {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeePool {
    // message fields
    pub community_pool: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeePool {
    fn default() -> &'a FeePool {
        <FeePool as ::protobuf::Message>::default_instance()
    }
}

impl FeePool {
    pub fn new() -> FeePool {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1;


    pub fn get_community_pool(&self) -> &[super::coin::DecCoin] {
        &self.community_pool
    }
    pub fn clear_community_pool(&mut self) {
        self.community_pool.clear();
    }

    // Param is passed by value, moved
    pub fn set_community_pool(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.community_pool = v;
    }

    // Mutable pointer to the field.
    pub fn mut_community_pool(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.community_pool
    }

    // Take field
    pub fn take_community_pool(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.community_pool, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeePool {
    fn is_initialized(&self) -> bool {
        for v in &self.community_pool {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.community_pool)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.community_pool {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.community_pool {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeePool {
        FeePool::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "community_pool",
                |m: &FeePool| { &m.community_pool },
                |m: &mut FeePool| { &mut m.community_pool },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeePool>(
                "FeePool",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeePool {
        static instance: ::protobuf::rt::LazyV2<FeePool> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeePool::new)
    }
}

impl ::protobuf::Clear for FeePool {
    fn clear(&mut self) {
        self.community_pool.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeePool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeePool {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommunityPoolSpendProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub recipient: ::std::string::String,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommunityPoolSpendProposal {
    fn default() -> &'a CommunityPoolSpendProposal {
        <CommunityPoolSpendProposal as ::protobuf::Message>::default_instance()
    }
}

impl CommunityPoolSpendProposal {
    pub fn new() -> CommunityPoolSpendProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string recipient = 3;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 4;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CommunityPoolSpendProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.recipient);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(3, &self.recipient)?;
        }
        for v in &self.amount {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommunityPoolSpendProposal {
        CommunityPoolSpendProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &CommunityPoolSpendProposal| { &m.title },
                |m: &mut CommunityPoolSpendProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &CommunityPoolSpendProposal| { &m.description },
                |m: &mut CommunityPoolSpendProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient",
                |m: &CommunityPoolSpendProposal| { &m.recipient },
                |m: &mut CommunityPoolSpendProposal| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &CommunityPoolSpendProposal| { &m.amount },
                |m: &mut CommunityPoolSpendProposal| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommunityPoolSpendProposal>(
                "CommunityPoolSpendProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommunityPoolSpendProposal {
        static instance: ::protobuf::rt::LazyV2<CommunityPoolSpendProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommunityPoolSpendProposal::new)
    }
}

impl ::protobuf::Clear for CommunityPoolSpendProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.recipient.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommunityPoolSpendProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommunityPoolSpendProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DelegatorStartingInfo {
    // message fields
    pub previous_period: u64,
    pub stake: ::std::string::String,
    pub height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegatorStartingInfo {
    fn default() -> &'a DelegatorStartingInfo {
        <DelegatorStartingInfo as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorStartingInfo {
    pub fn new() -> DelegatorStartingInfo {
        ::std::default::Default::default()
    }

    // uint64 previous_period = 1;


    pub fn get_previous_period(&self) -> u64 {
        self.previous_period
    }
    pub fn clear_previous_period(&mut self) {
        self.previous_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_period(&mut self, v: u64) {
        self.previous_period = v;
    }

    // string stake = 2;


    pub fn get_stake(&self) -> &str {
        &self.stake
    }
    pub fn clear_stake(&mut self) {
        self.stake.clear();
    }

    // Param is passed by value, moved
    pub fn set_stake(&mut self, v: ::std::string::String) {
        self.stake = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stake(&mut self) -> &mut ::std::string::String {
        &mut self.stake
    }

    // Take field
    pub fn take_stake(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stake, ::std::string::String::new())
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }
}

impl ::protobuf::Message for DelegatorStartingInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.previous_period = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stake)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.previous_period != 0 {
            my_size += ::protobuf::rt::value_size(1, self.previous_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.stake.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stake);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.previous_period != 0 {
            os.write_uint64(1, self.previous_period)?;
        }
        if !self.stake.is_empty() {
            os.write_string(2, &self.stake)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegatorStartingInfo {
        DelegatorStartingInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "previous_period",
                |m: &DelegatorStartingInfo| { &m.previous_period },
                |m: &mut DelegatorStartingInfo| { &mut m.previous_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stake",
                |m: &DelegatorStartingInfo| { &m.stake },
                |m: &mut DelegatorStartingInfo| { &mut m.stake },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &DelegatorStartingInfo| { &m.height },
                |m: &mut DelegatorStartingInfo| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DelegatorStartingInfo>(
                "DelegatorStartingInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DelegatorStartingInfo {
        static instance: ::protobuf::rt::LazyV2<DelegatorStartingInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegatorStartingInfo::new)
    }
}

impl ::protobuf::Clear for DelegatorStartingInfo {
    fn clear(&mut self) {
        self.previous_period = 0;
        self.stake.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelegatorStartingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorStartingInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DelegationDelegatorReward {
    // message fields
    pub validator_address: ::std::string::String,
    pub reward: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegationDelegatorReward {
    fn default() -> &'a DelegationDelegatorReward {
        <DelegationDelegatorReward as ::protobuf::Message>::default_instance()
    }
}

impl DelegationDelegatorReward {
    pub fn new() -> DelegationDelegatorReward {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.DecCoin reward = 2;


    pub fn get_reward(&self) -> &[super::coin::DecCoin] {
        &self.reward
    }
    pub fn clear_reward(&mut self) {
        self.reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.reward = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reward(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.reward
    }

    // Take field
    pub fn take_reward(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.reward, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DelegationDelegatorReward {
    fn is_initialized(&self) -> bool {
        for v in &self.reward {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.reward)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        for value in &self.reward {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        for v in &self.reward {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegationDelegatorReward {
        DelegationDelegatorReward::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &DelegationDelegatorReward| { &m.validator_address },
                |m: &mut DelegationDelegatorReward| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "reward",
                |m: &DelegationDelegatorReward| { &m.reward },
                |m: &mut DelegationDelegatorReward| { &mut m.reward },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DelegationDelegatorReward>(
                "DelegationDelegatorReward",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DelegationDelegatorReward {
        static instance: ::protobuf::rt::LazyV2<DelegationDelegatorReward> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegationDelegatorReward::new)
    }
}

impl ::protobuf::Clear for DelegationDelegatorReward {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.reward.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelegationDelegatorReward {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegationDelegatorReward {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommunityPoolSpendProposalWithDeposit {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub recipient: ::std::string::String,
    pub amount: ::std::string::String,
    pub deposit: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommunityPoolSpendProposalWithDeposit {
    fn default() -> &'a CommunityPoolSpendProposalWithDeposit {
        <CommunityPoolSpendProposalWithDeposit as ::protobuf::Message>::default_instance()
    }
}

impl CommunityPoolSpendProposalWithDeposit {
    pub fn new() -> CommunityPoolSpendProposalWithDeposit {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string recipient = 3;


    pub fn get_recipient(&self) -> &str {
        &self.recipient
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: ::std::string::String) {
        self.recipient = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut ::std::string::String {
        &mut self.recipient
    }

    // Take field
    pub fn take_recipient(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recipient, ::std::string::String::new())
    }

    // string amount = 4;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string deposit = 5;


    pub fn get_deposit(&self) -> &str {
        &self.deposit
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: ::std::string::String) {
        self.deposit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut ::std::string::String {
        &mut self.deposit
    }

    // Take field
    pub fn take_deposit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommunityPoolSpendProposalWithDeposit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recipient)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.recipient);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.amount);
        }
        if !self.deposit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.deposit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.recipient.is_empty() {
            os.write_string(3, &self.recipient)?;
        }
        if !self.amount.is_empty() {
            os.write_string(4, &self.amount)?;
        }
        if !self.deposit.is_empty() {
            os.write_string(5, &self.deposit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommunityPoolSpendProposalWithDeposit {
        CommunityPoolSpendProposalWithDeposit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &CommunityPoolSpendProposalWithDeposit| { &m.title },
                |m: &mut CommunityPoolSpendProposalWithDeposit| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &CommunityPoolSpendProposalWithDeposit| { &m.description },
                |m: &mut CommunityPoolSpendProposalWithDeposit| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient",
                |m: &CommunityPoolSpendProposalWithDeposit| { &m.recipient },
                |m: &mut CommunityPoolSpendProposalWithDeposit| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &CommunityPoolSpendProposalWithDeposit| { &m.amount },
                |m: &mut CommunityPoolSpendProposalWithDeposit| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deposit",
                |m: &CommunityPoolSpendProposalWithDeposit| { &m.deposit },
                |m: &mut CommunityPoolSpendProposalWithDeposit| { &mut m.deposit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommunityPoolSpendProposalWithDeposit>(
                "CommunityPoolSpendProposalWithDeposit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommunityPoolSpendProposalWithDeposit {
        static instance: ::protobuf::rt::LazyV2<CommunityPoolSpendProposalWithDeposit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommunityPoolSpendProposalWithDeposit::new)
    }
}

impl ::protobuf::Clear for CommunityPoolSpendProposalWithDeposit {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.recipient.clear();
        self.amount.clear();
        self.deposit.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommunityPoolSpendProposalWithDeposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommunityPoolSpendProposalWithDeposit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.cosmos/distribution/v1beta1/distribution.proto\x12\x1bcosmos.distribu\
    tion.v1beta1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin\
    .proto\"\xd7\x03\n\x06Params\x12k\n\rcommunity_tax\x18\x01\x20\x01(\tR\
    \x0ccommunityTaxBF\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\
    \xc8\xde\x1f\0\xf2\xde\x1f\x14yaml:\"community_tax\"\x12\x7f\n\x14base_p\
    roposer_reward\x18\x02\x20\x01(\tR\x12baseProposerRewardBM\xda\xde\x1f&g\
    ithub.com/cosmos/cosmos-sdk/types.Dec\xf2\xde\x1f\x1byaml:\"base_propose\
    r_reward\"\xc8\xde\x1f\0\x12\x82\x01\n\x15bonus_proposer_reward\x18\x03\
    \x20\x01(\tR\x13bonusProposerRewardBN\xda\xde\x1f&github.com/cosmos/cosm\
    os-sdk/types.Dec\xc8\xde\x1f\0\xf2\xde\x1f\x1cyaml:\"bonus_proposer_rewa\
    rd\"\x12T\n\x15withdraw_addr_enabled\x18\x04\x20\x01(\x08R\x13withdrawAd\
    drEnabledB\x20\xf2\xde\x1f\x1cyaml:\"withdraw_addr_enabled\":\x04\x98\
    \xa0\x1f\0\"\x8f\x02\n\x1aValidatorHistoricalRewards\x12\xab\x01\n\x17cu\
    mulative_reward_ratio\x18\x01\x20\x03(\x0b2\x1c.cosmos.base.v1beta1.DecC\
    oinR\x15cumulativeRewardRatioBU\xaa\xdf\x1f+github.com/cosmos/cosmos-sdk\
    /types.DecCoins\xc8\xde\x1f\0\xf2\xde\x1f\x1eyaml:\"cumulative_reward_ra\
    tio\"\x12C\n\x0freference_count\x18\x02\x20\x01(\rR\x0ereferenceCountB\
    \x1a\xf2\xde\x1f\x16yaml:\"reference_count\"\"\x9e\x01\n\x17ValidatorCur\
    rentRewards\x12k\n\x07rewards\x18\x01\x20\x03(\x0b2\x1c.cosmos.base.v1be\
    ta1.DecCoinR\x07rewardsB3\xaa\xdf\x1f+github.com/cosmos/cosmos-sdk/types\
    .DecCoins\xc8\xde\x1f\0\x12\x16\n\x06period\x18\x02\x20\x01(\x04R\x06per\
    iod\"\x93\x01\n\x1eValidatorAccumulatedCommission\x12q\n\ncommission\x18\
    \x01\x20\x03(\x0b2\x1c.cosmos.base.v1beta1.DecCoinR\ncommissionB3\xaa\
    \xdf\x1f+github.com/cosmos/cosmos-sdk/types.DecCoins\xc8\xde\x1f\0\"\x9c\
    \x01\n\x1bValidatorOutstandingRewards\x12}\n\x07rewards\x18\x01\x20\x03(\
    \x0b2\x1c.cosmos.base.v1beta1.DecCoinR\x07rewardsBE\xf2\xde\x1f\x0eyaml:\
    \"rewards\"\xaa\xdf\x1f+github.com/cosmos/cosmos-sdk/types.DecCoins\xc8\
    \xde\x1f\0\"\xa9\x01\n\x13ValidatorSlashEvent\x12F\n\x10validator_period\
    \x18\x01\x20\x01(\x04R\x0fvalidatorPeriodB\x1b\xf2\xde\x1f\x17yaml:\"val\
    idator_period\"\x12J\n\x08fraction\x18\x02\x20\x01(\tR\x08fractionB.\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\"\xac\x01\
    \n\x14ValidatorSlashEvents\x12\x8d\x01\n\x16validator_slash_events\x18\
    \x01\x20\x03(\x0b20.cosmos.distribution.v1beta1.ValidatorSlashEventR\x14\
    validatorSlashEventsB%\xc8\xde\x1f\0\xf2\xde\x1f\x1dyaml:\"validator_sla\
    sh_events\":\x04\x98\xa0\x1f\0\"\x9d\x01\n\x07FeePool\x12\x91\x01\n\x0ec\
    ommunity_pool\x18\x01\x20\x03(\x0b2\x1c.cosmos.base.v1beta1.DecCoinR\rco\
    mmunityPoolBL\xf2\xde\x1f\x15yaml:\"community_pool\"\xc8\xde\x1f\0\xaa\
    \xdf\x1f+github.com/cosmos/cosmos-sdk/types.DecCoins\"\xe5\x01\n\x1aComm\
    unityPoolSpendProposal\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12\x1c\n\t\
    recipient\x18\x03\x20\x01(\tR\trecipient\x12c\n\x06amount\x18\x04\x20\
    \x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB0\xc8\xde\x1f\0\xaa\
    \xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins:\x0c\x98\xa0\x1f\0\x88\
    \xa0\x1f\0\xe8\xa0\x1f\0\"\xf9\x01\n\x15DelegatorStartingInfo\x12C\n\x0f\
    previous_period\x18\x01\x20\x01(\x04R\x0epreviousPeriodB\x1a\xf2\xde\x1f\
    \x16yaml:\"previous_period\"\x12T\n\x05stake\x18\x02\x20\x01(\tR\x05stak\
    eB>\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xf2\xde\x1f\x0cya\
    ml:\"stake\"\xc8\xde\x1f\0\x12E\n\x06height\x18\x03\x20\x01(\x04R\x06hei\
    ghtB-\xea\xde\x1f\x0fcreation_height\xf2\xde\x1f\x16yaml:\"creation_heig\
    ht\"\"\xdb\x01\n\x19DelegationDelegatorReward\x12I\n\x11validator_addres\
    s\x18\x01\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"val\
    idator_address\"\x12i\n\x06reward\x18\x02\x20\x03(\x0b2\x1c.cosmos.base.\
    v1beta1.DecCoinR\x06rewardB3\xc8\xde\x1f\0\xaa\xdf\x1f+github.com/cosmos\
    /cosmos-sdk/types.DecCoins:\x08\x98\xa0\x1f\x01\x88\xa0\x1f\0\"\xa0\x02\
    \n%CommunityPoolSpendProposalWithDeposit\x12&\n\x05title\x18\x01\x20\x01\
    (\tR\x05titleB\x10\xf2\xde\x1f\x0cyaml:\"title\"\x128\n\x0bdescription\
    \x18\x02\x20\x01(\tR\x0bdescriptionB\x16\xf2\xde\x1f\x12yaml:\"descripti\
    on\"\x122\n\trecipient\x18\x03\x20\x01(\tR\trecipientB\x14\xf2\xde\x1f\
    \x10yaml:\"recipient\"\x12)\n\x06amount\x18\x04\x20\x01(\tR\x06amountB\
    \x11\xf2\xde\x1f\ryaml:\"amount\"\x12,\n\x07deposit\x18\x05\x20\x01(\tR\
    \x07depositB\x12\xf2\xde\x1f\x0eyaml:\"deposit\":\x08\x98\xa0\x1f\x01\
    \x88\xa0\x1f\0B7Z1github.com/cosmos/cosmos-sdk/x/distribution/types\xa8\
    \xe2\x1e\x01J\xdf/\n\x07\x12\x05\0\0\x9c\x01\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08#\n\x08\n\x01\x08\x12\x03\x03\0S\
    \n\t\n\x02\x08\x0b\x12\x03\x03\0S\n\x08\n\x01\x08\x12\x03\x04\0$\n\x0b\n\
    \x04\x08\xa5\xec\x03\x12\x03\x04\0$\n\t\n\x02\x03\0\x12\x03\x06\x07\x1d\
    \n\t\n\x02\x03\x01\x12\x03\x07\x07'\nK\n\x02\x04\0\x12\x04\n\0\x1c\x01\
    \x1a?\x20Params\x20defines\x20the\x20set\x20of\x20params\x20for\x20the\
    \x20distribution\x20module.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x0e\n\n\
    \n\x03\x04\0\x07\x12\x03\x0b\x02.\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\
    \x03\x0b\x02.\n\x0c\n\x04\x04\0\x02\0\x12\x04\x0c\x02\x10\x04\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04\x0c\x02\x0b.\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x16\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0c()\n\r\n\x05\x04\0\x02\0\x08\x12\x04\x0c\
    *\x10\x03\n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\r\x045\n\x0f\n\
    \x08\x04\0\x02\0\x08\xeb\xfb\x03\x12\x03\x0e\x04E\n\x0f\n\x08\x04\0\x02\
    \0\x08\xe9\xfb\x03\x12\x03\x0f\x04\"\n\x0c\n\x04\x04\0\x02\x01\x12\x04\
    \x11\x02\x15\x04\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x11\x02\x10\x04\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x11\t\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x11\x20\
    !\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\x11\"\x15\x03\n\x0f\n\x08\x04\0\
    \x02\x01\x08\xee\xfb\x03\x12\x03\x12\x04<\n\x0f\n\x08\x04\0\x02\x01\x08\
    \xeb\xfb\x03\x12\x03\x13\x04E\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\
    \x12\x03\x14\x04\"\n\x0c\n\x04\x04\0\x02\x02\x12\x04\x16\x02\x1a\x04\n\r\
    \n\x05\x04\0\x02\x02\x04\x12\x04\x16\x02\x15\x04\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x16\t\
    \x1e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x16!\"\n\r\n\x05\x04\0\x02\
    \x02\x08\x12\x04\x16#\x1a\x03\n\x0f\n\x08\x04\0\x02\x02\x08\xee\xfb\x03\
    \x12\x03\x17\x04=\n\x0f\n\x08\x04\0\x02\x02\x08\xeb\xfb\x03\x12\x03\x18\
    \x04E\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x19\x04\"\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x1b\x02[\n\r\n\x05\x04\0\x02\x03\x04\x12\
    \x04\x1b\x02\x1a\x04\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1b\x02\x06\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1b\x07\x1c\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x1b\x1f\x20\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x1b!Z\
    \n\x0f\n\x08\x04\0\x02\x03\x08\xee\xfb\x03\x12\x03\x1b\"Y\n\x92\x05\n\
    \x02\x04\x01\x12\x04*\01\x01\x1a\x85\x05\x20ValidatorHistoricalRewards\
    \x20represents\x20historical\x20rewards\x20for\x20a\x20validator.\n\x20H\
    eight\x20is\x20implicit\x20within\x20the\x20store\x20key.\n\x20Cumulativ\
    e\x20reward\x20ratio\x20is\x20the\x20sum\x20from\x20the\x20zeroeth\x20pe\
    riod\n\x20until\x20this\x20period\x20of\x20rewards\x20/\x20tokens,\x20pe\
    r\x20the\x20spec.\n\x20The\x20reference\x20count\x20indicates\x20the\x20\
    number\x20of\x20objects\n\x20which\x20might\x20need\x20to\x20reference\
    \x20this\x20historical\x20entry\x20at\x20any\x20point.\n\x20ReferenceCou\
    nt\x20=\n\x20\x20\x20\x20number\x20of\x20outstanding\x20delegations\x20w\
    hich\x20ended\x20the\x20associated\x20period\x20(and\n\x20\x20\x20\x20mi\
    ght\x20need\x20to\x20read\x20that\x20record)\n\x20\x20+\x20number\x20of\
    \x20slashes\x20which\x20ended\x20the\x20associated\x20period\x20(and\x20\
    might\x20need\x20to\n\x20\x20read\x20that\x20record)\n\x20\x20+\x20one\
    \x20per\x20validator\x20for\x20the\x20zeroeth\x20period,\x20set\x20on\
    \x20initialization\n\n\n\n\x03\x04\x01\x01\x12\x03*\x08\"\n\x0c\n\x04\
    \x04\x01\x02\0\x12\x04+\x02/\x04\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03+\
    \x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03+\x0b&\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03+'>\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03+AB\n\r\n\x05\
    \x04\x01\x02\0\x08\x12\x04+C/\x03\n\x0f\n\x08\x04\x01\x02\0\x08\xee\xfb\
    \x03\x12\x03,\x04A\n\x0f\n\x08\x04\x01\x02\0\x08\xf5\xfb\x03\x12\x03-\
    \x04L\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03.\x04$\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x030\x02Q\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    0\x02/\x04\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x030\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x030\t\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x030\x1b\x1c\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x030\x1dP\n\x0f\n\x08\
    \x04\x01\x02\x01\x08\xee\xfb\x03\x12\x030\x1eO\n\xce\x01\n\x02\x04\x02\
    \x12\x046\0:\x01\x1a\xc1\x01\x20ValidatorCurrentRewards\x20represents\
    \x20current\x20rewards\x20and\x20current\n\x20period\x20for\x20a\x20vali\
    dator\x20kept\x20as\x20a\x20running\x20counter\x20and\x20incremented\n\
    \x20each\x20block\x20as\x20long\x20as\x20the\x20validator's\x20tokens\
    \x20remain\x20constant.\n\n\n\n\x03\x04\x02\x01\x12\x036\x08\x1f\n\x0c\n\
    \x04\x04\x02\x02\0\x12\x047\x028o\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x037\
    \x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x037\x0b&\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x037'.\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03712\n\x0c\n\
    \x05\x04\x02\x02\0\x08\x12\x038\x06n\n\x0f\n\x08\x04\x02\x02\0\x08\xf5\
    \xfb\x03\x12\x038\x07O\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\
    8Qm\n\x0b\n\x04\x04\x02\x02\x01\x12\x039\x02\x14\n\r\n\x05\x04\x02\x02\
    \x01\x04\x12\x049\x028o\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x039\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x039\t\x0f\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x039\x12\x13\n\x99\x01\n\x02\x04\x03\x12\x04>\0A\x01\x1a\
    \x8c\x01\x20ValidatorAccumulatedCommission\x20represents\x20accumulated\
    \x20commission\n\x20for\x20a\x20validator\x20kept\x20as\x20a\x20running\
    \x20counter,\x20can\x20be\x20withdrawn\x20at\x20any\x20time.\n\n\n\n\x03\
    \x04\x03\x01\x12\x03>\x08&\n\x0c\n\x04\x04\x03\x02\0\x12\x04?\x02@o\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03?\x0b&\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03?'1\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03?45\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03@\x06\
    n\n\x0f\n\x08\x04\x03\x02\0\x08\xf5\xfb\x03\x12\x03@\x07O\n\x0f\n\x08\
    \x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03@Qm\n\x9c\x01\n\x02\x04\x04\x12\
    \x04E\0K\x01\x1a\x8f\x01\x20ValidatorOutstandingRewards\x20represents\
    \x20outstanding\x20(un-withdrawn)\x20rewards\n\x20for\x20a\x20validator\
    \x20inexpensive\x20to\x20track,\x20allows\x20simple\x20sanity\x20checks.\
    \n\n\n\n\x03\x04\x04\x01\x12\x03E\x08#\n\x0c\n\x04\x04\x04\x02\0\x12\x04\
    F\x02J\x04\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03F\x02\n\n\x0c\n\x05\x04\
    \x04\x02\0\x06\x12\x03F\x0b&\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03F'.\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03F12\n\r\n\x05\x04\x04\x02\0\x08\x12\
    \x04F3J\x03\n\x0f\n\x08\x04\x04\x02\0\x08\xee\xfb\x03\x12\x03G\x041\n\
    \x0f\n\x08\x04\x04\x02\0\x08\xf5\xfb\x03\x12\x03H\x04L\n\x0f\n\x08\x04\
    \x04\x02\0\x08\xe9\xfb\x03\x12\x03I\x04$\n\xf3\x01\n\x02\x04\x05\x12\x04\
    Q\0T\x01\x1a\xe6\x01\x20ValidatorSlashEvent\x20represents\x20a\x20valida\
    tor\x20slash\x20event.\n\x20Height\x20is\x20implicit\x20within\x20the\
    \x20store\x20key.\n\x20This\x20is\x20needed\x20to\x20calculate\x20approp\
    riate\x20amount\x20of\x20staking\x20tokens\n\x20for\x20delegations\x20wh\
    ich\x20are\x20withdrawn\x20after\x20a\x20slash\x20has\x20occurred.\n\n\n\
    \n\x03\x04\x05\x01\x12\x03Q\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03R\
    \x02S\n\r\n\x05\x04\x05\x02\0\x04\x12\x04R\x02Q\x1d\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03R\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03R\t\x19\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03R\x1c\x1d\n\x0c\n\x05\x04\x05\x02\
    \0\x08\x12\x03R\x1eR\n\x0f\n\x08\x04\x05\x02\0\x08\xee\xfb\x03\x12\x03R\
    \x1fQ\n\x0b\n\x04\x04\x05\x02\x01\x12\x03S\x02x\n\r\n\x05\x04\x05\x02\
    \x01\x04\x12\x04S\x02RS\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03S\x02\x08\
    \n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03S\t\x11\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03S\x14\x15\n\x0c\n\x05\x04\x05\x02\x01\x08\x12\x03S\x16w\
    \n\x0f\n\x08\x04\x05\x02\x01\x08\xeb\xfb\x03\x12\x03S\x17X\n\x0f\n\x08\
    \x04\x05\x02\x01\x08\xe9\xfb\x03\x12\x03SZv\nS\n\x02\x04\x06\x12\x04W\0[\
    \x01\x1aG\x20ValidatorSlashEvents\x20is\x20a\x20collection\x20of\x20Vali\
    datorSlashEvent\x20messages.\n\n\n\n\x03\x04\x06\x01\x12\x03W\x08\x1c\n\
    \n\n\x03\x04\x06\x07\x12\x03X\x02>\n\r\n\x06\x04\x06\x07\x83\xf4\x03\x12\
    \x03X\x02>\n\x0c\n\x04\x04\x06\x02\0\x12\x04Y\x02Z_\n\x0c\n\x05\x04\x06\
    \x02\0\x04\x12\x03Y\x02\n\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03Y\x0b\x1e\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03Y\x1f5\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03Y89\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03Z\x06^\n\x0f\n\x08\
    \x04\x06\x02\0\x08\xee\xfb\x03\x12\x03Z\x07?\n\x0f\n\x08\x04\x06\x02\0\
    \x08\xe9\xfb\x03\x12\x03ZA]\n>\n\x02\x04\x07\x12\x04^\0d\x01\x1a2\x20Fee\
    Pool\x20is\x20the\x20global\x20fee\x20pool\x20for\x20distribution.\n\n\n\
    \n\x03\x04\x07\x01\x12\x03^\x08\x0f\n\x0c\n\x04\x04\x07\x02\0\x12\x04_\
    \x02c\x04\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03_\x02\n\n\x0c\n\x05\x04\
    \x07\x02\0\x06\x12\x03_\x0b&\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03_'5\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03_89\n\r\n\x05\x04\x07\x02\0\x08\x12\
    \x04_:c\x03\n\x0f\n\x08\x04\x07\x02\0\x08\xe9\xfb\x03\x12\x03`\x04$\n\
    \x0f\n\x08\x04\x07\x02\0\x08\xf5\xfb\x03\x12\x03a\x04L\n\x0f\n\x08\x04\
    \x07\x02\0\x08\xee\xfb\x03\x12\x03b\x048\n\xb1\x01\n\x02\x04\x08\x12\x04\
    i\0s\x01\x1a\xa4\x01\x20CommunityPoolSpendProposal\x20details\x20a\x20pr\
    oposal\x20for\x20use\x20of\x20community\x20funds,\n\x20together\x20with\
    \x20how\x20many\x20coins\x20are\x20proposed\x20to\x20be\x20spent,\x20and\
    \x20to\x20which\n\x20recipient\x20account.\n\n\n\n\x03\x04\x08\x01\x12\
    \x03i\x08\"\n\n\n\x03\x04\x08\x07\x12\x03j\x02.\n\r\n\x06\x04\x08\x07\
    \x8d\xf4\x03\x12\x03j\x02.\n\n\n\x03\x04\x08\x07\x12\x03k\x02.\n\r\n\x06\
    \x04\x08\x07\x81\xf4\x03\x12\x03k\x02.\n\n\n\x03\x04\x08\x07\x12\x03l\
    \x02.\n\r\n\x06\x04\x08\x07\x83\xf4\x03\x12\x03l\x02.\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03n\x02/\n\r\n\x05\x04\x08\x02\0\x04\x12\x04n\x02l.\n\
    \x0c\n\x05\x04\x08\x02\0\x05\x12\x03n\x02\x08\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03n\x0b\x10\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03n-.\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03o\x02/\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\
    o\x02n/\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03o\x02\x08\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x03o\x0b\x16\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03o-.\n\x0b\n\x04\x04\x08\x02\x02\x12\x03p\x02/\n\r\n\x05\x04\x08\x02\
    \x02\x04\x12\x04p\x02o/\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03p\x02\x08\
    \n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03p\x0b\x14\n\x0c\n\x05\x04\x08\
    \x02\x02\x03\x12\x03p-.\n\x0c\n\x04\x04\x08\x02\x03\x12\x04q\x02rl\n\x0c\
    \n\x05\x04\x08\x02\x03\x04\x12\x03q\x02\n\n\x0c\n\x05\x04\x08\x02\x03\
    \x06\x12\x03q\x0b#\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03q$*\n\x0c\n\
    \x05\x04\x08\x02\x03\x03\x12\x03q-.\n\x0c\n\x05\x04\x08\x02\x03\x08\x12\
    \x03r\x06k\n\x0f\n\x08\x04\x08\x02\x03\x08\xe9\xfb\x03\x12\x03r\x07#\n\
    \x0f\n\x08\x04\x08\x02\x03\x08\xf5\xfb\x03\x12\x03r%j\n\xa8\x03\n\x02\
    \x04\t\x12\x05{\0\x83\x01\x01\x1a\x9a\x03\x20DelegatorStartingInfo\x20re\
    presents\x20the\x20starting\x20info\x20for\x20a\x20delegator\x20reward\n\
    \x20period.\x20It\x20tracks\x20the\x20previous\x20validator\x20period,\
    \x20the\x20delegation's\x20amount\x20of\n\x20staking\x20token,\x20and\
    \x20the\x20creation\x20height\x20(to\x20check\x20later\x20on\x20if\x20an\
    y\x20slashes\x20have\n\x20occurred).\x20NOTE:\x20Even\x20though\x20valid\
    ators\x20are\x20slashed\x20to\x20whole\x20staking\x20tokens,\n\x20the\
    \x20delegators\x20within\x20the\x20validator\x20may\x20be\x20left\x20wit\
    h\x20less\x20than\x20a\x20full\x20token,\n\x20thus\x20sdk.Dec\x20is\x20u\
    sed.\n\n\n\n\x03\x04\t\x01\x12\x03{\x08\x1d\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03|\x02Q\n\r\n\x05\x04\t\x02\0\x04\x12\x04|\x02{\x1f\n\x0c\n\x05\x04\t\
    \x02\0\x05\x12\x03|\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03|\t\x18\n\
    \x0c\n\x05\x04\t\x02\0\x03\x12\x03|\x1b\x1c\n\x0c\n\x05\x04\t\x02\0\x08\
    \x12\x03|\x1dP\n\x0f\n\x08\x04\t\x02\0\x08\xee\xfb\x03\x12\x03|\x1eO\n\r\
    \n\x04\x04\t\x02\x01\x12\x05}\x02\x81\x01\x04\n\r\n\x05\x04\t\x02\x01\
    \x04\x12\x04}\x02|Q\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03}\x02\x08\n\x0c\
    \n\x05\x04\t\x02\x01\x01\x12\x03}\t\x0e\n\x0c\n\x05\x04\t\x02\x01\x03\
    \x12\x03}\x1b\x1c\n\x0e\n\x05\x04\t\x02\x01\x08\x12\x05}\x1d\x81\x01\x03\
    \n\x0f\n\x08\x04\t\x02\x01\x08\xee\xfb\x03\x12\x03~\x04-\n\x0f\n\x08\x04\
    \t\x02\x01\x08\xeb\xfb\x03\x12\x03\x7f\x04E\n\x10\n\x08\x04\t\x02\x01\
    \x08\xe9\xfb\x03\x12\x04\x80\x01\x04\"\n\x0c\n\x04\x04\t\x02\x02\x12\x04\
    \x82\x01\x02q\n\x0f\n\x05\x04\t\x02\x02\x04\x12\x06\x82\x01\x02\x81\x01\
    \x04\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x82\x01\x02\x08\n\r\n\x05\x04\t\
    \x02\x02\x01\x12\x04\x82\x01\t\x0f\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\
    \x82\x01\x12\x13\n\r\n\x05\x04\t\x02\x02\x08\x12\x04\x82\x01\x14p\n\x10\
    \n\x08\x04\t\x02\x02\x08\xee\xfb\x03\x12\x04\x82\x01\x15F\n\x10\n\x08\
    \x04\t\x02\x02\x08\xed\xfb\x03\x12\x04\x82\x01Ho\nh\n\x02\x04\n\x12\x06\
    \x87\x01\0\x8f\x01\x01\x1aZ\x20DelegationDelegatorReward\x20represents\
    \x20the\x20properties\n\x20of\x20a\x20delegator's\x20delegation\x20rewar\
    d.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x87\x01\x08!\n\x0b\n\x03\x04\n\x07\
    \x12\x04\x88\x01\x02.\n\x0e\n\x06\x04\n\x07\x81\xf4\x03\x12\x04\x88\x01\
    \x02.\n\x0b\n\x03\x04\n\x07\x12\x04\x89\x01\x02-\n\x0e\n\x06\x04\n\x07\
    \x83\xf4\x03\x12\x04\x89\x01\x02-\n\x0c\n\x04\x04\n\x02\0\x12\x04\x8b\
    \x01\x02U\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\x8b\x01\x02\x89\x01-\n\r\n\
    \x05\x04\n\x02\0\x05\x12\x04\x8b\x01\x02\x08\n\r\n\x05\x04\n\x02\0\x01\
    \x12\x04\x8b\x01\t\x1a\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x8b\x01\x1d\x1e\
    \n\r\n\x05\x04\n\x02\0\x08\x12\x04\x8b\x01\x1fT\n\x10\n\x08\x04\n\x02\0\
    \x08\xee\xfb\x03\x12\x04\x8b\x01\x20S\n\x0e\n\x04\x04\n\x02\x01\x12\x06\
    \x8d\x01\x02\x8e\x01o\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\x8d\x01\x02\n\
    \n\r\n\x05\x04\n\x02\x01\x06\x12\x04\x8d\x01\x0b&\n\r\n\x05\x04\n\x02\
    \x01\x01\x12\x04\x8d\x01'-\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\x8d\x0101\
    \n\r\n\x05\x04\n\x02\x01\x08\x12\x04\x8e\x01\x06n\n\x10\n\x08\x04\n\x02\
    \x01\x08\xf5\xfb\x03\x12\x04\x8e\x01\x07O\n\x10\n\x08\x04\n\x02\x01\x08\
    \xe9\xfb\x03\x12\x04\x8e\x01Qm\nj\n\x02\x04\x0b\x12\x06\x93\x01\0\x9c\
    \x01\x01\x1a\\\x20CommunityPoolSpendProposalWithDeposit\x20defines\x20a\
    \x20CommunityPoolSpendProposal\n\x20with\x20a\x20deposit\n\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x93\x01\x08-\n\x0b\n\x03\x04\x0b\x07\x12\x04\x94\
    \x01\x02.\n\x0e\n\x06\x04\x0b\x07\x81\xf4\x03\x12\x04\x94\x01\x02.\n\x0b\
    \n\x03\x04\x0b\x07\x12\x04\x95\x01\x02-\n\x0e\n\x06\x04\x0b\x07\x83\xf4\
    \x03\x12\x04\x95\x01\x02-\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x97\x01\x02C\
    \n\x0f\n\x05\x04\x0b\x02\0\x04\x12\x06\x97\x01\x02\x95\x01-\n\r\n\x05\
    \x04\x0b\x02\0\x05\x12\x04\x97\x01\x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\x97\x01\t\x0e\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x97\x01\x17\
    \x18\n\r\n\x05\x04\x0b\x02\0\x08\x12\x04\x97\x01\x19B\n\x10\n\x08\x04\
    \x0b\x02\0\x08\xee\xfb\x03\x12\x04\x97\x01\x1aA\n\x0c\n\x04\x04\x0b\x02\
    \x01\x12\x04\x98\x01\x02I\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\x98\
    \x01\x02\x97\x01C\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\x98\x01\x02\x08\
    \n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\x98\x01\t\x14\n\r\n\x05\x04\x0b\
    \x02\x01\x03\x12\x04\x98\x01\x17\x18\n\r\n\x05\x04\x0b\x02\x01\x08\x12\
    \x04\x98\x01\x19H\n\x10\n\x08\x04\x0b\x02\x01\x08\xee\xfb\x03\x12\x04\
    \x98\x01\x1aG\n\x0c\n\x04\x04\x0b\x02\x02\x12\x04\x99\x01\x02G\n\x0f\n\
    \x05\x04\x0b\x02\x02\x04\x12\x06\x99\x01\x02\x98\x01I\n\r\n\x05\x04\x0b\
    \x02\x02\x05\x12\x04\x99\x01\x02\x08\n\r\n\x05\x04\x0b\x02\x02\x01\x12\
    \x04\x99\x01\t\x12\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\x99\x01\x17\x18\
    \n\r\n\x05\x04\x0b\x02\x02\x08\x12\x04\x99\x01\x19F\n\x10\n\x08\x04\x0b\
    \x02\x02\x08\xee\xfb\x03\x12\x04\x99\x01\x1aE\n\x0c\n\x04\x04\x0b\x02\
    \x03\x12\x04\x9a\x01\x02D\n\x0f\n\x05\x04\x0b\x02\x03\x04\x12\x06\x9a\
    \x01\x02\x99\x01G\n\r\n\x05\x04\x0b\x02\x03\x05\x12\x04\x9a\x01\x02\x08\
    \n\r\n\x05\x04\x0b\x02\x03\x01\x12\x04\x9a\x01\t\x0f\n\r\n\x05\x04\x0b\
    \x02\x03\x03\x12\x04\x9a\x01\x17\x18\n\r\n\x05\x04\x0b\x02\x03\x08\x12\
    \x04\x9a\x01\x19C\n\x10\n\x08\x04\x0b\x02\x03\x08\xee\xfb\x03\x12\x04\
    \x9a\x01\x1aB\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\x9b\x01\x02E\n\x0f\n\
    \x05\x04\x0b\x02\x04\x04\x12\x06\x9b\x01\x02\x9a\x01D\n\r\n\x05\x04\x0b\
    \x02\x04\x05\x12\x04\x9b\x01\x02\x08\n\r\n\x05\x04\x0b\x02\x04\x01\x12\
    \x04\x9b\x01\t\x10\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\x9b\x01\x17\x18\
    \n\r\n\x05\x04\x0b\x02\x04\x08\x12\x04\x9b\x01\x19D\n\x10\n\x08\x04\x0b\
    \x02\x04\x08\xee\xfb\x03\x12\x04\x9b\x01\x1aCb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
