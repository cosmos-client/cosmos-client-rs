// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/client/v1/client.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct IdentifiedClientState {
    // message fields
    pub client_id: ::std::string::String,
    pub client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentifiedClientState {
    fn default() -> &'a IdentifiedClientState {
        <IdentifiedClientState as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedClientState {
    pub fn new() -> IdentifiedClientState {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .google.protobuf.Any client_state = 2;


    pub fn get_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_state(&mut self) {
        self.client_state.clear();
    }

    pub fn has_client_state(&self) -> bool {
        self.client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.client_state.is_none() {
            self.client_state.set_default();
        }
        self.client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for IdentifiedClientState {
    fn is_initialized(&self) -> bool {
        for v in &self.client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(ref v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentifiedClientState {
        IdentifiedClientState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &IdentifiedClientState| { &m.client_id },
                |m: &mut IdentifiedClientState| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "client_state",
                |m: &IdentifiedClientState| { &m.client_state },
                |m: &mut IdentifiedClientState| { &mut m.client_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentifiedClientState>(
                "IdentifiedClientState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentifiedClientState {
        static instance: ::protobuf::rt::LazyV2<IdentifiedClientState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentifiedClientState::new)
    }
}

impl ::protobuf::Clear for IdentifiedClientState {
    fn clear(&mut self) {
        self.client_id.clear();
        self.client_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentifiedClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedClientState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateWithHeight {
    // message fields
    pub height: ::protobuf::SingularPtrField<Height>,
    pub consensus_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateWithHeight {
    fn default() -> &'a ConsensusStateWithHeight {
        <ConsensusStateWithHeight as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateWithHeight {
    pub fn new() -> ConsensusStateWithHeight {
        ::std::default::Default::default()
    }

    // .ibc.core.client.v1.Height height = 1;


    pub fn get_height(&self) -> &Height {
        self.height.as_ref().unwrap_or_else(|| <Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_height(&mut self) {
        self.height.clear();
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: Height) {
        self.height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_height(&mut self) -> &mut Height {
        if self.height.is_none() {
            self.height.set_default();
        }
        self.height.as_mut().unwrap()
    }

    // Take field
    pub fn take_height(&mut self) -> Height {
        self.height.take().unwrap_or_else(|| Height::new())
    }

    // .google.protobuf.Any consensus_state = 2;


    pub fn get_consensus_state(&self) -> &::protobuf::well_known_types::Any {
        self.consensus_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_state(&mut self) {
        self.consensus_state.clear();
    }

    pub fn has_consensus_state(&self) -> bool {
        self.consensus_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.consensus_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.consensus_state.is_none() {
            self.consensus_state.set_default();
        }
        self.consensus_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.consensus_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for ConsensusStateWithHeight {
    fn is_initialized(&self) -> bool {
        for v in &self.height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consensus_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.height)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.height.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateWithHeight {
        ConsensusStateWithHeight::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Height>>(
                "height",
                |m: &ConsensusStateWithHeight| { &m.height },
                |m: &mut ConsensusStateWithHeight| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "consensus_state",
                |m: &ConsensusStateWithHeight| { &m.consensus_state },
                |m: &mut ConsensusStateWithHeight| { &mut m.consensus_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateWithHeight>(
                "ConsensusStateWithHeight",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateWithHeight {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateWithHeight> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateWithHeight::new)
    }
}

impl ::protobuf::Clear for ConsensusStateWithHeight {
    fn clear(&mut self) {
        self.height.clear();
        self.consensus_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateWithHeight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateWithHeight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientConsensusStates {
    // message fields
    pub client_id: ::std::string::String,
    pub consensus_states: ::protobuf::RepeatedField<ConsensusStateWithHeight>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConsensusStates {
    fn default() -> &'a ClientConsensusStates {
        <ClientConsensusStates as ::protobuf::Message>::default_instance()
    }
}

impl ClientConsensusStates {
    pub fn new() -> ClientConsensusStates {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2;


    pub fn get_consensus_states(&self) -> &[ConsensusStateWithHeight] {
        &self.consensus_states
    }
    pub fn clear_consensus_states(&mut self) {
        self.consensus_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_states(&mut self, v: ::protobuf::RepeatedField<ConsensusStateWithHeight>) {
        self.consensus_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consensus_states(&mut self) -> &mut ::protobuf::RepeatedField<ConsensusStateWithHeight> {
        &mut self.consensus_states
    }

    // Take field
    pub fn take_consensus_states(&mut self) -> ::protobuf::RepeatedField<ConsensusStateWithHeight> {
        ::std::mem::replace(&mut self.consensus_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientConsensusStates {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consensus_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        for value in &self.consensus_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        for v in &self.consensus_states {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConsensusStates {
        ClientConsensusStates::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &ClientConsensusStates| { &m.client_id },
                |m: &mut ClientConsensusStates| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusStateWithHeight>>(
                "consensus_states",
                |m: &ClientConsensusStates| { &m.consensus_states },
                |m: &mut ClientConsensusStates| { &mut m.consensus_states },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientConsensusStates>(
                "ClientConsensusStates",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientConsensusStates {
        static instance: ::protobuf::rt::LazyV2<ClientConsensusStates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientConsensusStates::new)
    }
}

impl ::protobuf::Clear for ClientConsensusStates {
    fn clear(&mut self) {
        self.client_id.clear();
        self.consensus_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConsensusStates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConsensusStates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientUpdateProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub client_id: ::std::string::String,
    pub header: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientUpdateProposal {
    fn default() -> &'a ClientUpdateProposal {
        <ClientUpdateProposal as ::protobuf::Message>::default_instance()
    }
}

impl ClientUpdateProposal {
    pub fn new() -> ClientUpdateProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string client_id = 3;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .google.protobuf.Any header = 4;


    pub fn get_header(&self) -> &::protobuf::well_known_types::Any {
        self.header.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::protobuf::well_known_types::Any) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> ::protobuf::well_known_types::Any {
        self.header.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for ClientUpdateProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.client_id);
        }
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(3, &self.client_id)?;
        }
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientUpdateProposal {
        ClientUpdateProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &ClientUpdateProposal| { &m.title },
                |m: &mut ClientUpdateProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ClientUpdateProposal| { &m.description },
                |m: &mut ClientUpdateProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &ClientUpdateProposal| { &m.client_id },
                |m: &mut ClientUpdateProposal| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "header",
                |m: &ClientUpdateProposal| { &m.header },
                |m: &mut ClientUpdateProposal| { &mut m.header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientUpdateProposal>(
                "ClientUpdateProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientUpdateProposal {
        static instance: ::protobuf::rt::LazyV2<ClientUpdateProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientUpdateProposal::new)
    }
}

impl ::protobuf::Clear for ClientUpdateProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.client_id.clear();
        self.header.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientUpdateProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientUpdateProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Height {
    // message fields
    pub revision_number: u64,
    pub revision_height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Height {
    fn default() -> &'a Height {
        <Height as ::protobuf::Message>::default_instance()
    }
}

impl Height {
    pub fn new() -> Height {
        ::std::default::Default::default()
    }

    // uint64 revision_number = 1;


    pub fn get_revision_number(&self) -> u64 {
        self.revision_number
    }
    pub fn clear_revision_number(&mut self) {
        self.revision_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_number(&mut self, v: u64) {
        self.revision_number = v;
    }

    // uint64 revision_height = 2;


    pub fn get_revision_height(&self) -> u64 {
        self.revision_height
    }
    pub fn clear_revision_height(&mut self) {
        self.revision_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_height(&mut self, v: u64) {
        self.revision_height = v;
    }
}

impl ::protobuf::Message for Height {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_number = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.revision_number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.revision_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.revision_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.revision_number != 0 {
            os.write_uint64(1, self.revision_number)?;
        }
        if self.revision_height != 0 {
            os.write_uint64(2, self.revision_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Height {
        Height::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_number",
                |m: &Height| { &m.revision_number },
                |m: &mut Height| { &mut m.revision_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_height",
                |m: &Height| { &m.revision_height },
                |m: &mut Height| { &mut m.revision_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Height>(
                "Height",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Height {
        static instance: ::protobuf::rt::LazyV2<Height> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Height::new)
    }
}

impl ::protobuf::Clear for Height {
    fn clear(&mut self) {
        self.revision_number = 0;
        self.revision_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Height {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Height {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub allowed_clients: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // repeated string allowed_clients = 1;


    pub fn get_allowed_clients(&self) -> &[::std::string::String] {
        &self.allowed_clients
    }
    pub fn clear_allowed_clients(&mut self) {
        self.allowed_clients.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_clients(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.allowed_clients = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_clients(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.allowed_clients
    }

    // Take field
    pub fn take_allowed_clients(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.allowed_clients, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.allowed_clients)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.allowed_clients {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.allowed_clients {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "allowed_clients",
                |m: &Params| { &m.allowed_clients },
                |m: &mut Params| { &mut m.allowed_clients },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.allowed_clients.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fibc/core/client/v1/client.proto\x12\x12ibc.core.client.v1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\"\x9c\x01\n\x15Iden\
    tifiedClientState\x121\n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\
    \xf2\xde\x1f\x10yaml:\"client_id\"\x12P\n\x0cclient_state\x18\x02\x20\
    \x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\xf2\xde\x1f\x13y\
    aml:\"client_state\"\"\xae\x01\n\x18ConsensusStateWithHeight\x128\n\x06h\
    eight\x18\x01\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x06heightB\
    \x04\xc8\xde\x1f\0\x12X\n\x0fconsensus_state\x18\x02\x20\x01(\x0b2\x14.g\
    oogle.protobuf.AnyR\x0econsensusStateB\x19\xf2\xde\x1f\x15yaml\"consensu\
    s_state\"\"\xc4\x01\n\x15ClientConsensusStates\x121\n\tclient_id\x18\x01\
    \x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12x\n\
    \x10consensus_states\x18\x02\x20\x03(\x0b2,.ibc.core.client.v1.Consensus\
    StateWithHeightR\x0fconsensusStatesB\x1f\xf2\xde\x1f\x17yaml:\"consensus\
    _states\"\xc8\xde\x1f\0\"\xb5\x01\n\x14ClientUpdateProposal\x12\x14\n\
    \x05title\x18\x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\
    \x20\x01(\tR\x0bdescription\x121\n\tclient_id\x18\x03\x20\x01(\tR\x08cli\
    entIdB\x14\xf2\xde\x1f\x10yaml:\"client_id\"\x12,\n\x06header\x18\x04\
    \x20\x01(\x0b2\x14.google.protobuf.AnyR\x06header:\x04\x88\xa0\x1f\0\"\
    \x9c\x01\n\x06Height\x12C\n\x0frevision_number\x18\x01\x20\x01(\x04R\x0e\
    revisionNumberB\x1a\xf2\xde\x1f\x16yaml:\"revision_number\"\x12C\n\x0fre\
    vision_height\x18\x02\x20\x01(\x04R\x0erevisionHeightB\x1a\xf2\xde\x1f\
    \x16yaml:\"revision_height\":\x08\x98\xa0\x1f\0\x88\xa0\x1f\0\"M\n\x06Pa\
    rams\x12C\n\x0fallowed_clients\x18\x01\x20\x03(\tR\x0eallowedClientsB\
    \x1a\xf2\xde\x1f\x16yaml:\"allowed_clients\"B9Z7github.com/cosmos/cosmos\
    -sdk/x/ibc/core/02-client/typesJ\xcc\x18\n\x06\x12\x04\0\0I\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x1a\n\x08\n\x01\
    \x08\x12\x03\x03\0N\n\t\n\x02\x08\x0b\x12\x03\x03\0N\n\t\n\x02\x03\0\x12\
    \x03\x05\x07\x1d\n\t\n\x02\x03\x01\x12\x03\x06\x07\"\ng\n\x02\x04\0\x12\
    \x04\n\0\x0f\x01\x1a[\x20IdentifiedClientState\x20defines\x20a\x20client\
    \x20state\x20with\x20an\x20additional\x20client\n\x20identifier\x20field\
    .\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x1d\n\x20\n\x04\x04\0\x02\0\x12\
    \x03\x0c\x02E\x1a\x13\x20client\x20identifier\n\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x0c\x02\n\x1f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x12\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x0c\x15\x16\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c\x17D\
    \n\x0f\n\x08\x04\0\x02\0\x08\xee\xfb\x03\x12\x03\x0c\x18C\n\x1b\n\x04\
    \x04\0\x02\x01\x12\x03\x0e\x02X\x1a\x0e\x20client\x20state\n\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x0e\x02\x0cE\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x0e\x02\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x16\"\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e%&\n\x0c\n\x05\x04\0\x02\x01\x08\
    \x12\x03\x0e'W\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x0e(V\n\
    a\n\x02\x04\x01\x12\x04\x12\0\x17\x01\x1aU\x20ConsensusStateWithHeight\
    \x20defines\x20a\x20consensus\x20state\x20with\x20an\x20additional\x20he\
    ight\x20field.\n\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x20\n%\n\x04\x04\
    \x01\x02\0\x12\x03\x14\x023\x1a\x18\x20consensus\x20state\x20height\n\n\
    \r\n\x05\x04\x01\x02\0\x04\x12\x04\x14\x02\x12\"\n\x0c\n\x05\x04\x01\x02\
    \0\x06\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\t\
    \x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\x12\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x08\x12\x03\x14\x142\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\
    \x03\x12\x03\x14\x151\n\x1e\n\x04\x04\x01\x02\x01\x12\x03\x16\x02]\x1a\
    \x11\x20consensus\x20state\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x16\
    \x02\x143\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x16\x02\x15\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x16\x16%\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x16()\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03\x16*\\\n\x0f\
    \n\x08\x04\x01\x02\x01\x08\xee\xfb\x03\x12\x03\x16+[\n`\n\x02\x04\x02\
    \x12\x04\x1b\0!\x01\x1aT\x20ClientConsensusStates\x20defines\x20all\x20t\
    he\x20stored\x20consensus\x20states\x20for\x20a\x20given\n\x20client.\n\
    \n\n\n\x03\x04\x02\x01\x12\x03\x1b\x08\x1d\n\x20\n\x04\x04\x02\x02\0\x12\
    \x03\x1d\x02E\x1a\x13\x20client\x20identifier\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04\x1d\x02\x1b\x1f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1d\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1d\t\x12\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x1d\x15\x16\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\
    \x1d\x17D\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03\x1d\x18C\nM\
    \n\x04\x04\x02\x02\x01\x12\x04\x1f\x02\x20Y\x1a?\x20consensus\x20states\
    \x20and\x20their\x20heights\x20associated\x20with\x20the\x20client\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x06\x12\x03\x1f\x0b#\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f$4\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1f78\n\x0c\n\x05\x04\x02\x02\
    \x01\x08\x12\x03\x20\x06X\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\
    \x12\x03\x20\x079\n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\x03\
    \x20;W\n\xed\x01\n\x02\x04\x03\x12\x04&\00\x01\x1a\xe0\x01\x20ClientUpda\
    teProposal\x20is\x20a\x20governance\x20proposal.\x20If\x20it\x20passes,\
    \x20the\x20client\x20is\n\x20updated\x20with\x20the\x20provided\x20heade\
    r.\x20The\x20update\x20may\x20fail\x20if\x20the\x20header\x20is\x20not\n\
    \x20valid\x20given\x20certain\x20conditions\x20specified\x20by\x20the\
    \x20client\x20implementation.\n\n\n\n\x03\x04\x03\x01\x12\x03&\x08\x1c\n\
    \n\n\x03\x04\x03\x07\x12\x03'\x02-\n\r\n\x06\x04\x03\x07\x81\xf4\x03\x12\
    \x03'\x02-\n/\n\x04\x04\x03\x02\0\x12\x03)\x02\x13\x1a\"\x20the\x20title\
    \x20of\x20the\x20update\x20proposal\n\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04)\x02'-\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03)\t\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\
    \x11\x12\n.\n\x04\x04\x03\x02\x01\x12\x03+\x02\x19\x1a!\x20the\x20descri\
    ption\x20of\x20the\x20proposal\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04+\
    \x02)\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03+\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03+\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03+\x17\x18\nX\n\x04\x04\x03\x02\x02\x12\x03-\x02E\x1aK\x20the\x20clie\
    nt\x20identifier\x20for\x20the\x20client\x20to\x20be\x20updated\x20if\
    \x20the\x20proposal\x20passes\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04-\
    \x02+\x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03-\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03-\t\x12\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03-\x15\x16\n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x03-\x17D\n\x0f\n\x08\
    \x04\x03\x02\x02\x08\xee\xfb\x03\x12\x03-\x18C\nJ\n\x04\x04\x03\x02\x03\
    \x12\x03/\x02!\x1a=\x20the\x20header\x20used\x20to\x20update\x20the\x20c\
    lient\x20if\x20the\x20proposal\x20passes\n\n\r\n\x05\x04\x03\x02\x03\x04\
    \x12\x04/\x02-E\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03/\x02\x15\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03/\x16\x1c\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03/\x1f\x20\n\x9b\x04\n\x02\x04\x04\x12\x04;\0C\x01\x1a\x8e\
    \x04\x20Height\x20is\x20a\x20monotonically\x20increasing\x20data\x20type\
    \n\x20that\x20can\x20be\x20compared\x20against\x20another\x20Height\x20f\
    or\x20the\x20purposes\x20of\x20updating\x20and\n\x20freezing\x20clients\
    \n\n\x20Normally\x20the\x20RevisionHeight\x20is\x20incremented\x20at\x20\
    each\x20height\x20while\x20keeping\x20RevisionNumber\n\x20the\x20same.\
    \x20However\x20some\x20consensus\x20algorithms\x20may\x20choose\x20to\
    \x20reset\x20the\n\x20height\x20in\x20certain\x20conditions\x20e.g.\x20h\
    ard\x20forks,\x20state-machine\x20breaking\x20changes\n\x20In\x20these\
    \x20cases,\x20the\x20RevisionNumber\x20is\x20incremented\x20so\x20that\
    \x20height\x20continues\x20to\n\x20be\x20monitonically\x20increasing\x20\
    even\x20as\x20the\x20RevisionHeight\x20gets\x20reset\n\n\n\n\x03\x04\x04\
    \x01\x12\x03;\x08\x0e\n\n\n\x03\x04\x04\x07\x12\x03<\x02.\n\r\n\x06\x04\
    \x04\x07\x81\xf4\x03\x12\x03<\x02.\n\n\n\x03\x04\x04\x07\x12\x03=\x02.\n\
    \r\n\x06\x04\x04\x07\x83\xf4\x03\x12\x03=\x02.\n;\n\x04\x04\x04\x02\0\
    \x12\x03@\x02Q\x1a.\x20the\x20revision\x20that\x20the\x20client\x20is\
    \x20currently\x20on\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04@\x02=.\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03@\t\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03@\x1b\x1c\n\x0c\n\
    \x05\x04\x04\x02\0\x08\x12\x03@\x1dP\n\x0f\n\x08\x04\x04\x02\0\x08\xee\
    \xfb\x03\x12\x03@\x1eO\n3\n\x04\x04\x04\x02\x01\x12\x03B\x02Q\x1a&\x20th\
    e\x20height\x20within\x20the\x20given\x20revision\n\n\r\n\x05\x04\x04\
    \x02\x01\x04\x12\x04B\x02@Q\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03B\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03B\t\x18\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03B\x1b\x1c\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03B\
    \x1dP\n\x0f\n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03B\x1eO\nD\n\x02\
    \x04\x05\x12\x04F\0I\x01\x1a8\x20Params\x20defines\x20the\x20set\x20of\
    \x20IBC\x20light\x20client\x20parameters.\n\n\n\n\x03\x04\x05\x01\x12\
    \x03F\x08\x0e\nN\n\x04\x04\x05\x02\0\x12\x03H\x02Z\x1aA\x20allowed_clien\
    ts\x20defines\x20the\x20list\x20of\x20allowed\x20client\x20state\x20type\
    s.\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03H\x02\n\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03H\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03H\x12!\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03H$%\n\x0c\n\x05\x04\x05\x02\0\x08\
    \x12\x03H&Y\n\x0f\n\x08\x04\x05\x02\0\x08\xee\xfb\x03\x12\x03H'Xb\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
