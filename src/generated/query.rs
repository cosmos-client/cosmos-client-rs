// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/connection/v1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionRequest {
    // message fields
    pub connection_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionRequest {
    fn default() -> &'a QueryConnectionRequest {
        <QueryConnectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionRequest {
    pub fn new() -> QueryConnectionRequest {
        ::std::default::Default::default()
    }

    // string connection_id = 1;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryConnectionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionRequest {
        QueryConnectionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &QueryConnectionRequest| { &m.connection_id },
                |m: &mut QueryConnectionRequest| { &mut m.connection_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionRequest>(
                "QueryConnectionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionRequest {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionRequest::new)
    }
}

impl ::protobuf::Clear for QueryConnectionRequest {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionResponse {
    // message fields
    pub connection: ::protobuf::SingularPtrField<super::connection::ConnectionEnd>,
    pub proof: ::std::vec::Vec<u8>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionResponse {
    fn default() -> &'a QueryConnectionResponse {
        <QueryConnectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionResponse {
    pub fn new() -> QueryConnectionResponse {
        ::std::default::Default::default()
    }

    // .ibc.core.connection.v1.ConnectionEnd connection = 1;


    pub fn get_connection(&self) -> &super::connection::ConnectionEnd {
        self.connection.as_ref().unwrap_or_else(|| <super::connection::ConnectionEnd as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection(&mut self) {
        self.connection.clear();
    }

    pub fn has_connection(&self) -> bool {
        self.connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection(&mut self, v: super::connection::ConnectionEnd) {
        self.connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection(&mut self) -> &mut super::connection::ConnectionEnd {
        if self.connection.is_none() {
            self.connection.set_default();
        }
        self.connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection(&mut self) -> super::connection::ConnectionEnd {
        self.connection.take().unwrap_or_else(|| super::connection::ConnectionEnd::new())
    }

    // bytes proof = 2;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height proof_height = 3;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }
}

impl ::protobuf::Message for QueryConnectionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.connection {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.connection.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionResponse {
        QueryConnectionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::ConnectionEnd>>(
                "connection",
                |m: &QueryConnectionResponse| { &m.connection },
                |m: &mut QueryConnectionResponse| { &mut m.connection },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &QueryConnectionResponse| { &m.proof },
                |m: &mut QueryConnectionResponse| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &QueryConnectionResponse| { &m.proof_height },
                |m: &mut QueryConnectionResponse| { &mut m.proof_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionResponse>(
                "QueryConnectionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionResponse {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionResponse::new)
    }
}

impl ::protobuf::Clear for QueryConnectionResponse {
    fn clear(&mut self) {
        self.connection.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionsRequest {
    // message fields
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageRequest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionsRequest {
    fn default() -> &'a QueryConnectionsRequest {
        <QueryConnectionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionsRequest {
    pub fn new() -> QueryConnectionsRequest {
        ::std::default::Default::default()
    }

    // .cosmos.base.query.v1beta1.PageRequest pagination = 1;


    pub fn get_pagination(&self) -> &super::pagination::PageRequest {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageRequest) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageRequest {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageRequest {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageRequest::new())
    }
}

impl ::protobuf::Message for QueryConnectionsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionsRequest {
        QueryConnectionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageRequest>>(
                "pagination",
                |m: &QueryConnectionsRequest| { &m.pagination },
                |m: &mut QueryConnectionsRequest| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionsRequest>(
                "QueryConnectionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionsRequest::new)
    }
}

impl ::protobuf::Clear for QueryConnectionsRequest {
    fn clear(&mut self) {
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionsResponse {
    // message fields
    pub connections: ::protobuf::RepeatedField<super::connection::IdentifiedConnection>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageResponse>,
    pub height: ::protobuf::SingularPtrField<super::client::Height>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionsResponse {
    fn default() -> &'a QueryConnectionsResponse {
        <QueryConnectionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionsResponse {
    pub fn new() -> QueryConnectionsResponse {
        ::std::default::Default::default()
    }

    // repeated .ibc.core.connection.v1.IdentifiedConnection connections = 1;


    pub fn get_connections(&self) -> &[super::connection::IdentifiedConnection] {
        &self.connections
    }
    pub fn clear_connections(&mut self) {
        self.connections.clear();
    }

    // Param is passed by value, moved
    pub fn set_connections(&mut self, v: ::protobuf::RepeatedField<super::connection::IdentifiedConnection>) {
        self.connections = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connections(&mut self) -> &mut ::protobuf::RepeatedField<super::connection::IdentifiedConnection> {
        &mut self.connections
    }

    // Take field
    pub fn take_connections(&mut self) -> ::protobuf::RepeatedField<super::connection::IdentifiedConnection> {
        ::std::mem::replace(&mut self.connections, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageResponse pagination = 2;


    pub fn get_pagination(&self) -> &super::pagination::PageResponse {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageResponse) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageResponse {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageResponse {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageResponse::new())
    }

    // .ibc.core.client.v1.Height height = 3;


    pub fn get_height(&self) -> &super::client::Height {
        self.height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_height(&mut self) {
        self.height.clear();
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: super::client::Height) {
        self.height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_height(&mut self) -> &mut super::client::Height {
        if self.height.is_none() {
            self.height.set_default();
        }
        self.height.as_mut().unwrap()
    }

    // Take field
    pub fn take_height(&mut self) -> super::client::Height {
        self.height.take().unwrap_or_else(|| super::client::Height::new())
    }
}

impl ::protobuf::Message for QueryConnectionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.connections {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.connections)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.height)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.connections {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.connections {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionsResponse {
        QueryConnectionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::IdentifiedConnection>>(
                "connections",
                |m: &QueryConnectionsResponse| { &m.connections },
                |m: &mut QueryConnectionsResponse| { &mut m.connections },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageResponse>>(
                "pagination",
                |m: &QueryConnectionsResponse| { &m.pagination },
                |m: &mut QueryConnectionsResponse| { &mut m.pagination },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "height",
                |m: &QueryConnectionsResponse| { &m.height },
                |m: &mut QueryConnectionsResponse| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionsResponse>(
                "QueryConnectionsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionsResponse::new)
    }
}

impl ::protobuf::Clear for QueryConnectionsResponse {
    fn clear(&mut self) {
        self.connections.clear();
        self.pagination.clear();
        self.height.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryClientConnectionsRequest {
    // message fields
    pub client_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryClientConnectionsRequest {
    fn default() -> &'a QueryClientConnectionsRequest {
        <QueryClientConnectionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryClientConnectionsRequest {
    pub fn new() -> QueryClientConnectionsRequest {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryClientConnectionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryClientConnectionsRequest {
        QueryClientConnectionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &QueryClientConnectionsRequest| { &m.client_id },
                |m: &mut QueryClientConnectionsRequest| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryClientConnectionsRequest>(
                "QueryClientConnectionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryClientConnectionsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryClientConnectionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryClientConnectionsRequest::new)
    }
}

impl ::protobuf::Clear for QueryClientConnectionsRequest {
    fn clear(&mut self) {
        self.client_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryClientConnectionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryClientConnectionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryClientConnectionsResponse {
    // message fields
    pub connection_paths: ::protobuf::RepeatedField<::std::string::String>,
    pub proof: ::std::vec::Vec<u8>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryClientConnectionsResponse {
    fn default() -> &'a QueryClientConnectionsResponse {
        <QueryClientConnectionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryClientConnectionsResponse {
    pub fn new() -> QueryClientConnectionsResponse {
        ::std::default::Default::default()
    }

    // repeated string connection_paths = 1;


    pub fn get_connection_paths(&self) -> &[::std::string::String] {
        &self.connection_paths
    }
    pub fn clear_connection_paths(&mut self) {
        self.connection_paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.connection_paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connection_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.connection_paths
    }

    // Take field
    pub fn take_connection_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.connection_paths, ::protobuf::RepeatedField::new())
    }

    // bytes proof = 2;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height proof_height = 3;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }
}

impl ::protobuf::Message for QueryClientConnectionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.connection_paths)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.connection_paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.connection_paths {
            os.write_string(1, &v)?;
        };
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryClientConnectionsResponse {
        QueryClientConnectionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_paths",
                |m: &QueryClientConnectionsResponse| { &m.connection_paths },
                |m: &mut QueryClientConnectionsResponse| { &mut m.connection_paths },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &QueryClientConnectionsResponse| { &m.proof },
                |m: &mut QueryClientConnectionsResponse| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &QueryClientConnectionsResponse| { &m.proof_height },
                |m: &mut QueryClientConnectionsResponse| { &mut m.proof_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryClientConnectionsResponse>(
                "QueryClientConnectionsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryClientConnectionsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryClientConnectionsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryClientConnectionsResponse::new)
    }
}

impl ::protobuf::Clear for QueryClientConnectionsResponse {
    fn clear(&mut self) {
        self.connection_paths.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryClientConnectionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryClientConnectionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionClientStateRequest {
    // message fields
    pub connection_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionClientStateRequest {
    fn default() -> &'a QueryConnectionClientStateRequest {
        <QueryConnectionClientStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionClientStateRequest {
    pub fn new() -> QueryConnectionClientStateRequest {
        ::std::default::Default::default()
    }

    // string connection_id = 1;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryConnectionClientStateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionClientStateRequest {
        QueryConnectionClientStateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &QueryConnectionClientStateRequest| { &m.connection_id },
                |m: &mut QueryConnectionClientStateRequest| { &mut m.connection_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionClientStateRequest>(
                "QueryConnectionClientStateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionClientStateRequest {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionClientStateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionClientStateRequest::new)
    }
}

impl ::protobuf::Clear for QueryConnectionClientStateRequest {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionClientStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionClientStateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionClientStateResponse {
    // message fields
    pub identified_client_state: ::protobuf::SingularPtrField<super::client::IdentifiedClientState>,
    pub proof: ::std::vec::Vec<u8>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionClientStateResponse {
    fn default() -> &'a QueryConnectionClientStateResponse {
        <QueryConnectionClientStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionClientStateResponse {
    pub fn new() -> QueryConnectionClientStateResponse {
        ::std::default::Default::default()
    }

    // .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1;


    pub fn get_identified_client_state(&self) -> &super::client::IdentifiedClientState {
        self.identified_client_state.as_ref().unwrap_or_else(|| <super::client::IdentifiedClientState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_identified_client_state(&mut self) {
        self.identified_client_state.clear();
    }

    pub fn has_identified_client_state(&self) -> bool {
        self.identified_client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identified_client_state(&mut self, v: super::client::IdentifiedClientState) {
        self.identified_client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identified_client_state(&mut self) -> &mut super::client::IdentifiedClientState {
        if self.identified_client_state.is_none() {
            self.identified_client_state.set_default();
        }
        self.identified_client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_identified_client_state(&mut self) -> super::client::IdentifiedClientState {
        self.identified_client_state.take().unwrap_or_else(|| super::client::IdentifiedClientState::new())
    }

    // bytes proof = 2;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height proof_height = 3;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }
}

impl ::protobuf::Message for QueryConnectionClientStateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.identified_client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.identified_client_state)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identified_client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identified_client_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionClientStateResponse {
        QueryConnectionClientStateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::IdentifiedClientState>>(
                "identified_client_state",
                |m: &QueryConnectionClientStateResponse| { &m.identified_client_state },
                |m: &mut QueryConnectionClientStateResponse| { &mut m.identified_client_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &QueryConnectionClientStateResponse| { &m.proof },
                |m: &mut QueryConnectionClientStateResponse| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &QueryConnectionClientStateResponse| { &m.proof_height },
                |m: &mut QueryConnectionClientStateResponse| { &mut m.proof_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionClientStateResponse>(
                "QueryConnectionClientStateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionClientStateResponse {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionClientStateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionClientStateResponse::new)
    }
}

impl ::protobuf::Clear for QueryConnectionClientStateResponse {
    fn clear(&mut self) {
        self.identified_client_state.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionClientStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionClientStateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionConsensusStateRequest {
    // message fields
    pub connection_id: ::std::string::String,
    pub revision_number: u64,
    pub revision_height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionConsensusStateRequest {
    fn default() -> &'a QueryConnectionConsensusStateRequest {
        <QueryConnectionConsensusStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionConsensusStateRequest {
    pub fn new() -> QueryConnectionConsensusStateRequest {
        ::std::default::Default::default()
    }

    // string connection_id = 1;


    pub fn get_connection_id(&self) -> &str {
        &self.connection_id
    }
    pub fn clear_connection_id(&mut self) {
        self.connection_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_id(&mut self, v: ::std::string::String) {
        self.connection_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_id(&mut self) -> &mut ::std::string::String {
        &mut self.connection_id
    }

    // Take field
    pub fn take_connection_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_id, ::std::string::String::new())
    }

    // uint64 revision_number = 2;


    pub fn get_revision_number(&self) -> u64 {
        self.revision_number
    }
    pub fn clear_revision_number(&mut self) {
        self.revision_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_number(&mut self, v: u64) {
        self.revision_number = v;
    }

    // uint64 revision_height = 3;


    pub fn get_revision_height(&self) -> u64 {
        self.revision_height
    }
    pub fn clear_revision_height(&mut self) {
        self.revision_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision_height(&mut self, v: u64) {
        self.revision_height = v;
    }
}

impl ::protobuf::Message for QueryConnectionConsensusStateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connection_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.connection_id);
        }
        if self.revision_number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.revision_height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.revision_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.connection_id.is_empty() {
            os.write_string(1, &self.connection_id)?;
        }
        if self.revision_number != 0 {
            os.write_uint64(2, self.revision_number)?;
        }
        if self.revision_height != 0 {
            os.write_uint64(3, self.revision_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionConsensusStateRequest {
        QueryConnectionConsensusStateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_id",
                |m: &QueryConnectionConsensusStateRequest| { &m.connection_id },
                |m: &mut QueryConnectionConsensusStateRequest| { &mut m.connection_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_number",
                |m: &QueryConnectionConsensusStateRequest| { &m.revision_number },
                |m: &mut QueryConnectionConsensusStateRequest| { &mut m.revision_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision_height",
                |m: &QueryConnectionConsensusStateRequest| { &m.revision_height },
                |m: &mut QueryConnectionConsensusStateRequest| { &mut m.revision_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionConsensusStateRequest>(
                "QueryConnectionConsensusStateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionConsensusStateRequest {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionConsensusStateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionConsensusStateRequest::new)
    }
}

impl ::protobuf::Clear for QueryConnectionConsensusStateRequest {
    fn clear(&mut self) {
        self.connection_id.clear();
        self.revision_number = 0;
        self.revision_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionConsensusStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionConsensusStateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryConnectionConsensusStateResponse {
    // message fields
    pub consensus_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub client_id: ::std::string::String,
    pub proof: ::std::vec::Vec<u8>,
    pub proof_height: ::protobuf::SingularPtrField<super::client::Height>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryConnectionConsensusStateResponse {
    fn default() -> &'a QueryConnectionConsensusStateResponse {
        <QueryConnectionConsensusStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryConnectionConsensusStateResponse {
    pub fn new() -> QueryConnectionConsensusStateResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any consensus_state = 1;


    pub fn get_consensus_state(&self) -> &::protobuf::well_known_types::Any {
        self.consensus_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_state(&mut self) {
        self.consensus_state.clear();
    }

    pub fn has_consensus_state(&self) -> bool {
        self.consensus_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.consensus_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.consensus_state.is_none() {
            self.consensus_state.set_default();
        }
        self.consensus_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.consensus_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string client_id = 2;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // bytes proof = 3;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height proof_height = 4;


    pub fn get_proof_height(&self) -> &super::client::Height {
        self.proof_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof_height(&mut self) {
        self.proof_height.clear();
    }

    pub fn has_proof_height(&self) -> bool {
        self.proof_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_height(&mut self, v: super::client::Height) {
        self.proof_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_height(&mut self) -> &mut super::client::Height {
        if self.proof_height.is_none() {
            self.proof_height.set_default();
        }
        self.proof_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_height(&mut self) -> super::client::Height {
        self.proof_height.take().unwrap_or_else(|| super::client::Height::new())
    }
}

impl ::protobuf::Message for QueryConnectionConsensusStateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_state)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof_height)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.client_id);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.proof);
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.consensus_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.client_id.is_empty() {
            os.write_string(2, &self.client_id)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(3, &self.proof)?;
        }
        if let Some(ref v) = self.proof_height.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryConnectionConsensusStateResponse {
        QueryConnectionConsensusStateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "consensus_state",
                |m: &QueryConnectionConsensusStateResponse| { &m.consensus_state },
                |m: &mut QueryConnectionConsensusStateResponse| { &mut m.consensus_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &QueryConnectionConsensusStateResponse| { &m.client_id },
                |m: &mut QueryConnectionConsensusStateResponse| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &QueryConnectionConsensusStateResponse| { &m.proof },
                |m: &mut QueryConnectionConsensusStateResponse| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "proof_height",
                |m: &QueryConnectionConsensusStateResponse| { &m.proof_height },
                |m: &mut QueryConnectionConsensusStateResponse| { &mut m.proof_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryConnectionConsensusStateResponse>(
                "QueryConnectionConsensusStateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryConnectionConsensusStateResponse {
        static instance: ::protobuf::rt::LazyV2<QueryConnectionConsensusStateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryConnectionConsensusStateResponse::new)
    }
}

impl ::protobuf::Clear for QueryConnectionConsensusStateResponse {
    fn clear(&mut self) {
        self.consensus_state.clear();
        self.client_id.clear();
        self.proof.clear();
        self.proof_height.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryConnectionConsensusStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryConnectionConsensusStateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"ibc/core/connection/v1/query.proto\x12\x16ibc.core.connection.v1\x1a\
    \x14gogoproto/gogo.proto\x1a*cosmos/base/query/v1beta1/pagination.proto\
    \x1a\x1fibc/core/client/v1/client.proto\x1a'ibc/core/connection/v1/conne\
    ction.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x19google/protobuf/a\
    ny.proto\"=\n\x16QueryConnectionRequest\x12#\n\rconnection_id\x18\x01\
    \x20\x01(\tR\x0cconnectionId\"\xbb\x01\n\x17QueryConnectionResponse\x12E\
    \n\nconnection\x18\x01\x20\x01(\x0b2%.ibc.core.connection.v1.ConnectionE\
    ndR\nconnection\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\x05proof\x12C\n\
    \x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\
    \x0bproofHeightB\x04\xc8\xde\x1f\0\"a\n\x17QueryConnectionsRequest\x12F\
    \n\npagination\x18\x01\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequ\
    estR\npagination\"\xed\x01\n\x18QueryConnectionsResponse\x12N\n\x0bconne\
    ctions\x18\x01\x20\x03(\x0b2,.ibc.core.connection.v1.IdentifiedConnectio\
    nR\x0bconnections\x12G\n\npagination\x18\x02\x20\x01(\x0b2'.cosmos.base.\
    query.v1beta1.PageResponseR\npagination\x128\n\x06height\x18\x03\x20\x01\
    (\x0b2\x1a.ibc.core.client.v1.HeightR\x06heightB\x04\xc8\xde\x1f\0\"<\n\
    \x1dQueryClientConnectionsRequest\x12\x1b\n\tclient_id\x18\x01\x20\x01(\
    \tR\x08clientId\"\xa6\x01\n\x1eQueryClientConnectionsResponse\x12)\n\x10\
    connection_paths\x18\x01\x20\x03(\tR\x0fconnectionPaths\x12\x14\n\x05pro\
    of\x18\x02\x20\x01(\x0cR\x05proof\x12C\n\x0cproof_height\x18\x03\x20\x01\
    (\x0b2\x1a.ibc.core.client.v1.HeightR\x0bproofHeightB\x04\xc8\xde\x1f\0\
    \"b\n!QueryConnectionClientStateRequest\x12=\n\rconnection_id\x18\x01\
    \x20\x01(\tR\x0cconnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\
    \"\xe2\x01\n\"QueryConnectionClientStateResponse\x12a\n\x17identified_cl\
    ient_state\x18\x01\x20\x01(\x0b2).ibc.core.client.v1.IdentifiedClientSta\
    teR\x15identifiedClientState\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\
    \x05proof\x12C\n\x0cproof_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.clie\
    nt.v1.HeightR\x0bproofHeightB\x04\xc8\xde\x1f\0\"\xb7\x01\n$QueryConnect\
    ionConsensusStateRequest\x12=\n\rconnection_id\x18\x01\x20\x01(\tR\x0cco\
    nnectionIdB\x18\xf2\xde\x1f\x14yaml:\"connection_id\"\x12'\n\x0frevision\
    _number\x18\x02\x20\x01(\x04R\x0erevisionNumber\x12'\n\x0frevision_heigh\
    t\x18\x03\x20\x01(\x04R\x0erevisionHeight\"\xde\x01\n%QueryConnectionCon\
    sensusStateResponse\x12=\n\x0fconsensus_state\x18\x01\x20\x01(\x0b2\x14.\
    google.protobuf.AnyR\x0econsensusState\x12\x1b\n\tclient_id\x18\x02\x20\
    \x01(\tR\x08clientId\x12\x14\n\x05proof\x18\x03\x20\x01(\x0cR\x05proof\
    \x12C\n\x0cproof_height\x18\x04\x20\x01(\x0b2\x1a.ibc.core.client.v1.Hei\
    ghtR\x0bproofHeightB\x04\xc8\xde\x1f\02\xa9\x08\n\x05Query\x12\xaf\x01\n\
    \nConnection\x12..ibc.core.connection.v1.QueryConnectionRequest\x1a/.ibc\
    .core.connection.v1.QueryConnectionResponse\"@\x82\xd3\xe4\x93\x02:\x128\
    /ibc/core/connection/v1beta1/connections/{connection_id}\x12\xa2\x01\n\
    \x0bConnections\x12/.ibc.core.connection.v1.QueryConnectionsRequest\x1a0\
    .ibc.core.connection.v1.QueryConnectionsResponse\"0\x82\xd3\xe4\x93\x02*\
    \x12(/ibc/core/connection/v1beta1/connections\x12\xc7\x01\n\x11ClientCon\
    nections\x125.ibc.core.connection.v1.QueryClientConnectionsRequest\x1a6.\
    ibc.core.connection.v1.QueryClientConnectionsResponse\"C\x82\xd3\xe4\x93\
    \x02=\x12;/ibc/core/connection/v1beta1/client_connections/{client_id}\
    \x12\xdd\x01\n\x15ConnectionClientState\x129.ibc.core.connection.v1.Quer\
    yConnectionClientStateRequest\x1a:.ibc.core.connection.v1.QueryConnectio\
    nClientStateResponse\"M\x82\xd3\xe4\x93\x02G\x12E/ibc/core/connection/v1\
    beta1/connections/{connection_id}/client_state\x12\x9e\x02\n\x18Connecti\
    onConsensusState\x12<.ibc.core.connection.v1.QueryConnectionConsensusSta\
    teRequest\x1a=.ibc.core.connection.v1.QueryConnectionConsensusStateRespo\
    nse\"\x84\x01\x82\xd3\xe4\x93\x02~\x12|/ibc/core/connection/v1beta1/conn\
    ections/{connection_id}/consensus_state/revision/{revision_number}/heigh\
    t/{revision_height}B=Z;github.com/cosmos/cosmos-sdk/x/ibc/core/03-connec\
    tion/typesJ\xc1&\n\x07\x12\x05\0\0\x88\x01\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x1e\n\t\n\x02\x03\0\x12\x03\x03\
    \x07\x1d\n\t\n\x02\x03\x01\x12\x03\x04\x073\n\t\n\x02\x03\x02\x12\x03\
    \x05\x07(\n\t\n\x02\x03\x03\x12\x03\x06\x070\n\t\n\x02\x03\x04\x12\x03\
    \x07\x07%\n\t\n\x02\x03\x05\x12\x03\x08\x07\"\n\x08\n\x01\x08\x12\x03\n\
    \0R\n\t\n\x02\x08\x0b\x12\x03\n\0R\n=\n\x02\x06\0\x12\x04\r\0*\x01\x1a1\
    \x20Query\x20provides\x20defines\x20the\x20gRPC\x20querier\x20service\n\
    \n\n\n\x03\x06\0\x01\x12\x03\r\x08\r\n9\n\x04\x06\0\x02\0\x12\x04\x0f\
    \x02\x11\x03\x1a+\x20Connection\x20queries\x20an\x20IBC\x20connection\
    \x20end.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x06\x10\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x0f\x11'\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x0f2I\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x10\x04^\n\x11\n\n\x06\0\x02\
    \0\x04\xb0\xca\xbc\"\x02\x12\x03\x10\x04^\nG\n\x04\x06\0\x02\x01\x12\x04\
    \x14\x02\x16\x03\x1a9\x20Connections\x20queries\x20all\x20the\x20IBC\x20\
    connections\x20of\x20a\x20chain.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \x14\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x14\x12)\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03\x144L\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03\
    \x15\x04N\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\x12\x03\x15\x04N\
    \n_\n\x04\x06\0\x02\x02\x12\x04\x1a\x02\x1c\x03\x1aQ\x20ClientConnection\
    s\x20queries\x20the\x20connection\x20paths\x20associated\x20with\x20a\
    \x20client\n\x20state.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1a\x06\
    \x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1a\x185\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\x1a@^\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03\x1b\x04\
    a\n\x11\n\n\x06\0\x02\x02\x04\xb0\xca\xbc\"\x02\x12\x03\x1b\x04a\n_\n\
    \x04\x06\0\x02\x03\x12\x04\x20\x02\"\x03\x1aQ\x20ConnectionClientState\
    \x20queries\x20the\x20client\x20state\x20associated\x20with\x20the\n\x20\
    connection.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x20\x06\x1b\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x03\x20\x1c=\n\x0c\n\x05\x06\0\x02\x03\x03\
    \x12\x03\x20Hj\n\x0c\n\x05\x06\0\x02\x03\x04\x12\x03!\x04k\n\x11\n\n\x06\
    \0\x02\x03\x04\xb0\xca\xbc\"\x02\x12\x03!\x04k\ne\n\x04\x06\0\x02\x04\
    \x12\x04&\x02)\x03\x1aW\x20ConnectionConsensusState\x20queries\x20the\
    \x20consensus\x20state\x20associated\x20with\x20the\n\x20connection.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03&\x06\x1e\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03&\x1fC\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03&Ns\n\r\n\x05\
    \x06\0\x02\x04\x04\x12\x04'\x04(Y\n\x12\n\n\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x02\x12\x04'\x04(Y\n]\n\x02\x04\0\x12\x04.\01\x01\x1aQ\x20QueryCo\
    nnectionRequest\x20is\x20the\x20request\x20type\x20for\x20the\x20Query/C\
    onnection\x20RPC\n\x20method\n\n\n\n\x03\x04\0\x01\x12\x03.\x08\x1e\n+\n\
    \x04\x04\0\x02\0\x12\x030\x02\x1b\x1a\x1e\x20connection\x20unique\x20ide\
    ntifier\n\n\r\n\x05\x04\0\x02\0\x04\x12\x040\x02.\x20\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x030\t\x16\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x030\x19\x1a\n\xc5\x01\n\x02\x04\x01\x12\
    \x046\0=\x01\x1a\xb8\x01\x20QueryConnectionResponse\x20is\x20the\x20resp\
    onse\x20type\x20for\x20the\x20Query/Connection\x20RPC\n\x20method.\x20Be\
    sides\x20the\x20connection\x20end,\x20it\x20includes\x20a\x20proof\x20an\
    d\x20the\x20height\x20from\n\x20which\x20the\x20proof\x20was\x20retrieve\
    d.\n\n\n\n\x03\x04\x01\x01\x12\x036\x08\x1f\n@\n\x04\x04\x01\x02\0\x12\
    \x038\x026\x1a3\x20connection\x20associated\x20with\x20the\x20request\
    \x20identifier\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x048\x026!\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x038\x02&\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x038'\
    1\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03845\n(\n\x04\x04\x01\x02\x01\x12\
    \x03:\x02\x12\x1a\x1b\x20merkle\x20proof\x20of\x20existence\n\n\r\n\x05\
    \x04\x01\x02\x01\x04\x12\x04:\x0286\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03:\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03:\x08\r\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03:\x10\x11\n6\n\x04\x04\x01\x02\x02\x12\x03<\
    \x02L\x1a)\x20height\x20at\x20which\x20the\x20proof\x20was\x20retrieved\
    \n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04<\x02:\x12\n\x0c\n\x05\x04\x01\
    \x02\x02\x06\x12\x03<\x02\x1b\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03<\
    \x1c(\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03<+,\n\x0c\n\x05\x04\x01\x02\
    \x02\x08\x12\x03<-K\n\x0f\n\x08\x04\x01\x02\x02\x08\xe9\xfb\x03\x12\x03<\
    .J\n_\n\x02\x04\x02\x12\x04A\0C\x01\x1aS\x20QueryConnectionsRequest\x20i\
    s\x20the\x20request\x20type\x20for\x20the\x20Query/Connections\x20RPC\n\
    \x20method\n\n\n\n\x03\x04\x02\x01\x12\x03A\x08\x1f\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03B\x027\n\r\n\x05\x04\x02\x02\0\x04\x12\x04B\x02A!\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03B\x02'\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03B(2\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03B56\nb\n\x02\x04\x03\x12\
    \x04G\0N\x01\x1aV\x20QueryConnectionsResponse\x20is\x20the\x20response\
    \x20type\x20for\x20the\x20Query/Connections\x20RPC\n\x20method.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03G\x08\x20\n7\n\x04\x04\x03\x02\0\x12\x03I\x02G\
    \x1a*\x20list\x20of\x20stored\x20connections\x20of\x20the\x20chain.\n\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03I\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x06\x12\x03I\x0b6\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03I7B\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03IEF\n\"\n\x04\x04\x03\x02\x01\x12\x03K\x028\
    \x1a\x15\x20pagination\x20response\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\
    \x04K\x02IG\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03K\x02(\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03K)3\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03K\
    67\n!\n\x04\x04\x03\x02\x02\x12\x03M\x02F\x1a\x14\x20query\x20block\x20h\
    eight\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04M\x02K8\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x03M\x02\x1b\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03M\
    \x1c\"\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03M%&\n\x0c\n\x05\x04\x03\
    \x02\x02\x08\x12\x03M'E\n\x0f\n\x08\x04\x03\x02\x02\x08\xe9\xfb\x03\x12\
    \x03M(D\nk\n\x02\x04\x04\x12\x04R\0U\x01\x1a_\x20QueryClientConnectionsR\
    equest\x20is\x20the\x20request\x20type\x20for\x20the\n\x20Query/ClientCo\
    nnections\x20RPC\x20method\n\n\n\n\x03\x04\x04\x01\x12\x03R\x08%\n=\n\
    \x04\x04\x04\x02\0\x12\x03T\x02\x17\x1a0\x20client\x20identifier\x20asso\
    ciated\x20with\x20a\x20connection\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04T\
    \x02R'\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03T\t\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03T\x15\
    \x16\nm\n\x02\x04\x05\x12\x04Y\0`\x01\x1aa\x20QueryClientConnectionsResp\
    onse\x20is\x20the\x20response\x20type\x20for\x20the\n\x20Query/ClientCon\
    nections\x20RPC\x20method\n\n\n\n\x03\x04\x05\x01\x12\x03Y\x08&\nJ\n\x04\
    \x04\x05\x02\0\x12\x03[\x02'\x1a=\x20slice\x20of\x20all\x20the\x20connec\
    tion\x20paths\x20associated\x20with\x20a\x20client.\n\n\x0c\n\x05\x04\
    \x05\x02\0\x04\x12\x03[\x02\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03[\x0b\
    \x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03[\x12\"\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03[%&\n(\n\x04\x04\x05\x02\x01\x12\x03]\x02\x12\x1a\x1b\
    \x20merkle\x20proof\x20of\x20existence\n\n\r\n\x05\x04\x05\x02\x01\x04\
    \x12\x04]\x02['\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03]\x02\x07\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03]\x08\r\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x03]\x10\x11\n6\n\x04\x04\x05\x02\x02\x12\x03_\x02L\x1a)\x20height\
    \x20at\x20which\x20the\x20proof\x20was\x20generated\n\n\r\n\x05\x04\x05\
    \x02\x02\x04\x12\x04_\x02]\x12\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03_\
    \x02\x1b\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03_\x1c(\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x03_+,\n\x0c\n\x05\x04\x05\x02\x02\x08\x12\x03_-K\n\
    \x0f\n\x08\x04\x05\x02\x02\x08\xe9\xfb\x03\x12\x03_.J\ns\n\x02\x04\x06\
    \x12\x04d\0g\x01\x1ag\x20QueryConnectionClientStateRequest\x20is\x20the\
    \x20request\x20type\x20for\x20the\n\x20Query/ConnectionClientState\x20RP\
    C\x20method\n\n\n\n\x03\x04\x06\x01\x12\x03d\x08)\n$\n\x04\x04\x06\x02\0\
    \x12\x03f\x02M\x1a\x17\x20connection\x20identifier\n\n\r\n\x05\x04\x06\
    \x02\0\x04\x12\x04f\x02d+\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03f\x02\x08\
    \n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03f\t\x16\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03f\x19\x1a\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03f\x1bL\n\x0f\
    \n\x08\x04\x06\x02\0\x08\xee\xfb\x03\x12\x03f\x1cK\nu\n\x02\x04\x07\x12\
    \x04k\0r\x01\x1ai\x20QueryConnectionClientStateResponse\x20is\x20the\x20\
    response\x20type\x20for\x20the\n\x20Query/ConnectionClientState\x20RPC\
    \x20method\n\n\n\n\x03\x04\x07\x01\x12\x03k\x08*\n7\n\x04\x04\x07\x02\0\
    \x12\x03m\x02G\x1a*\x20client\x20state\x20associated\x20with\x20the\x20c\
    hannel\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04m\x02k,\n\x0c\n\x05\x04\x07\
    \x02\0\x06\x12\x03m\x02*\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03m+B\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03mEF\n(\n\x04\x04\x07\x02\x01\x12\x03o\
    \x02\x12\x1a\x1b\x20merkle\x20proof\x20of\x20existence\n\n\r\n\x05\x04\
    \x07\x02\x01\x04\x12\x04o\x02mG\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03o\
    \x02\x07\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03o\x08\r\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03o\x10\x11\n6\n\x04\x04\x07\x02\x02\x12\x03q\x02L\
    \x1a)\x20height\x20at\x20which\x20the\x20proof\x20was\x20retrieved\n\n\r\
    \n\x05\x04\x07\x02\x02\x04\x12\x04q\x02o\x12\n\x0c\n\x05\x04\x07\x02\x02\
    \x06\x12\x03q\x02\x1b\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03q\x1c(\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x03q+,\n\x0c\n\x05\x04\x07\x02\x02\
    \x08\x12\x03q-K\n\x0f\n\x08\x04\x07\x02\x02\x08\xe9\xfb\x03\x12\x03q.J\n\
    y\n\x02\x04\x08\x12\x04v\0{\x01\x1am\x20QueryConnectionConsensusStateReq\
    uest\x20is\x20the\x20request\x20type\x20for\x20the\n\x20Query/Connection\
    ConsensusState\x20RPC\x20method\n\n\n\n\x03\x04\x08\x01\x12\x03v\x08,\n$\
    \n\x04\x04\x08\x02\0\x12\x03x\x02O\x1a\x17\x20connection\x20identifier\n\
    \n\r\n\x05\x04\x08\x02\0\x04\x12\x04x\x02v.\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03x\t\x16\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03x\x1b\x1c\n\x0c\n\x05\x04\x08\x02\0\x08\
    \x12\x03x\x1dN\n\x0f\n\x08\x04\x08\x02\0\x08\xee\xfb\x03\x12\x03x\x1eM\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x03y\x02\x1d\n\r\n\x05\x04\x08\x02\x01\
    \x04\x12\x04y\x02xO\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03y\x02\x08\n\
    \x0c\n\x05\x04\x08\x02\x01\x01\x12\x03y\t\x18\n\x0c\n\x05\x04\x08\x02\
    \x01\x03\x12\x03y\x1b\x1c\n\x0b\n\x04\x04\x08\x02\x02\x12\x03z\x02\x1d\n\
    \r\n\x05\x04\x08\x02\x02\x04\x12\x04z\x02y\x1d\n\x0c\n\x05\x04\x08\x02\
    \x02\x05\x12\x03z\x02\x08\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03z\t\x18\
    \n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03z\x1b\x1c\n|\n\x02\x04\t\x12\x05\
    \x7f\0\x88\x01\x01\x1ao\x20QueryConnectionConsensusStateResponse\x20is\
    \x20the\x20response\x20type\x20for\x20the\n\x20Query/ConnectionConsensus\
    State\x20RPC\x20method\n\n\n\n\x03\x04\t\x01\x12\x03\x7f\x08-\n;\n\x04\
    \x04\t\x02\0\x12\x04\x81\x01\x02*\x1a-\x20consensus\x20state\x20associat\
    ed\x20with\x20the\x20channel\n\n\x0e\n\x05\x04\t\x02\0\x04\x12\x05\x81\
    \x01\x02\x7f/\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x81\x01\x02\x15\n\r\n\
    \x05\x04\t\x02\0\x01\x12\x04\x81\x01\x16%\n\r\n\x05\x04\t\x02\0\x03\x12\
    \x04\x81\x01()\n=\n\x04\x04\t\x02\x01\x12\x04\x83\x01\x02\x17\x1a/\x20cl\
    ient\x20ID\x20associated\x20with\x20the\x20consensus\x20state\n\n\x0f\n\
    \x05\x04\t\x02\x01\x04\x12\x06\x83\x01\x02\x81\x01*\n\r\n\x05\x04\t\x02\
    \x01\x05\x12\x04\x83\x01\x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x83\
    \x01\t\x12\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x83\x01\x15\x16\n)\n\x04\
    \x04\t\x02\x02\x12\x04\x85\x01\x02\x12\x1a\x1b\x20merkle\x20proof\x20of\
    \x20existence\n\n\x0f\n\x05\x04\t\x02\x02\x04\x12\x06\x85\x01\x02\x83\
    \x01\x17\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x85\x01\x02\x07\n\r\n\x05\
    \x04\t\x02\x02\x01\x12\x04\x85\x01\x08\r\n\r\n\x05\x04\t\x02\x02\x03\x12\
    \x04\x85\x01\x10\x11\n7\n\x04\x04\t\x02\x03\x12\x04\x87\x01\x02L\x1a)\
    \x20height\x20at\x20which\x20the\x20proof\x20was\x20retrieved\n\n\x0f\n\
    \x05\x04\t\x02\x03\x04\x12\x06\x87\x01\x02\x85\x01\x12\n\r\n\x05\x04\t\
    \x02\x03\x06\x12\x04\x87\x01\x02\x1b\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\
    \x87\x01\x1c(\n\r\n\x05\x04\t\x02\x03\x03\x12\x04\x87\x01+,\n\r\n\x05\
    \x04\t\x02\x03\x08\x12\x04\x87\x01-K\n\x10\n\x08\x04\t\x02\x03\x08\xe9\
    \xfb\x03\x12\x04\x87\x01.Jb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
