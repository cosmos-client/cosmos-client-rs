// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/lightclients/solomachine/v1/solomachine.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientState {
    // message fields
    pub sequence: u64,
    pub frozen_sequence: u64,
    pub consensus_state: ::protobuf::SingularPtrField<ConsensusState>,
    pub allow_update_after_proposal: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientState {
    fn default() -> &'a ClientState {
        <ClientState as ::protobuf::Message>::default_instance()
    }
}

impl ClientState {
    pub fn new() -> ClientState {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // uint64 frozen_sequence = 2;


    pub fn get_frozen_sequence(&self) -> u64 {
        self.frozen_sequence
    }
    pub fn clear_frozen_sequence(&mut self) {
        self.frozen_sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_frozen_sequence(&mut self, v: u64) {
        self.frozen_sequence = v;
    }

    // .ibc.lightclients.solomachine.v1.ConsensusState consensus_state = 3;


    pub fn get_consensus_state(&self) -> &ConsensusState {
        self.consensus_state.as_ref().unwrap_or_else(|| <ConsensusState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_state(&mut self) {
        self.consensus_state.clear();
    }

    pub fn has_consensus_state(&self) -> bool {
        self.consensus_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_state(&mut self, v: ConsensusState) {
        self.consensus_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_state(&mut self) -> &mut ConsensusState {
        if self.consensus_state.is_none() {
            self.consensus_state.set_default();
        }
        self.consensus_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_state(&mut self) -> ConsensusState {
        self.consensus_state.take().unwrap_or_else(|| ConsensusState::new())
    }

    // bool allow_update_after_proposal = 4;


    pub fn get_allow_update_after_proposal(&self) -> bool {
        self.allow_update_after_proposal
    }
    pub fn clear_allow_update_after_proposal(&mut self) {
        self.allow_update_after_proposal = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_update_after_proposal(&mut self, v: bool) {
        self.allow_update_after_proposal = v;
    }
}

impl ::protobuf::Message for ClientState {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.frozen_sequence = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_state)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_update_after_proposal = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frozen_sequence != 0 {
            my_size += ::protobuf::rt::value_size(2, self.frozen_sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_update_after_proposal != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.frozen_sequence != 0 {
            os.write_uint64(2, self.frozen_sequence)?;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_update_after_proposal != false {
            os.write_bool(4, self.allow_update_after_proposal)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientState {
        ClientState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &ClientState| { &m.sequence },
                |m: &mut ClientState| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "frozen_sequence",
                |m: &ClientState| { &m.frozen_sequence },
                |m: &mut ClientState| { &mut m.frozen_sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConsensusState>>(
                "consensus_state",
                |m: &ClientState| { &m.consensus_state },
                |m: &mut ClientState| { &mut m.consensus_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_update_after_proposal",
                |m: &ClientState| { &m.allow_update_after_proposal },
                |m: &mut ClientState| { &mut m.allow_update_after_proposal },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientState>(
                "ClientState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientState {
        static instance: ::protobuf::rt::LazyV2<ClientState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientState::new)
    }
}

impl ::protobuf::Clear for ClientState {
    fn clear(&mut self) {
        self.sequence = 0;
        self.frozen_sequence = 0;
        self.consensus_state.clear();
        self.allow_update_after_proposal = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusState {
    // message fields
    pub public_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub diversifier: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusState {
    fn default() -> &'a ConsensusState {
        <ConsensusState as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusState {
    pub fn new() -> ConsensusState {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any public_key = 1;


    pub fn get_public_key(&self) -> &::protobuf::well_known_types::Any {
        self.public_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.public_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string diversifier = 2;


    pub fn get_diversifier(&self) -> &str {
        &self.diversifier
    }
    pub fn clear_diversifier(&mut self) {
        self.diversifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_diversifier(&mut self, v: ::std::string::String) {
        self.diversifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diversifier(&mut self) -> &mut ::std::string::String {
        &mut self.diversifier
    }

    // Take field
    pub fn take_diversifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.diversifier, ::std::string::String::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for ConsensusState {
    fn is_initialized(&self) -> bool {
        for v in &self.public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.diversifier)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.diversifier);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.diversifier.is_empty() {
            os.write_string(2, &self.diversifier)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusState {
        ConsensusState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "public_key",
                |m: &ConsensusState| { &m.public_key },
                |m: &mut ConsensusState| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "diversifier",
                |m: &ConsensusState| { &m.diversifier },
                |m: &mut ConsensusState| { &mut m.diversifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &ConsensusState| { &m.timestamp },
                |m: &mut ConsensusState| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusState>(
                "ConsensusState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusState {
        static instance: ::protobuf::rt::LazyV2<ConsensusState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusState::new)
    }
}

impl ::protobuf::Clear for ConsensusState {
    fn clear(&mut self) {
        self.public_key.clear();
        self.diversifier.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub sequence: u64,
    pub timestamp: u64,
    pub signature: ::std::vec::Vec<u8>,
    pub new_public_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub new_diversifier: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // uint64 timestamp = 2;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // bytes signature = 3;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // .google.protobuf.Any new_public_key = 4;


    pub fn get_new_public_key(&self) -> &::protobuf::well_known_types::Any {
        self.new_public_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_new_public_key(&mut self) {
        self.new_public_key.clear();
    }

    pub fn has_new_public_key(&self) -> bool {
        self.new_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_public_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.new_public_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_public_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.new_public_key.is_none() {
            self.new_public_key.set_default();
        }
        self.new_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_public_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.new_public_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string new_diversifier = 5;


    pub fn get_new_diversifier(&self) -> &str {
        &self.new_diversifier
    }
    pub fn clear_new_diversifier(&mut self) {
        self.new_diversifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_diversifier(&mut self, v: ::std::string::String) {
        self.new_diversifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_diversifier(&mut self) -> &mut ::std::string::String {
        &mut self.new_diversifier
    }

    // Take field
    pub fn take_new_diversifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_diversifier, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.new_public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.new_public_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_diversifier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        if let Some(ref v) = self.new_public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.new_diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.new_diversifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        if let Some(ref v) = self.new_public_key.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.new_diversifier.is_empty() {
            os.write_string(5, &self.new_diversifier)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &Header| { &m.sequence },
                |m: &mut Header| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &Header| { &m.timestamp },
                |m: &mut Header| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Header| { &m.signature },
                |m: &mut Header| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "new_public_key",
                |m: &Header| { &m.new_public_key },
                |m: &mut Header| { &mut m.new_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_diversifier",
                |m: &Header| { &m.new_diversifier },
                |m: &mut Header| { &mut m.new_diversifier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.sequence = 0;
        self.timestamp = 0;
        self.signature.clear();
        self.new_public_key.clear();
        self.new_diversifier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Misbehaviour {
    // message fields
    pub client_id: ::std::string::String,
    pub sequence: u64,
    pub signature_one: ::protobuf::SingularPtrField<SignatureAndData>,
    pub signature_two: ::protobuf::SingularPtrField<SignatureAndData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Misbehaviour {
    fn default() -> &'a Misbehaviour {
        <Misbehaviour as ::protobuf::Message>::default_instance()
    }
}

impl Misbehaviour {
    pub fn new() -> Misbehaviour {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // uint64 sequence = 2;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // .ibc.lightclients.solomachine.v1.SignatureAndData signature_one = 3;


    pub fn get_signature_one(&self) -> &SignatureAndData {
        self.signature_one.as_ref().unwrap_or_else(|| <SignatureAndData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature_one(&mut self) {
        self.signature_one.clear();
    }

    pub fn has_signature_one(&self) -> bool {
        self.signature_one.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_one(&mut self, v: SignatureAndData) {
        self.signature_one = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_one(&mut self) -> &mut SignatureAndData {
        if self.signature_one.is_none() {
            self.signature_one.set_default();
        }
        self.signature_one.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_one(&mut self) -> SignatureAndData {
        self.signature_one.take().unwrap_or_else(|| SignatureAndData::new())
    }

    // .ibc.lightclients.solomachine.v1.SignatureAndData signature_two = 4;


    pub fn get_signature_two(&self) -> &SignatureAndData {
        self.signature_two.as_ref().unwrap_or_else(|| <SignatureAndData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature_two(&mut self) {
        self.signature_two.clear();
    }

    pub fn has_signature_two(&self) -> bool {
        self.signature_two.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_two(&mut self, v: SignatureAndData) {
        self.signature_two = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_two(&mut self) -> &mut SignatureAndData {
        if self.signature_two.is_none() {
            self.signature_two.set_default();
        }
        self.signature_two.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_two(&mut self) -> SignatureAndData {
        self.signature_two.take().unwrap_or_else(|| SignatureAndData::new())
    }
}

impl ::protobuf::Message for Misbehaviour {
    fn is_initialized(&self) -> bool {
        for v in &self.signature_one {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature_two {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature_one)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature_two)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.signature_one.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signature_two.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(2, self.sequence)?;
        }
        if let Some(ref v) = self.signature_one.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signature_two.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Misbehaviour {
        Misbehaviour::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &Misbehaviour| { &m.client_id },
                |m: &mut Misbehaviour| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &Misbehaviour| { &m.sequence },
                |m: &mut Misbehaviour| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignatureAndData>>(
                "signature_one",
                |m: &Misbehaviour| { &m.signature_one },
                |m: &mut Misbehaviour| { &mut m.signature_one },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignatureAndData>>(
                "signature_two",
                |m: &Misbehaviour| { &m.signature_two },
                |m: &mut Misbehaviour| { &mut m.signature_two },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Misbehaviour>(
                "Misbehaviour",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Misbehaviour {
        static instance: ::protobuf::rt::LazyV2<Misbehaviour> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Misbehaviour::new)
    }
}

impl ::protobuf::Clear for Misbehaviour {
    fn clear(&mut self) {
        self.client_id.clear();
        self.sequence = 0;
        self.signature_one.clear();
        self.signature_two.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Misbehaviour {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Misbehaviour {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignatureAndData {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    pub data_type: DataType,
    pub data: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureAndData {
    fn default() -> &'a SignatureAndData {
        <SignatureAndData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureAndData {
    pub fn new() -> SignatureAndData {
        ::std::default::Default::default()
    }

    // bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // .ibc.lightclients.solomachine.v1.DataType data_type = 2;


    pub fn get_data_type(&self) -> DataType {
        self.data_type
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: DataType) {
        self.data_type = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint64 timestamp = 4;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SignatureAndData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if self.data_type != DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.data_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if self.data_type != DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.data_type))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(4, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureAndData {
        SignatureAndData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &SignatureAndData| { &m.signature },
                |m: &mut SignatureAndData| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataType>>(
                "data_type",
                |m: &SignatureAndData| { &m.data_type },
                |m: &mut SignatureAndData| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &SignatureAndData| { &m.data },
                |m: &mut SignatureAndData| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &SignatureAndData| { &m.timestamp },
                |m: &mut SignatureAndData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignatureAndData>(
                "SignatureAndData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignatureAndData {
        static instance: ::protobuf::rt::LazyV2<SignatureAndData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureAndData::new)
    }
}

impl ::protobuf::Clear for SignatureAndData {
    fn clear(&mut self) {
        self.signature.clear();
        self.data_type = DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED;
        self.data.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignatureAndData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureAndData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimestampedSignatureData {
    // message fields
    pub signature_data: ::std::vec::Vec<u8>,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimestampedSignatureData {
    fn default() -> &'a TimestampedSignatureData {
        <TimestampedSignatureData as ::protobuf::Message>::default_instance()
    }
}

impl TimestampedSignatureData {
    pub fn new() -> TimestampedSignatureData {
        ::std::default::Default::default()
    }

    // bytes signature_data = 1;


    pub fn get_signature_data(&self) -> &[u8] {
        &self.signature_data
    }
    pub fn clear_signature_data(&mut self) {
        self.signature_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature_data
    }

    // Take field
    pub fn take_signature_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature_data, ::std::vec::Vec::new())
    }

    // uint64 timestamp = 2;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for TimestampedSignatureData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature_data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature_data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signature_data.is_empty() {
            os.write_bytes(1, &self.signature_data)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimestampedSignatureData {
        TimestampedSignatureData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature_data",
                |m: &TimestampedSignatureData| { &m.signature_data },
                |m: &mut TimestampedSignatureData| { &mut m.signature_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &TimestampedSignatureData| { &m.timestamp },
                |m: &mut TimestampedSignatureData| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimestampedSignatureData>(
                "TimestampedSignatureData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimestampedSignatureData {
        static instance: ::protobuf::rt::LazyV2<TimestampedSignatureData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimestampedSignatureData::new)
    }
}

impl ::protobuf::Clear for TimestampedSignatureData {
    fn clear(&mut self) {
        self.signature_data.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimestampedSignatureData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampedSignatureData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignBytes {
    // message fields
    pub sequence: u64,
    pub timestamp: u64,
    pub diversifier: ::std::string::String,
    pub data_type: DataType,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignBytes {
    fn default() -> &'a SignBytes {
        <SignBytes as ::protobuf::Message>::default_instance()
    }
}

impl SignBytes {
    pub fn new() -> SignBytes {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // uint64 timestamp = 2;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // string diversifier = 3;


    pub fn get_diversifier(&self) -> &str {
        &self.diversifier
    }
    pub fn clear_diversifier(&mut self) {
        self.diversifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_diversifier(&mut self, v: ::std::string::String) {
        self.diversifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diversifier(&mut self) -> &mut ::std::string::String {
        &mut self.diversifier
    }

    // Take field
    pub fn take_diversifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.diversifier, ::std::string::String::new())
    }

    // .ibc.lightclients.solomachine.v1.DataType data_type = 4;


    pub fn get_data_type(&self) -> DataType {
        self.data_type
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: DataType) {
        self.data_type = v;
    }

    // bytes data = 5;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignBytes {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.diversifier)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.diversifier);
        }
        if self.data_type != DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.data_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.diversifier.is_empty() {
            os.write_string(3, &self.diversifier)?;
        }
        if self.data_type != DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.data_type))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignBytes {
        SignBytes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &SignBytes| { &m.sequence },
                |m: &mut SignBytes| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &SignBytes| { &m.timestamp },
                |m: &mut SignBytes| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "diversifier",
                |m: &SignBytes| { &m.diversifier },
                |m: &mut SignBytes| { &mut m.diversifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataType>>(
                "data_type",
                |m: &SignBytes| { &m.data_type },
                |m: &mut SignBytes| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &SignBytes| { &m.data },
                |m: &mut SignBytes| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignBytes>(
                "SignBytes",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignBytes {
        static instance: ::protobuf::rt::LazyV2<SignBytes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignBytes::new)
    }
}

impl ::protobuf::Clear for SignBytes {
    fn clear(&mut self) {
        self.sequence = 0;
        self.timestamp = 0;
        self.diversifier.clear();
        self.data_type = DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignBytes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignBytes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeaderData {
    // message fields
    pub new_pub_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub new_diversifier: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeaderData {
    fn default() -> &'a HeaderData {
        <HeaderData as ::protobuf::Message>::default_instance()
    }
}

impl HeaderData {
    pub fn new() -> HeaderData {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any new_pub_key = 1;


    pub fn get_new_pub_key(&self) -> &::protobuf::well_known_types::Any {
        self.new_pub_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_new_pub_key(&mut self) {
        self.new_pub_key.clear();
    }

    pub fn has_new_pub_key(&self) -> bool {
        self.new_pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_pub_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.new_pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_pub_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.new_pub_key.is_none() {
            self.new_pub_key.set_default();
        }
        self.new_pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_pub_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.new_pub_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string new_diversifier = 2;


    pub fn get_new_diversifier(&self) -> &str {
        &self.new_diversifier
    }
    pub fn clear_new_diversifier(&mut self) {
        self.new_diversifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_diversifier(&mut self, v: ::std::string::String) {
        self.new_diversifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_diversifier(&mut self) -> &mut ::std::string::String {
        &mut self.new_diversifier
    }

    // Take field
    pub fn take_new_diversifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_diversifier, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HeaderData {
    fn is_initialized(&self) -> bool {
        for v in &self.new_pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.new_pub_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_diversifier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.new_pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.new_diversifier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.new_diversifier);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.new_pub_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.new_diversifier.is_empty() {
            os.write_string(2, &self.new_diversifier)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeaderData {
        HeaderData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "new_pub_key",
                |m: &HeaderData| { &m.new_pub_key },
                |m: &mut HeaderData| { &mut m.new_pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_diversifier",
                |m: &HeaderData| { &m.new_diversifier },
                |m: &mut HeaderData| { &mut m.new_diversifier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeaderData>(
                "HeaderData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HeaderData {
        static instance: ::protobuf::rt::LazyV2<HeaderData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeaderData::new)
    }
}

impl ::protobuf::Clear for HeaderData {
    fn clear(&mut self) {
        self.new_pub_key.clear();
        self.new_diversifier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeaderData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeaderData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStateData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub client_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStateData {
    fn default() -> &'a ClientStateData {
        <ClientStateData as ::protobuf::Message>::default_instance()
    }
}

impl ClientStateData {
    pub fn new() -> ClientStateData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // .google.protobuf.Any client_state = 2;


    pub fn get_client_state(&self) -> &::protobuf::well_known_types::Any {
        self.client_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_state(&mut self) {
        self.client_state.clear();
    }

    pub fn has_client_state(&self) -> bool {
        self.client_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.client_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.client_state.is_none() {
            self.client_state.set_default();
        }
        self.client_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.client_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for ClientStateData {
    fn is_initialized(&self) -> bool {
        for v in &self.client_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(ref v) = self.client_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(ref v) = self.client_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStateData {
        ClientStateData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &ClientStateData| { &m.path },
                |m: &mut ClientStateData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "client_state",
                |m: &ClientStateData| { &m.client_state },
                |m: &mut ClientStateData| { &mut m.client_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStateData>(
                "ClientStateData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStateData {
        static instance: ::protobuf::rt::LazyV2<ClientStateData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStateData::new)
    }
}

impl ::protobuf::Clear for ClientStateData {
    fn clear(&mut self) {
        self.path.clear();
        self.client_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStateData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusStateData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub consensus_state: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusStateData {
    fn default() -> &'a ConsensusStateData {
        <ConsensusStateData as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusStateData {
    pub fn new() -> ConsensusStateData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // .google.protobuf.Any consensus_state = 2;


    pub fn get_consensus_state(&self) -> &::protobuf::well_known_types::Any {
        self.consensus_state.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consensus_state(&mut self) {
        self.consensus_state.clear();
    }

    pub fn has_consensus_state(&self) -> bool {
        self.consensus_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consensus_state(&mut self, v: ::protobuf::well_known_types::Any) {
        self.consensus_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_state(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.consensus_state.is_none() {
            self.consensus_state.set_default();
        }
        self.consensus_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_consensus_state(&mut self) -> ::protobuf::well_known_types::Any {
        self.consensus_state.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for ConsensusStateData {
    fn is_initialized(&self) -> bool {
        for v in &self.consensus_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consensus_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(ref v) = self.consensus_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusStateData {
        ConsensusStateData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &ConsensusStateData| { &m.path },
                |m: &mut ConsensusStateData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "consensus_state",
                |m: &ConsensusStateData| { &m.consensus_state },
                |m: &mut ConsensusStateData| { &mut m.consensus_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusStateData>(
                "ConsensusStateData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusStateData {
        static instance: ::protobuf::rt::LazyV2<ConsensusStateData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusStateData::new)
    }
}

impl ::protobuf::Clear for ConsensusStateData {
    fn clear(&mut self) {
        self.path.clear();
        self.consensus_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusStateData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionStateData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub connection: ::protobuf::SingularPtrField<super::connection::ConnectionEnd>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionStateData {
    fn default() -> &'a ConnectionStateData {
        <ConnectionStateData as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionStateData {
    pub fn new() -> ConnectionStateData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // .ibc.core.connection.v1.ConnectionEnd connection = 2;


    pub fn get_connection(&self) -> &super::connection::ConnectionEnd {
        self.connection.as_ref().unwrap_or_else(|| <super::connection::ConnectionEnd as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection(&mut self) {
        self.connection.clear();
    }

    pub fn has_connection(&self) -> bool {
        self.connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection(&mut self, v: super::connection::ConnectionEnd) {
        self.connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection(&mut self) -> &mut super::connection::ConnectionEnd {
        if self.connection.is_none() {
            self.connection.set_default();
        }
        self.connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection(&mut self) -> super::connection::ConnectionEnd {
        self.connection.take().unwrap_or_else(|| super::connection::ConnectionEnd::new())
    }
}

impl ::protobuf::Message for ConnectionStateData {
    fn is_initialized(&self) -> bool {
        for v in &self.connection {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(ref v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(ref v) = self.connection.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionStateData {
        ConnectionStateData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &ConnectionStateData| { &m.path },
                |m: &mut ConnectionStateData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::connection::ConnectionEnd>>(
                "connection",
                |m: &ConnectionStateData| { &m.connection },
                |m: &mut ConnectionStateData| { &mut m.connection },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionStateData>(
                "ConnectionStateData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionStateData {
        static instance: ::protobuf::rt::LazyV2<ConnectionStateData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionStateData::new)
    }
}

impl ::protobuf::Clear for ConnectionStateData {
    fn clear(&mut self) {
        self.path.clear();
        self.connection.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionStateData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChannelStateData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub channel: ::protobuf::SingularPtrField<super::channel::Channel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChannelStateData {
    fn default() -> &'a ChannelStateData {
        <ChannelStateData as ::protobuf::Message>::default_instance()
    }
}

impl ChannelStateData {
    pub fn new() -> ChannelStateData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // .ibc.core.channel.v1.Channel channel = 2;


    pub fn get_channel(&self) -> &super::channel::Channel {
        self.channel.as_ref().unwrap_or_else(|| <super::channel::Channel as ::protobuf::Message>::default_instance())
    }
    pub fn clear_channel(&mut self) {
        self.channel.clear();
    }

    pub fn has_channel(&self) -> bool {
        self.channel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: super::channel::Channel) {
        self.channel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel(&mut self) -> &mut super::channel::Channel {
        if self.channel.is_none() {
            self.channel.set_default();
        }
        self.channel.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel(&mut self) -> super::channel::Channel {
        self.channel.take().unwrap_or_else(|| super::channel::Channel::new())
    }
}

impl ::protobuf::Message for ChannelStateData {
    fn is_initialized(&self) -> bool {
        for v in &self.channel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if let Some(ref v) = self.channel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if let Some(ref v) = self.channel.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChannelStateData {
        ChannelStateData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &ChannelStateData| { &m.path },
                |m: &mut ChannelStateData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::channel::Channel>>(
                "channel",
                |m: &ChannelStateData| { &m.channel },
                |m: &mut ChannelStateData| { &mut m.channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChannelStateData>(
                "ChannelStateData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChannelStateData {
        static instance: ::protobuf::rt::LazyV2<ChannelStateData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChannelStateData::new)
    }
}

impl ::protobuf::Clear for ChannelStateData {
    fn clear(&mut self) {
        self.path.clear();
        self.channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChannelStateData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChannelStateData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketCommitmentData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub commitment: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketCommitmentData {
    fn default() -> &'a PacketCommitmentData {
        <PacketCommitmentData as ::protobuf::Message>::default_instance()
    }
}

impl PacketCommitmentData {
    pub fn new() -> PacketCommitmentData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // bytes commitment = 2;


    pub fn get_commitment(&self) -> &[u8] {
        &self.commitment
    }
    pub fn clear_commitment(&mut self) {
        self.commitment.clear();
    }

    // Param is passed by value, moved
    pub fn set_commitment(&mut self, v: ::std::vec::Vec<u8>) {
        self.commitment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commitment(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.commitment
    }

    // Take field
    pub fn take_commitment(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.commitment, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PacketCommitmentData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.commitment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if !self.commitment.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.commitment);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if !self.commitment.is_empty() {
            os.write_bytes(2, &self.commitment)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketCommitmentData {
        PacketCommitmentData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &PacketCommitmentData| { &m.path },
                |m: &mut PacketCommitmentData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "commitment",
                |m: &PacketCommitmentData| { &m.commitment },
                |m: &mut PacketCommitmentData| { &mut m.commitment },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketCommitmentData>(
                "PacketCommitmentData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketCommitmentData {
        static instance: ::protobuf::rt::LazyV2<PacketCommitmentData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketCommitmentData::new)
    }
}

impl ::protobuf::Clear for PacketCommitmentData {
    fn clear(&mut self) {
        self.path.clear();
        self.commitment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketCommitmentData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketCommitmentData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketAcknowledgementData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub acknowledgement: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketAcknowledgementData {
    fn default() -> &'a PacketAcknowledgementData {
        <PacketAcknowledgementData as ::protobuf::Message>::default_instance()
    }
}

impl PacketAcknowledgementData {
    pub fn new() -> PacketAcknowledgementData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // bytes acknowledgement = 2;


    pub fn get_acknowledgement(&self) -> &[u8] {
        &self.acknowledgement
    }
    pub fn clear_acknowledgement(&mut self) {
        self.acknowledgement.clear();
    }

    // Param is passed by value, moved
    pub fn set_acknowledgement(&mut self, v: ::std::vec::Vec<u8>) {
        self.acknowledgement = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acknowledgement(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.acknowledgement
    }

    // Take field
    pub fn take_acknowledgement(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.acknowledgement, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PacketAcknowledgementData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.acknowledgement)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if !self.acknowledgement.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.acknowledgement);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if !self.acknowledgement.is_empty() {
            os.write_bytes(2, &self.acknowledgement)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketAcknowledgementData {
        PacketAcknowledgementData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &PacketAcknowledgementData| { &m.path },
                |m: &mut PacketAcknowledgementData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "acknowledgement",
                |m: &PacketAcknowledgementData| { &m.acknowledgement },
                |m: &mut PacketAcknowledgementData| { &mut m.acknowledgement },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketAcknowledgementData>(
                "PacketAcknowledgementData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketAcknowledgementData {
        static instance: ::protobuf::rt::LazyV2<PacketAcknowledgementData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketAcknowledgementData::new)
    }
}

impl ::protobuf::Clear for PacketAcknowledgementData {
    fn clear(&mut self) {
        self.path.clear();
        self.acknowledgement.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketAcknowledgementData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketAcknowledgementData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketReceiptAbsenceData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketReceiptAbsenceData {
    fn default() -> &'a PacketReceiptAbsenceData {
        <PacketReceiptAbsenceData as ::protobuf::Message>::default_instance()
    }
}

impl PacketReceiptAbsenceData {
    pub fn new() -> PacketReceiptAbsenceData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PacketReceiptAbsenceData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketReceiptAbsenceData {
        PacketReceiptAbsenceData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &PacketReceiptAbsenceData| { &m.path },
                |m: &mut PacketReceiptAbsenceData| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketReceiptAbsenceData>(
                "PacketReceiptAbsenceData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketReceiptAbsenceData {
        static instance: ::protobuf::rt::LazyV2<PacketReceiptAbsenceData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketReceiptAbsenceData::new)
    }
}

impl ::protobuf::Clear for PacketReceiptAbsenceData {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketReceiptAbsenceData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketReceiptAbsenceData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NextSequenceRecvData {
    // message fields
    pub path: ::std::vec::Vec<u8>,
    pub next_seq_recv: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NextSequenceRecvData {
    fn default() -> &'a NextSequenceRecvData {
        <NextSequenceRecvData as ::protobuf::Message>::default_instance()
    }
}

impl NextSequenceRecvData {
    pub fn new() -> NextSequenceRecvData {
        ::std::default::Default::default()
    }

    // bytes path = 1;


    pub fn get_path(&self) -> &[u8] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u8>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // uint64 next_seq_recv = 2;


    pub fn get_next_seq_recv(&self) -> u64 {
        self.next_seq_recv
    }
    pub fn clear_next_seq_recv(&mut self) {
        self.next_seq_recv = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_seq_recv(&mut self, v: u64) {
        self.next_seq_recv = v;
    }
}

impl ::protobuf::Message for NextSequenceRecvData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.next_seq_recv = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.path);
        }
        if self.next_seq_recv != 0 {
            my_size += ::protobuf::rt::value_size(2, self.next_seq_recv, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_bytes(1, &self.path)?;
        }
        if self.next_seq_recv != 0 {
            os.write_uint64(2, self.next_seq_recv)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NextSequenceRecvData {
        NextSequenceRecvData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "path",
                |m: &NextSequenceRecvData| { &m.path },
                |m: &mut NextSequenceRecvData| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "next_seq_recv",
                |m: &NextSequenceRecvData| { &m.next_seq_recv },
                |m: &mut NextSequenceRecvData| { &mut m.next_seq_recv },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NextSequenceRecvData>(
                "NextSequenceRecvData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NextSequenceRecvData {
        static instance: ::protobuf::rt::LazyV2<NextSequenceRecvData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NextSequenceRecvData::new)
    }
}

impl ::protobuf::Clear for NextSequenceRecvData {
    fn clear(&mut self) {
        self.path.clear();
        self.next_seq_recv = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NextSequenceRecvData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NextSequenceRecvData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataType {
    DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0,
    DATA_TYPE_CLIENT_STATE = 1,
    DATA_TYPE_CONSENSUS_STATE = 2,
    DATA_TYPE_CONNECTION_STATE = 3,
    DATA_TYPE_CHANNEL_STATE = 4,
    DATA_TYPE_PACKET_COMMITMENT = 5,
    DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6,
    DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7,
    DATA_TYPE_NEXT_SEQUENCE_RECV = 8,
    DATA_TYPE_HEADER = 9,
}

impl ::protobuf::ProtobufEnum for DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(DataType::DATA_TYPE_CLIENT_STATE),
            2 => ::std::option::Option::Some(DataType::DATA_TYPE_CONSENSUS_STATE),
            3 => ::std::option::Option::Some(DataType::DATA_TYPE_CONNECTION_STATE),
            4 => ::std::option::Option::Some(DataType::DATA_TYPE_CHANNEL_STATE),
            5 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_COMMITMENT),
            6 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_ACKNOWLEDGEMENT),
            7 => ::std::option::Option::Some(DataType::DATA_TYPE_PACKET_RECEIPT_ABSENCE),
            8 => ::std::option::Option::Some(DataType::DATA_TYPE_NEXT_SEQUENCE_RECV),
            9 => ::std::option::Option::Some(DataType::DATA_TYPE_HEADER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataType] = &[
            DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED,
            DataType::DATA_TYPE_CLIENT_STATE,
            DataType::DATA_TYPE_CONSENSUS_STATE,
            DataType::DATA_TYPE_CONNECTION_STATE,
            DataType::DATA_TYPE_CHANNEL_STATE,
            DataType::DATA_TYPE_PACKET_COMMITMENT,
            DataType::DATA_TYPE_PACKET_ACKNOWLEDGEMENT,
            DataType::DATA_TYPE_PACKET_RECEIPT_ABSENCE,
            DataType::DATA_TYPE_NEXT_SEQUENCE_RECV,
            DataType::DATA_TYPE_HEADER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataType>("DataType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataType {
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::DATA_TYPE_UNINITIALIZED_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n1ibc/lightclients/solomachine/v1/solomachine.proto\x12\x1fibc.lightcli\
    ents.solomachine.v1\x1a'ibc/core/connection/v1/connection.proto\x1a!ibc/\
    core/channel/v1/channel.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/\
    protobuf/any.proto\"\xd1\x02\n\x0bClientState\x12\x1a\n\x08sequence\x18\
    \x01\x20\x01(\x04R\x08sequence\x12C\n\x0ffrozen_sequence\x18\x02\x20\x01\
    (\x04R\x0efrozenSequenceB\x1a\xf2\xde\x1f\x16yaml:\"frozen_sequence\"\
    \x12t\n\x0fconsensus_state\x18\x03\x20\x01(\x0b2/.ibc.lightclients.solom\
    achine.v1.ConsensusStateR\x0econsensusStateB\x1a\xf2\xde\x1f\x16yaml:\"c\
    onsensus_state\"\x12e\n\x1ballow_update_after_proposal\x18\x04\x20\x01(\
    \x08R\x18allowUpdateAfterProposalB&\xf2\xde\x1f\"yaml:\"allow_update_aft\
    er_proposal\":\x04\x88\xa0\x1f\0\"\xa2\x01\n\x0eConsensusState\x12J\n\np\
    ublic_key\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\tpublicKeyB\x15\
    \xf2\xde\x1f\x11yaml:\"public_key\"\x12\x20\n\x0bdiversifier\x18\x02\x20\
    \x01(\tR\x0bdiversifier\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x04R\ttime\
    stamp:\x04\x88\xa0\x1f\0\"\x82\x02\n\x06Header\x12\x1a\n\x08sequence\x18\
    \x01\x20\x01(\x04R\x08sequence\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04\
    R\ttimestamp\x12\x1c\n\tsignature\x18\x03\x20\x01(\x0cR\tsignature\x12U\
    \n\x0enew_public_key\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0cn\
    ewPublicKeyB\x19\xf2\xde\x1f\x15yaml:\"new_public_key\"\x12C\n\x0fnew_di\
    versifier\x18\x05\x20\x01(\tR\x0enewDiversifierB\x1a\xf2\xde\x1f\x16yaml\
    :\"new_diversifier\":\x04\x88\xa0\x1f\0\"\xc7\x02\n\x0cMisbehaviour\x121\
    \n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\
    \"client_id\"\x12\x1a\n\x08sequence\x18\x02\x20\x01(\x04R\x08sequence\
    \x12p\n\rsignature_one\x18\x03\x20\x01(\x0b21.ibc.lightclients.solomachi\
    ne.v1.SignatureAndDataR\x0csignatureOneB\x18\xf2\xde\x1f\x14yaml:\"signa\
    ture_one\"\x12p\n\rsignature_two\x18\x04\x20\x01(\x0b21.ibc.lightclients\
    .solomachine.v1.SignatureAndDataR\x0csignatureTwoB\x18\xf2\xde\x1f\x14ya\
    ml:\"signature_two\":\x04\x88\xa0\x1f\0\"\xc6\x01\n\x10SignatureAndData\
    \x12\x1c\n\tsignature\x18\x01\x20\x01(\x0cR\tsignature\x12\\\n\tdata_typ\
    e\x18\x02\x20\x01(\x0e2).ibc.lightclients.solomachine.v1.DataTypeR\x08da\
    taTypeB\x14\xf2\xde\x1f\x10yaml:\"data_type\"\x12\x12\n\x04data\x18\x03\
    \x20\x01(\x0cR\x04data\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\x04R\ttimes\
    tamp:\x04\x88\xa0\x1f\0\"\x80\x01\n\x18TimestampedSignatureData\x12@\n\
    \x0esignature_data\x18\x01\x20\x01(\x0cR\rsignatureDataB\x19\xf2\xde\x1f\
    \x15yaml:\"signature_data\"\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\t\
    timestamp:\x04\x88\xa0\x1f\0\"\xdf\x01\n\tSignBytes\x12\x1a\n\x08sequenc\
    e\x18\x01\x20\x01(\x04R\x08sequence\x12\x1c\n\ttimestamp\x18\x02\x20\x01\
    (\x04R\ttimestamp\x12\x20\n\x0bdiversifier\x18\x03\x20\x01(\tR\x0bdivers\
    ifier\x12\\\n\tdata_type\x18\x04\x20\x01(\x0e2).ibc.lightclients.solomac\
    hine.v1.DataTypeR\x08dataTypeB\x14\xf2\xde\x1f\x10yaml:\"data_type\"\x12\
    \x12\n\x04data\x18\x05\x20\x01(\x0cR\x04data:\x04\x88\xa0\x1f\0\"\xa5\
    \x01\n\nHeaderData\x12L\n\x0bnew_pub_key\x18\x01\x20\x01(\x0b2\x14.googl\
    e.protobuf.AnyR\tnewPubKeyB\x16\xf2\xde\x1f\x12yaml:\"new_pub_key\"\x12C\
    \n\x0fnew_diversifier\x18\x02\x20\x01(\tR\x0enewDiversifierB\x1a\xf2\xde\
    \x1f\x16yaml:\"new_diversifier\":\x04\x88\xa0\x1f\0\"}\n\x0fClientStateD\
    ata\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x12P\n\x0cclient_sta\
    te\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0bclientStateB\x17\
    \xf2\xde\x1f\x13yaml:\"client_state\":\x04\x88\xa0\x1f\0\"\x89\x01\n\x12\
    ConsensusStateData\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x12Y\
    \n\x0fconsensus_state\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0e\
    consensusStateB\x1a\xf2\xde\x1f\x16yaml:\"consensus_state\":\x04\x88\xa0\
    \x1f\0\"v\n\x13ConnectionStateData\x12\x12\n\x04path\x18\x01\x20\x01(\
    \x0cR\x04path\x12E\n\nconnection\x18\x02\x20\x01(\x0b2%.ibc.core.connect\
    ion.v1.ConnectionEndR\nconnection:\x04\x88\xa0\x1f\0\"d\n\x10ChannelStat\
    eData\x12\x12\n\x04path\x18\x01\x20\x01(\x0cR\x04path\x126\n\x07channel\
    \x18\x02\x20\x01(\x0b2\x1c.ibc.core.channel.v1.ChannelR\x07channel:\x04\
    \x88\xa0\x1f\0\"J\n\x14PacketCommitmentData\x12\x12\n\x04path\x18\x01\
    \x20\x01(\x0cR\x04path\x12\x1e\n\ncommitment\x18\x02\x20\x01(\x0cR\ncomm\
    itment\"Y\n\x19PacketAcknowledgementData\x12\x12\n\x04path\x18\x01\x20\
    \x01(\x0cR\x04path\x12(\n\x0facknowledgement\x18\x02\x20\x01(\x0cR\x0fac\
    knowledgement\".\n\x18PacketReceiptAbsenceData\x12\x12\n\x04path\x18\x01\
    \x20\x01(\x0cR\x04path\"h\n\x14NextSequenceRecvData\x12\x12\n\x04path\
    \x18\x01\x20\x01(\x0cR\x04path\x12<\n\rnext_seq_recv\x18\x02\x20\x01(\
    \x04R\x0bnextSeqRecvB\x18\xf2\xde\x1f\x14yaml:\"next_seq_recv\"*\x8c\x04\
    \n\x08DataType\x128\n#DATA_TYPE_UNINITIALIZED_UNSPECIFIED\x10\0\x1a\x0f\
    \x8a\x9d\x20\x0bUNSPECIFIED\x12&\n\x16DATA_TYPE_CLIENT_STATE\x10\x01\x1a\
    \n\x8a\x9d\x20\x06CLIENT\x12,\n\x19DATA_TYPE_CONSENSUS_STATE\x10\x02\x1a\
    \r\x8a\x9d\x20\tCONSENSUS\x12.\n\x1aDATA_TYPE_CONNECTION_STATE\x10\x03\
    \x1a\x0e\x8a\x9d\x20\nCONNECTION\x12(\n\x17DATA_TYPE_CHANNEL_STATE\x10\
    \x04\x1a\x0b\x8a\x9d\x20\x07CHANNEL\x125\n\x1bDATA_TYPE_PACKET_COMMITMEN\
    T\x10\x05\x1a\x14\x8a\x9d\x20\x10PACKETCOMMITMENT\x12?\n\x20DATA_TYPE_PA\
    CKET_ACKNOWLEDGEMENT\x10\x06\x1a\x19\x8a\x9d\x20\x15PACKETACKNOWLEDGEMEN\
    T\x12>\n\x20DATA_TYPE_PACKET_RECEIPT_ABSENCE\x10\x07\x1a\x18\x8a\x9d\x20\
    \x14PACKETRECEIPTABSENCE\x126\n\x1cDATA_TYPE_NEXT_SEQUENCE_RECV\x10\x08\
    \x1a\x14\x8a\x9d\x20\x10NEXTSEQUENCERECV\x12\x20\n\x10DATA_TYPE_HEADER\
    \x10\t\x1a\n\x8a\x9d\x20\x06HEADER\x1a\x04\x88\xa3\x1e\0BGZEgithub.com/c\
    osmos/cosmos-sdk/x/ibc/light-clients/06-solomachine/typesJ\xff=\n\x07\
    \x12\x05\0\0\xb9\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\x08'\n\x08\n\x01\x08\x12\x03\x03\0\\\n\t\n\x02\x08\x0b\x12\
    \x03\x03\0\\\n\t\n\x02\x03\0\x12\x03\x05\x070\n\t\n\x02\x03\x01\x12\x03\
    \x06\x07*\n\t\n\x02\x03\x02\x12\x03\x07\x07\x1d\n\t\n\x02\x03\x03\x12\
    \x03\x08\x07\"\n}\n\x02\x04\0\x12\x04\x0c\0\x16\x01\x1aq\x20ClientState\
    \x20defines\x20a\x20solo\x20machine\x20client\x20that\x20tracks\x20the\
    \x20current\x20consensus\n\x20state\x20and\x20if\x20the\x20client\x20is\
    \x20frozen.\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x13\n\n\n\x03\x04\0\
    \x07\x12\x03\r\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\r\x02-\n2\n\
    \x04\x04\0\x02\0\x12\x03\x0f\x02\x16\x1a%\x20latest\x20sequence\x20of\
    \x20the\x20client\x20state\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0f\x02\r\
    -\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0f\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x14\x15\
    \n2\n\x04\x04\0\x02\x01\x12\x03\x11\x02Y\x1a%\x20frozen\x20sequence\x20o\
    f\x20the\x20solo\x20machine\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x11\
    \x02\x0f\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x11\x11\x20\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x11#$\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x11%X\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x11&W\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x12\x02Y\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x12\x02\x11Y\n\x0c\
    \n\x05\x04\0\x02\x02\x06\x12\x03\x12\x02\x10\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x12\x11\x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x12#$\n\
    \x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x12%X\n\x0f\n\x08\x04\0\x02\x02\x08\
    \xee\xfb\x03\x12\x03\x12&W\n\x85\x01\n\x04\x04\0\x02\x03\x12\x03\x15\x02\
    g\x1ax\x20when\x20set\x20to\x20true,\x20will\x20allow\x20governance\x20t\
    o\x20update\x20a\x20solo\x20machine\x20client.\n\x20The\x20client\x20wil\
    l\x20be\x20unfrozen\x20if\x20it\x20is\x20frozen.\n\n\r\n\x05\x04\0\x02\
    \x03\x04\x12\x04\x15\x02\x12Y\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x15\
    \x02\x06\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x15\x07\"\n\x0c\n\x05\x04\
    \0\x02\x03\x03\x12\x03\x15%&\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x15'f\
    \n\x0f\n\x08\x04\0\x02\x03\x08\xee\xfb\x03\x12\x03\x15(e\n\xae\x01\n\x02\
    \x04\x01\x12\x04\x1a\0\"\x01\x1a\xa1\x01\x20ConsensusState\x20defines\
    \x20a\x20solo\x20machine\x20consensus\x20state.\x20The\x20sequence\x20of\
    \x20a\x20consensus\x20state\n\x20is\x20contained\x20in\x20the\x20\"heigh\
    t\"\x20key\x20used\x20in\x20storing\x20the\x20consensus\x20state.\n\n\n\
    \n\x03\x04\x01\x01\x12\x03\x1a\x08\x16\n\n\n\x03\x04\x01\x07\x12\x03\x1b\
    \x02-\n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03\x1b\x02-\n-\n\x04\x04\
    \x01\x02\0\x12\x03\x1d\x02T\x1a\x20\x20public\x20key\x20of\x20the\x20sol\
    o\x20machine\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x1d\x02\x1b-\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x1d\x02\x15\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x1d\x16\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1d#$\n\x0c\n\
    \x05\x04\x01\x02\0\x08\x12\x03\x1d%S\n\x0f\n\x08\x04\x01\x02\0\x08\xee\
    \xfb\x03\x12\x03\x1d&R\n\xb4\x01\n\x04\x04\x01\x02\x01\x12\x03\x20\x02\
    \x19\x1a\xa6\x01\x20diversifier\x20allows\x20the\x20same\x20public\x20ke\
    y\x20to\x20be\x20re-used\x20across\x20different\x20solo\x20machine\x20cl\
    ients\n\x20(potentially\x20on\x20different\x20chains)\x20without\x20bein\
    g\x20considered\x20misbehaviour.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    \x20\x02\x1dT\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x20\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03\x20\t\x14\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x20\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03!\x02\x19\n\
    \r\n\x05\x04\x01\x02\x02\x04\x12\x04!\x02\x20\x19\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03!\t\
    \x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03!\x17\x18\n<\n\x02\x04\x02\
    \x12\x04%\0-\x01\x1a0\x20Header\x20defines\x20a\x20solo\x20machine\x20co\
    nsensus\x20header\n\n\n\n\x03\x04\x02\x01\x12\x03%\x08\x0e\n\n\n\x03\x04\
    \x02\x07\x12\x03&\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03&\x02-\n\
    <\n\x04\x04\x02\x02\0\x12\x03(\x02*\x1a/\x20sequence\x20to\x20update\x20\
    solo\x20machine\x20public\x20key\x20at\n\n\r\n\x05\x04\x02\x02\0\x04\x12\
    \x04(\x02&-\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03(\x16\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03(()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03)\x02*\n\r\n\x05\x04\x02\x02\
    \x01\x04\x12\x04)\x02(*\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03)\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03)\x16\x1f\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03)()\n\x0b\n\x04\x04\x02\x02\x02\x12\x03*\x02*\n\r\n\
    \x05\x04\x02\x02\x02\x04\x12\x04*\x02)*\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03*\x02\x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03*\x16\x1f\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03*()\n\x0b\n\x04\x04\x02\x02\x03\x12\
    \x03+\x02]\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04+\x02**\n\x0c\n\x05\x04\
    \x02\x02\x03\x06\x12\x03+\x02\x15\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03+\x16$\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03+()\n\x0c\n\x05\x04\
    \x02\x02\x03\x08\x12\x03+*\\\n\x0f\n\x08\x04\x02\x02\x03\x08\xee\xfb\x03\
    \x12\x03++[\n\x0b\n\x04\x04\x02\x02\x04\x12\x03,\x02^\n\r\n\x05\x04\x02\
    \x02\x04\x04\x12\x04,\x02+]\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03,\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03,\x16%\n\x0c\n\x05\x04\x02\
    \x02\x04\x03\x12\x03,()\n\x0c\n\x05\x04\x02\x02\x04\x08\x12\x03,*]\n\x0f\
    \n\x08\x04\x02\x02\x04\x08\xee\xfb\x03\x12\x03,+\\\n\x9e\x01\n\x02\x04\
    \x03\x12\x041\07\x01\x1a\x91\x01\x20Misbehaviour\x20defines\x20misbehavi\
    our\x20for\x20a\x20solo\x20machine\x20which\x20consists\n\x20of\x20a\x20\
    sequence\x20and\x20two\x20signatures\x20over\x20different\x20messages\
    \x20at\x20that\x20sequence.\n\n\n\n\x03\x04\x03\x01\x12\x031\x08\x14\n\n\
    \n\x03\x04\x03\x07\x12\x032\x02-\n\r\n\x06\x04\x03\x07\x81\xf4\x03\x12\
    \x032\x02-\n\x0b\n\x04\x04\x03\x02\0\x12\x033\x02W\n\r\n\x05\x04\x03\x02\
    \0\x04\x12\x043\x022-\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x033\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x033\x13\x1c\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x033'(\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x033)V\n\x0f\n\x08\x04\
    \x03\x02\0\x08\xee\xfb\x03\x12\x033*U\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x034\x02)\n\r\n\x05\x04\x03\x02\x01\x04\x12\x044\x023W\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x034\x13\x1b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x034'(\n\x0b\n\x04\x04\
    \x03\x02\x02\x12\x035\x02[\n\r\n\x05\x04\x03\x02\x02\x04\x12\x045\x024)\
    \n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x035\x02\x12\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x035\x13\x20\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x035'(\
    \n\x0c\n\x05\x04\x03\x02\x02\x08\x12\x035)Z\n\x0f\n\x08\x04\x03\x02\x02\
    \x08\xee\xfb\x03\x12\x035*Y\n\x0b\n\x04\x04\x03\x02\x03\x12\x036\x02[\n\
    \r\n\x05\x04\x03\x02\x03\x04\x12\x046\x025[\n\x0c\n\x05\x04\x03\x02\x03\
    \x06\x12\x036\x02\x12\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x036\x13\x20\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x036'(\n\x0c\n\x05\x04\x03\x02\x03\
    \x08\x12\x036)Z\n\x0f\n\x08\x04\x03\x02\x03\x08\xee\xfb\x03\x12\x036*Y\n\
    g\n\x02\x04\x04\x12\x04;\0A\x01\x1a[\x20SignatureAndData\x20contains\x20\
    a\x20signature\x20and\x20the\x20data\x20signed\x20over\x20to\x20create\
    \x20that\n\x20signature.\n\n\n\n\x03\x04\x04\x01\x12\x03;\x08\x18\n\n\n\
    \x03\x04\x04\x07\x12\x03<\x02-\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x03\
    <\x02-\n\x0b\n\x04\x04\x04\x02\0\x12\x03=\x02)\n\r\n\x05\x04\x04\x02\0\
    \x04\x12\x04=\x02<-\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03=\x02\x07\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03=\x0b\x14\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03='(\n\x0b\n\x04\x04\x04\x02\x01\x12\x03>\x02W\n\r\n\x05\x04\x04\
    \x02\x01\x04\x12\x04>\x02=)\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03>\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03>\x0b\x14\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03>'(\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03>)V\n\x0f\
    \n\x08\x04\x04\x02\x01\x08\xee\xfb\x03\x12\x03>*U\n\x0b\n\x04\x04\x04\
    \x02\x02\x12\x03?\x02)\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04?\x02>W\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03?\x0b\x0f\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03?'(\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03@\x02)\n\r\n\x05\x04\x04\x02\x03\x04\
    \x12\x04@\x02?)\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03@\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x03\x01\x12\x03@\x0b\x14\n\x0c\n\x05\x04\x04\x02\x03\
    \x03\x12\x03@'(\ng\n\x02\x04\x05\x12\x04E\0I\x01\x1a[\x20TimestampedSign\
    atureData\x20contains\x20the\x20signature\x20data\x20and\x20the\x20times\
    tamp\x20of\x20the\n\x20signature.\n\n\n\n\x03\x04\x05\x01\x12\x03E\x08\
    \x20\n\n\n\x03\x04\x05\x07\x12\x03F\x02-\n\r\n\x06\x04\x05\x07\x81\xf4\
    \x03\x12\x03F\x02-\n\x0b\n\x04\x04\x05\x02\0\x12\x03G\x02\\\n\r\n\x05\
    \x04\x05\x02\0\x04\x12\x04G\x02F-\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03G\
    \x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03G\t\x17\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03G'(\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03G)[\n\x0f\
    \n\x08\x04\x05\x02\0\x08\xee\xfb\x03\x12\x03G*Z\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03H\x02)\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04H\x02G\\\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03H\t\x12\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03H'(\nQ\n\x02\
    \x04\x06\x12\x04L\0V\x01\x1aE\x20SignBytes\x20defines\x20the\x20signed\
    \x20bytes\x20used\x20for\x20signature\x20verification.\n\n\n\n\x03\x04\
    \x06\x01\x12\x03L\x08\x11\n\n\n\x03\x04\x06\x07\x12\x03M\x02-\n\r\n\x06\
    \x04\x06\x07\x81\xf4\x03\x12\x03M\x02-\n\x0b\n\x04\x04\x06\x02\0\x12\x03\
    O\x02\x19\n\r\n\x05\x04\x06\x02\0\x04\x12\x04O\x02M-\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03O\t\x11\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03O\x17\x18\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03P\x02\x19\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04P\x02O\x19\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03P\t\x12\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03P\x17\x18\
    \n\x0b\n\x04\x04\x06\x02\x02\x12\x03Q\x02\x19\n\r\n\x05\x04\x06\x02\x02\
    \x04\x12\x04Q\x02P\x19\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03Q\x02\x08\
    \n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03Q\t\x14\n\x0c\n\x05\x04\x06\x02\
    \x02\x03\x12\x03Q\x17\x18\n$\n\x04\x04\x06\x02\x03\x12\x03S\x02G\x1a\x17\
    \x20type\x20of\x20the\x20data\x20used\n\n\r\n\x05\x04\x06\x02\x03\x04\
    \x12\x04S\x02Q\x19\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03S\x02\n\n\x0c\
    \n\x05\x04\x06\x02\x03\x01\x12\x03S\x0b\x14\n\x0c\n\x05\x04\x06\x02\x03\
    \x03\x12\x03S\x17\x18\n\x0c\n\x05\x04\x06\x02\x03\x08\x12\x03S\x19F\n\
    \x0f\n\x08\x04\x06\x02\x03\x08\xee\xfb\x03\x12\x03S\x1aE\n\x1d\n\x04\x04\
    \x06\x02\x04\x12\x03U\x02\x11\x1a\x10\x20marshaled\x20data\n\n\r\n\x05\
    \x04\x06\x02\x04\x04\x12\x04U\x02SG\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\
    \x03U\x02\x07\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x03U\x08\x0c\n\x0c\n\
    \x05\x04\x06\x02\x04\x03\x12\x03U\x0f\x10\n\x99\x01\n\x02\x05\0\x12\x04Z\
    \0q\x01\x1a\x8c\x01\x20DataType\x20defines\x20the\x20type\x20of\x20solo\
    \x20machine\x20proof\x20being\x20created.\x20This\x20is\x20done\x20to\
    \x20preserve\x20uniqueness\x20of\x20different\n\x20data\x20sign\x20byte\
    \x20encodings.\n\n\n\n\x03\x05\0\x01\x12\x03Z\x05\r\n\n\n\x03\x05\0\x03\
    \x12\x03[\x021\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x03[\x021\n\x1c\n\x04\
    \x05\0\x02\0\x12\x03^\x02]\x1a\x0f\x20Default\x20State\n\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03^\x02%\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03^()\n\x0c\
    \n\x05\x05\0\x02\0\x03\x12\x03^*\\\n\x0f\n\x08\x05\0\x02\0\x03\xd1\x83\
    \x04\x12\x03^+[\n6\n\x04\x05\0\x02\x01\x12\x03`\x02K\x1a)\x20Data\x20typ\
    e\x20for\x20client\x20state\x20verification\n\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03`\x02\x18\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03`\x1b\x1c\n\
    \x0c\n\x05\x05\0\x02\x01\x03\x12\x03`\x1dJ\n\x0f\n\x08\x05\0\x02\x01\x03\
    \xd1\x83\x04\x12\x03`\x1eI\n9\n\x04\x05\0\x02\x02\x12\x03b\x02Q\x1a,\x20\
    Data\x20type\x20for\x20consensus\x20state\x20verification\n\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03b\x02\x1b\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03b\x1e\x1f\n\x0c\n\x05\x05\0\x02\x02\x03\x12\x03b\x20P\n\x0f\n\x08\
    \x05\0\x02\x02\x03\xd1\x83\x04\x12\x03b!O\n:\n\x04\x05\0\x02\x03\x12\x03\
    d\x02S\x1a-\x20Data\x20type\x20for\x20connection\x20state\x20verificatio\
    n\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03d\x02\x1c\n\x0c\n\x05\x05\0\x02\
    \x03\x02\x12\x03d\x1f\x20\n\x0c\n\x05\x05\0\x02\x03\x03\x12\x03d!R\n\x0f\
    \n\x08\x05\0\x02\x03\x03\xd1\x83\x04\x12\x03d\"Q\n7\n\x04\x05\0\x02\x04\
    \x12\x03f\x02M\x1a*\x20Data\x20type\x20for\x20channel\x20state\x20verifi\
    cation\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03f\x02\x19\n\x0c\n\x05\x05\
    \0\x02\x04\x02\x12\x03f\x1c\x1d\n\x0c\n\x05\x05\0\x02\x04\x03\x12\x03f\
    \x1eL\n\x0f\n\x08\x05\0\x02\x04\x03\xd1\x83\x04\x12\x03f\x1fK\n;\n\x04\
    \x05\0\x02\x05\x12\x03h\x02Z\x1a.\x20Data\x20type\x20for\x20packet\x20co\
    mmitment\x20verification\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03h\x02\
    \x1d\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03h\x20!\n\x0c\n\x05\x05\0\x02\
    \x05\x03\x12\x03h\"Y\n\x0f\n\x08\x05\0\x02\x05\x03\xd1\x83\x04\x12\x03h#\
    X\n@\n\x04\x05\0\x02\x06\x12\x03j\x02d\x1a3\x20Data\x20type\x20for\x20pa\
    cket\x20acknowledgement\x20verification\n\n\x0c\n\x05\x05\0\x02\x06\x01\
    \x12\x03j\x02\"\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03j%&\n\x0c\n\x05\x05\
    \0\x02\x06\x03\x12\x03j'c\n\x0f\n\x08\x05\0\x02\x06\x03\xd1\x83\x04\x12\
    \x03j(b\n@\n\x04\x05\0\x02\x07\x12\x03l\x02c\x1a3\x20Data\x20type\x20for\
    \x20packet\x20receipt\x20absence\x20verification\n\n\x0c\n\x05\x05\0\x02\
    \x07\x01\x12\x03l\x02\"\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03l%&\n\x0c\n\
    \x05\x05\0\x02\x07\x03\x12\x03l'b\n\x0f\n\x08\x05\0\x02\x07\x03\xd1\x83\
    \x04\x12\x03l(a\n<\n\x04\x05\0\x02\x08\x12\x03n\x02[\x1a/\x20Data\x20typ\
    e\x20for\x20next\x20sequence\x20recv\x20verification\n\n\x0c\n\x05\x05\0\
    \x02\x08\x01\x12\x03n\x02\x1e\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03n!\"\
    \n\x0c\n\x05\x05\0\x02\x08\x03\x12\x03n#Z\n\x0f\n\x08\x05\0\x02\x08\x03\
    \xd1\x83\x04\x12\x03n$Y\n0\n\x04\x05\0\x02\t\x12\x03p\x02E\x1a#\x20Data\
    \x20type\x20for\x20header\x20verification\n\n\x0c\n\x05\x05\0\x02\t\x01\
    \x12\x03p\x02\x12\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03p\x15\x16\n\x0c\n\
    \x05\x05\0\x02\t\x03\x12\x03p\x17D\n\x0f\n\x08\x05\0\x02\t\x03\xd1\x83\
    \x04\x12\x03p\x18C\nL\n\x02\x04\x07\x12\x04t\0{\x01\x1a@\x20HeaderData\
    \x20returns\x20the\x20SignBytes\x20data\x20for\x20update\x20verification\
    .\n\n\n\n\x03\x04\x07\x01\x12\x03t\x08\x12\n\n\n\x03\x04\x07\x07\x12\x03\
    u\x02-\n\r\n\x06\x04\x07\x07\x81\xf4\x03\x12\x03u\x02-\n\x20\n\x04\x04\
    \x07\x02\0\x12\x03x\x02V\x1a\x13\x20header\x20public\x20key\n\n\r\n\x05\
    \x04\x07\x02\0\x04\x12\x04x\x02u-\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03x\
    \x02\x15\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03x\x16!\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03x$%\n\x0c\n\x05\x04\x07\x02\0\x08\x12\x03x&U\n\x0f\n\
    \x08\x04\x07\x02\0\x08\xee\xfb\x03\x12\x03x'T\n!\n\x04\x04\x07\x02\x01\
    \x12\x03z\x02Q\x1a\x14\x20header\x20diversifier\n\n\r\n\x05\x04\x07\x02\
    \x01\x04\x12\x04z\x02xV\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03z\x02\x08\
    \n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03z\t\x18\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03z\x1b\x1c\n\x0c\n\x05\x04\x07\x02\x01\x08\x12\x03z\x1dP\
    \n\x0f\n\x08\x04\x07\x02\x01\x08\xee\xfb\x03\x12\x03z\x1eO\nX\n\x02\x04\
    \x08\x12\x05~\0\x83\x01\x01\x1aK\x20ClientStateData\x20returns\x20the\
    \x20SignBytes\x20data\x20for\x20client\x20state\x20verification.\n\n\n\n\
    \x03\x04\x08\x01\x12\x03~\x08\x17\n\n\n\x03\x04\x08\x07\x12\x03\x7f\x02-\
    \n\r\n\x06\x04\x08\x07\x81\xf4\x03\x12\x03\x7f\x02-\n\x0c\n\x04\x04\x08\
    \x02\0\x12\x04\x81\x01\x02'\n\x0e\n\x05\x04\x08\x02\0\x04\x12\x05\x81\
    \x01\x02\x7f-\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x81\x01\x02\x07\n\r\n\
    \x05\x04\x08\x02\0\x01\x12\x04\x81\x01\x16\x1a\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\x81\x01%&\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\x82\x01\x02X\
    \n\x0f\n\x05\x04\x08\x02\x01\x04\x12\x06\x82\x01\x02\x81\x01'\n\r\n\x05\
    \x04\x08\x02\x01\x06\x12\x04\x82\x01\x02\x15\n\r\n\x05\x04\x08\x02\x01\
    \x01\x12\x04\x82\x01\x16\"\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x82\x01\
    %&\n\r\n\x05\x04\x08\x02\x01\x08\x12\x04\x82\x01'W\n\x10\n\x08\x04\x08\
    \x02\x01\x08\xee\xfb\x03\x12\x04\x82\x01(V\n`\n\x02\x04\t\x12\x06\x87\
    \x01\0\x8c\x01\x01\x1aR\x20ConsensusStateData\x20returns\x20the\x20SignB\
    ytes\x20data\x20for\x20consensus\x20state\n\x20verification.\n\n\x0b\n\
    \x03\x04\t\x01\x12\x04\x87\x01\x08\x1a\n\x0b\n\x03\x04\t\x07\x12\x04\x88\
    \x01\x02-\n\x0e\n\x06\x04\t\x07\x81\xf4\x03\x12\x04\x88\x01\x02-\n\x0c\n\
    \x04\x04\t\x02\0\x12\x04\x8a\x01\x02*\n\x0f\n\x05\x04\t\x02\0\x04\x12\
    \x06\x8a\x01\x02\x88\x01-\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x8a\x01\x02\
    \x07\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x8a\x01\x16\x1a\n\r\n\x05\x04\t\
    \x02\0\x03\x12\x04\x8a\x01()\n\x0c\n\x04\x04\t\x02\x01\x12\x04\x8b\x01\
    \x02^\n\x0f\n\x05\x04\t\x02\x01\x04\x12\x06\x8b\x01\x02\x8a\x01*\n\r\n\
    \x05\x04\t\x02\x01\x06\x12\x04\x8b\x01\x02\x15\n\r\n\x05\x04\t\x02\x01\
    \x01\x12\x04\x8b\x01\x16%\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x8b\x01()\
    \n\r\n\x05\x04\t\x02\x01\x08\x12\x04\x8b\x01*]\n\x10\n\x08\x04\t\x02\x01\
    \x08\xee\xfb\x03\x12\x04\x8b\x01+\\\nb\n\x02\x04\n\x12\x06\x90\x01\0\x95\
    \x01\x01\x1aT\x20ConnectionStateData\x20returns\x20the\x20SignBytes\x20d\
    ata\x20for\x20connection\x20state\n\x20verification.\n\n\x0b\n\x03\x04\n\
    \x01\x12\x04\x90\x01\x08\x1b\n\x0b\n\x03\x04\n\x07\x12\x04\x91\x01\x02-\
    \n\x0e\n\x06\x04\n\x07\x81\xf4\x03\x12\x04\x91\x01\x02-\n\x0c\n\x04\x04\
    \n\x02\0\x12\x04\x93\x01\x026\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\x93\
    \x01\x02\x91\x01-\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x93\x01\x02\x07\n\r\
    \n\x05\x04\n\x02\0\x01\x12\x04\x93\x01'+\n\r\n\x05\x04\n\x02\0\x03\x12\
    \x04\x93\x0145\n\x0c\n\x04\x04\n\x02\x01\x12\x04\x94\x01\x026\n\x0f\n\
    \x05\x04\n\x02\x01\x04\x12\x06\x94\x01\x02\x93\x016\n\r\n\x05\x04\n\x02\
    \x01\x06\x12\x04\x94\x01\x02&\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x94\
    \x01'1\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\x94\x0145\n\\\n\x02\x04\x0b\
    \x12\x06\x99\x01\0\x9e\x01\x01\x1aN\x20ChannelStateData\x20returns\x20th\
    e\x20SignBytes\x20data\x20for\x20channel\x20state\n\x20verification.\n\n\
    \x0b\n\x03\x04\x0b\x01\x12\x04\x99\x01\x08\x18\n\x0b\n\x03\x04\x0b\x07\
    \x12\x04\x9a\x01\x02-\n\x0e\n\x06\x04\x0b\x07\x81\xf4\x03\x12\x04\x9a\
    \x01\x02-\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x9c\x01\x02*\n\x0f\n\x05\x04\
    \x0b\x02\0\x04\x12\x06\x9c\x01\x02\x9a\x01-\n\r\n\x05\x04\x0b\x02\0\x05\
    \x12\x04\x9c\x01\x02\x07\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x9c\x01\x1e\
    \"\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x9c\x01()\n\x0c\n\x04\x04\x0b\x02\
    \x01\x12\x04\x9d\x01\x02*\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\x9d\
    \x01\x02\x9c\x01*\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\x9d\x01\x02\x1d\
    \n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\x9d\x01\x1e%\n\r\n\x05\x04\x0b\
    \x02\x01\x03\x12\x04\x9d\x01()\nd\n\x02\x04\x0c\x12\x06\xa2\x01\0\xa5\
    \x01\x01\x1aV\x20PacketCommitmentData\x20returns\x20the\x20SignBytes\x20\
    data\x20for\x20packet\x20commitment\n\x20verification.\n\n\x0b\n\x03\x04\
    \x0c\x01\x12\x04\xa2\x01\x08\x1c\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xa3\
    \x01\x02\x17\n\x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\xa3\x01\x02\xa2\x01\
    \x1e\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xa3\x01\x02\x07\n\r\n\x05\x04\
    \x0c\x02\0\x01\x12\x04\xa3\x01\x08\x0c\n\r\n\x05\x04\x0c\x02\0\x03\x12\
    \x04\xa3\x01\x15\x16\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\xa4\x01\x02\x17\
    \n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\xa4\x01\x02\xa3\x01\x17\n\r\n\
    \x05\x04\x0c\x02\x01\x05\x12\x04\xa4\x01\x02\x07\n\r\n\x05\x04\x0c\x02\
    \x01\x01\x12\x04\xa4\x01\x08\x12\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\
    \xa4\x01\x15\x16\ng\n\x02\x04\r\x12\x06\xa9\x01\0\xac\x01\x01\x1aY\x20Pa\
    cketAcknowledgementData\x20returns\x20the\x20SignBytes\x20data\x20for\
    \x20acknowledgement\n\x20verification.\n\n\x0b\n\x03\x04\r\x01\x12\x04\
    \xa9\x01\x08!\n\x0c\n\x04\x04\r\x02\0\x12\x04\xaa\x01\x02\x1c\n\x0f\n\
    \x05\x04\r\x02\0\x04\x12\x06\xaa\x01\x02\xa9\x01#\n\r\n\x05\x04\r\x02\0\
    \x05\x12\x04\xaa\x01\x02\x07\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xaa\x01\
    \x08\x0c\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xaa\x01\x1a\x1b\n\x0c\n\x04\
    \x04\r\x02\x01\x12\x04\xab\x01\x02\x1c\n\x0f\n\x05\x04\r\x02\x01\x04\x12\
    \x06\xab\x01\x02\xaa\x01\x1c\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xab\x01\
    \x02\x07\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xab\x01\x08\x17\n\r\n\x05\
    \x04\r\x02\x01\x03\x12\x04\xab\x01\x1a\x1b\nm\n\x02\x04\x0e\x12\x06\xb0\
    \x01\0\xb2\x01\x01\x1a_\x20PacketReceiptAbsenceData\x20returns\x20the\
    \x20SignBytes\x20data\x20for\n\x20packet\x20receipt\x20absence\x20verifi\
    cation.\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xb0\x01\x08\x20\n\x0c\n\x04\
    \x04\x0e\x02\0\x12\x04\xb1\x01\x02\x11\n\x0f\n\x05\x04\x0e\x02\0\x04\x12\
    \x06\xb1\x01\x02\xb0\x01\"\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xb1\x01\
    \x02\x07\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xb1\x01\x08\x0c\n\r\n\x05\
    \x04\x0e\x02\0\x03\x12\x04\xb1\x01\x0f\x10\nv\n\x02\x04\x0f\x12\x06\xb6\
    \x01\0\xb9\x01\x01\x1ah\x20NextSequenceRecvData\x20returns\x20the\x20Sig\
    nBytes\x20data\x20for\x20verification\x20of\x20the\x20next\n\x20sequence\
    \x20to\x20be\x20received.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\xb6\x01\x08\
    \x1c\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\xb7\x01\x02\x1b\n\x0f\n\x05\x04\
    \x0f\x02\0\x04\x12\x06\xb7\x01\x02\xb6\x01\x1e\n\r\n\x05\x04\x0f\x02\0\
    \x05\x12\x04\xb7\x01\x02\x07\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xb7\x01\
    \t\r\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xb7\x01\x19\x1a\n\x0c\n\x04\x04\
    \x0f\x02\x01\x12\x04\xb8\x01\x02M\n\x0f\n\x05\x04\x0f\x02\x01\x04\x12\
    \x06\xb8\x01\x02\xb7\x01\x1b\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\xb8\
    \x01\x02\x08\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\xb8\x01\t\x16\n\r\n\
    \x05\x04\x0f\x02\x01\x03\x12\x04\xb8\x01\x19\x1a\n\r\n\x05\x04\x0f\x02\
    \x01\x08\x12\x04\xb8\x01\x1bL\n\x10\n\x08\x04\x0f\x02\x01\x08\xee\xfb\
    \x03\x12\x04\xb8\x01\x1cKb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
