// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/lightclients/tendermint/v1/tendermint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientState {
    // message fields
    pub chain_id: ::std::string::String,
    pub trust_level: ::protobuf::SingularPtrField<Fraction>,
    pub trusting_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub unbonding_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_clock_drift: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub frozen_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub latest_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub proof_specs: ::protobuf::RepeatedField<super::proofs::ProofSpec>,
    pub upgrade_path: ::protobuf::RepeatedField<::std::string::String>,
    pub allow_update_after_expiry: bool,
    pub allow_update_after_misbehaviour: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientState {
    fn default() -> &'a ClientState {
        <ClientState as ::protobuf::Message>::default_instance()
    }
}

impl ClientState {
    pub fn new() -> ClientState {
        ::std::default::Default::default()
    }

    // string chain_id = 1;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // .ibc.lightclients.tendermint.v1.Fraction trust_level = 2;


    pub fn get_trust_level(&self) -> &Fraction {
        self.trust_level.as_ref().unwrap_or_else(|| <Fraction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trust_level(&mut self) {
        self.trust_level.clear();
    }

    pub fn has_trust_level(&self) -> bool {
        self.trust_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trust_level(&mut self, v: Fraction) {
        self.trust_level = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trust_level(&mut self) -> &mut Fraction {
        if self.trust_level.is_none() {
            self.trust_level.set_default();
        }
        self.trust_level.as_mut().unwrap()
    }

    // Take field
    pub fn take_trust_level(&mut self) -> Fraction {
        self.trust_level.take().unwrap_or_else(|| Fraction::new())
    }

    // .google.protobuf.Duration trusting_period = 3;


    pub fn get_trusting_period(&self) -> &::protobuf::well_known_types::Duration {
        self.trusting_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trusting_period(&mut self) {
        self.trusting_period.clear();
    }

    pub fn has_trusting_period(&self) -> bool {
        self.trusting_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusting_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.trusting_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusting_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.trusting_period.is_none() {
            self.trusting_period.set_default();
        }
        self.trusting_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusting_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.trusting_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration unbonding_period = 4;


    pub fn get_unbonding_period(&self) -> &::protobuf::well_known_types::Duration {
        self.unbonding_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_unbonding_period(&mut self) {
        self.unbonding_period.clear();
    }

    pub fn has_unbonding_period(&self) -> bool {
        self.unbonding_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unbonding_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.unbonding_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unbonding_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.unbonding_period.is_none() {
            self.unbonding_period.set_default();
        }
        self.unbonding_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_unbonding_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.unbonding_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration max_clock_drift = 5;


    pub fn get_max_clock_drift(&self) -> &::protobuf::well_known_types::Duration {
        self.max_clock_drift.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_clock_drift(&mut self) {
        self.max_clock_drift.clear();
    }

    pub fn has_max_clock_drift(&self) -> bool {
        self.max_clock_drift.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_clock_drift(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_clock_drift = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_clock_drift(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_clock_drift.is_none() {
            self.max_clock_drift.set_default();
        }
        self.max_clock_drift.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_clock_drift(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_clock_drift.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .ibc.core.client.v1.Height frozen_height = 6;


    pub fn get_frozen_height(&self) -> &super::client::Height {
        self.frozen_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_frozen_height(&mut self) {
        self.frozen_height.clear();
    }

    pub fn has_frozen_height(&self) -> bool {
        self.frozen_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frozen_height(&mut self, v: super::client::Height) {
        self.frozen_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frozen_height(&mut self) -> &mut super::client::Height {
        if self.frozen_height.is_none() {
            self.frozen_height.set_default();
        }
        self.frozen_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_frozen_height(&mut self) -> super::client::Height {
        self.frozen_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // .ibc.core.client.v1.Height latest_height = 7;


    pub fn get_latest_height(&self) -> &super::client::Height {
        self.latest_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_latest_height(&mut self) {
        self.latest_height.clear();
    }

    pub fn has_latest_height(&self) -> bool {
        self.latest_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latest_height(&mut self, v: super::client::Height) {
        self.latest_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_latest_height(&mut self) -> &mut super::client::Height {
        if self.latest_height.is_none() {
            self.latest_height.set_default();
        }
        self.latest_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_latest_height(&mut self) -> super::client::Height {
        self.latest_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // repeated .ics23.ProofSpec proof_specs = 8;


    pub fn get_proof_specs(&self) -> &[super::proofs::ProofSpec] {
        &self.proof_specs
    }
    pub fn clear_proof_specs(&mut self) {
        self.proof_specs.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_specs(&mut self, v: ::protobuf::RepeatedField<super::proofs::ProofSpec>) {
        self.proof_specs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_proof_specs(&mut self) -> &mut ::protobuf::RepeatedField<super::proofs::ProofSpec> {
        &mut self.proof_specs
    }

    // Take field
    pub fn take_proof_specs(&mut self) -> ::protobuf::RepeatedField<super::proofs::ProofSpec> {
        ::std::mem::replace(&mut self.proof_specs, ::protobuf::RepeatedField::new())
    }

    // repeated string upgrade_path = 9;


    pub fn get_upgrade_path(&self) -> &[::std::string::String] {
        &self.upgrade_path
    }
    pub fn clear_upgrade_path(&mut self) {
        self.upgrade_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_upgrade_path(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.upgrade_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upgrade_path(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.upgrade_path
    }

    // Take field
    pub fn take_upgrade_path(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.upgrade_path, ::protobuf::RepeatedField::new())
    }

    // bool allow_update_after_expiry = 10;


    pub fn get_allow_update_after_expiry(&self) -> bool {
        self.allow_update_after_expiry
    }
    pub fn clear_allow_update_after_expiry(&mut self) {
        self.allow_update_after_expiry = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_update_after_expiry(&mut self, v: bool) {
        self.allow_update_after_expiry = v;
    }

    // bool allow_update_after_misbehaviour = 11;


    pub fn get_allow_update_after_misbehaviour(&self) -> bool {
        self.allow_update_after_misbehaviour
    }
    pub fn clear_allow_update_after_misbehaviour(&mut self) {
        self.allow_update_after_misbehaviour = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_update_after_misbehaviour(&mut self, v: bool) {
        self.allow_update_after_misbehaviour = v;
    }
}

impl ::protobuf::Message for ClientState {
    fn is_initialized(&self) -> bool {
        for v in &self.trust_level {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trusting_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unbonding_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_clock_drift {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.frozen_height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.latest_height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proof_specs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trust_level)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trusting_period)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.unbonding_period)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_clock_drift)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.frozen_height)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.latest_height)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.proof_specs)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.upgrade_path)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_update_after_expiry = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_update_after_misbehaviour = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.chain_id);
        }
        if let Some(ref v) = self.trust_level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.trusting_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.unbonding_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_clock_drift.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.frozen_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.latest_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.proof_specs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.upgrade_path {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if self.allow_update_after_expiry != false {
            my_size += 2;
        }
        if self.allow_update_after_misbehaviour != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.chain_id.is_empty() {
            os.write_string(1, &self.chain_id)?;
        }
        if let Some(ref v) = self.trust_level.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.trusting_period.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.unbonding_period.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_clock_drift.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.frozen_height.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.latest_height.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.proof_specs {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.upgrade_path {
            os.write_string(9, &v)?;
        };
        if self.allow_update_after_expiry != false {
            os.write_bool(10, self.allow_update_after_expiry)?;
        }
        if self.allow_update_after_misbehaviour != false {
            os.write_bool(11, self.allow_update_after_misbehaviour)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientState {
        ClientState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &ClientState| { &m.chain_id },
                |m: &mut ClientState| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Fraction>>(
                "trust_level",
                |m: &ClientState| { &m.trust_level },
                |m: &mut ClientState| { &mut m.trust_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "trusting_period",
                |m: &ClientState| { &m.trusting_period },
                |m: &mut ClientState| { &mut m.trusting_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "unbonding_period",
                |m: &ClientState| { &m.unbonding_period },
                |m: &mut ClientState| { &mut m.unbonding_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_clock_drift",
                |m: &ClientState| { &m.max_clock_drift },
                |m: &mut ClientState| { &mut m.max_clock_drift },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "frozen_height",
                |m: &ClientState| { &m.frozen_height },
                |m: &mut ClientState| { &mut m.frozen_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "latest_height",
                |m: &ClientState| { &m.latest_height },
                |m: &mut ClientState| { &mut m.latest_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proofs::ProofSpec>>(
                "proof_specs",
                |m: &ClientState| { &m.proof_specs },
                |m: &mut ClientState| { &mut m.proof_specs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upgrade_path",
                |m: &ClientState| { &m.upgrade_path },
                |m: &mut ClientState| { &mut m.upgrade_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_update_after_expiry",
                |m: &ClientState| { &m.allow_update_after_expiry },
                |m: &mut ClientState| { &mut m.allow_update_after_expiry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_update_after_misbehaviour",
                |m: &ClientState| { &m.allow_update_after_misbehaviour },
                |m: &mut ClientState| { &mut m.allow_update_after_misbehaviour },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientState>(
                "ClientState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientState {
        static instance: ::protobuf::rt::LazyV2<ClientState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientState::new)
    }
}

impl ::protobuf::Clear for ClientState {
    fn clear(&mut self) {
        self.chain_id.clear();
        self.trust_level.clear();
        self.trusting_period.clear();
        self.unbonding_period.clear();
        self.max_clock_drift.clear();
        self.frozen_height.clear();
        self.latest_height.clear();
        self.proof_specs.clear();
        self.upgrade_path.clear();
        self.allow_update_after_expiry = false;
        self.allow_update_after_misbehaviour = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusState {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub root: ::protobuf::SingularPtrField<super::commitment::MerkleRoot>,
    pub next_validators_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusState {
    fn default() -> &'a ConsensusState {
        <ConsensusState as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusState {
    pub fn new() -> ConsensusState {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .ibc.core.commitment.v1.MerkleRoot root = 2;


    pub fn get_root(&self) -> &super::commitment::MerkleRoot {
        self.root.as_ref().unwrap_or_else(|| <super::commitment::MerkleRoot as ::protobuf::Message>::default_instance())
    }
    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    pub fn has_root(&self) -> bool {
        self.root.is_some()
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: super::commitment::MerkleRoot) {
        self.root = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut super::commitment::MerkleRoot {
        if self.root.is_none() {
            self.root.set_default();
        }
        self.root.as_mut().unwrap()
    }

    // Take field
    pub fn take_root(&mut self) -> super::commitment::MerkleRoot {
        self.root.take().unwrap_or_else(|| super::commitment::MerkleRoot::new())
    }

    // bytes next_validators_hash = 3;


    pub fn get_next_validators_hash(&self) -> &[u8] {
        &self.next_validators_hash
    }
    pub fn clear_next_validators_hash(&mut self) {
        self.next_validators_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_validators_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.next_validators_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_validators_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.next_validators_hash
    }

    // Take field
    pub fn take_next_validators_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.next_validators_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConsensusState {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.root {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.root)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.next_validators_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.root.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.next_validators_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.next_validators_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.root.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.next_validators_hash.is_empty() {
            os.write_bytes(3, &self.next_validators_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusState {
        ConsensusState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &ConsensusState| { &m.timestamp },
                |m: &mut ConsensusState| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commitment::MerkleRoot>>(
                "root",
                |m: &ConsensusState| { &m.root },
                |m: &mut ConsensusState| { &mut m.root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "next_validators_hash",
                |m: &ConsensusState| { &m.next_validators_hash },
                |m: &mut ConsensusState| { &mut m.next_validators_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusState>(
                "ConsensusState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusState {
        static instance: ::protobuf::rt::LazyV2<ConsensusState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusState::new)
    }
}

impl ::protobuf::Clear for ConsensusState {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.root.clear();
        self.next_validators_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Misbehaviour {
    // message fields
    pub client_id: ::std::string::String,
    pub header_1: ::protobuf::SingularPtrField<Header>,
    pub header_2: ::protobuf::SingularPtrField<Header>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Misbehaviour {
    fn default() -> &'a Misbehaviour {
        <Misbehaviour as ::protobuf::Message>::default_instance()
    }
}

impl Misbehaviour {
    pub fn new() -> Misbehaviour {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .ibc.lightclients.tendermint.v1.Header header_1 = 2;


    pub fn get_header_1(&self) -> &Header {
        self.header_1.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header_1(&mut self) {
        self.header_1.clear();
    }

    pub fn has_header_1(&self) -> bool {
        self.header_1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_1(&mut self, v: Header) {
        self.header_1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_1(&mut self) -> &mut Header {
        if self.header_1.is_none() {
            self.header_1.set_default();
        }
        self.header_1.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_1(&mut self) -> Header {
        self.header_1.take().unwrap_or_else(|| Header::new())
    }

    // .ibc.lightclients.tendermint.v1.Header header_2 = 3;


    pub fn get_header_2(&self) -> &Header {
        self.header_2.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header_2(&mut self) {
        self.header_2.clear();
    }

    pub fn has_header_2(&self) -> bool {
        self.header_2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_2(&mut self, v: Header) {
        self.header_2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_2(&mut self) -> &mut Header {
        if self.header_2.is_none() {
            self.header_2.set_default();
        }
        self.header_2.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_2(&mut self) -> Header {
        self.header_2.take().unwrap_or_else(|| Header::new())
    }
}

impl ::protobuf::Message for Misbehaviour {
    fn is_initialized(&self) -> bool {
        for v in &self.header_1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header_2 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(ref v) = self.header_1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.header_2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(ref v) = self.header_1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.header_2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Misbehaviour {
        Misbehaviour::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &Misbehaviour| { &m.client_id },
                |m: &mut Misbehaviour| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header_1",
                |m: &Misbehaviour| { &m.header_1 },
                |m: &mut Misbehaviour| { &mut m.header_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header_2",
                |m: &Misbehaviour| { &m.header_2 },
                |m: &mut Misbehaviour| { &mut m.header_2 },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Misbehaviour>(
                "Misbehaviour",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Misbehaviour {
        static instance: ::protobuf::rt::LazyV2<Misbehaviour> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Misbehaviour::new)
    }
}

impl ::protobuf::Clear for Misbehaviour {
    fn clear(&mut self) {
        self.client_id.clear();
        self.header_1.clear();
        self.header_2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Misbehaviour {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Misbehaviour {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub signed_header: ::protobuf::SingularPtrField<super::types::SignedHeader>,
    pub validator_set: ::protobuf::SingularPtrField<super::validator::ValidatorSet>,
    pub trusted_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub trusted_validators: ::protobuf::SingularPtrField<super::validator::ValidatorSet>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedHeader signed_header = 1;


    pub fn get_signed_header(&self) -> &super::types::SignedHeader {
        self.signed_header.as_ref().unwrap_or_else(|| <super::types::SignedHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signed_header(&mut self) {
        self.signed_header.clear();
    }

    pub fn has_signed_header(&self) -> bool {
        self.signed_header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_header(&mut self, v: super::types::SignedHeader) {
        self.signed_header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_header(&mut self) -> &mut super::types::SignedHeader {
        if self.signed_header.is_none() {
            self.signed_header.set_default();
        }
        self.signed_header.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_header(&mut self) -> super::types::SignedHeader {
        self.signed_header.take().unwrap_or_else(|| super::types::SignedHeader::new())
    }

    // .tendermint.types.ValidatorSet validator_set = 2;


    pub fn get_validator_set(&self) -> &super::validator::ValidatorSet {
        self.validator_set.as_ref().unwrap_or_else(|| <super::validator::ValidatorSet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validator_set(&mut self) {
        self.validator_set.clear();
    }

    pub fn has_validator_set(&self) -> bool {
        self.validator_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validator_set(&mut self, v: super::validator::ValidatorSet) {
        self.validator_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_set(&mut self) -> &mut super::validator::ValidatorSet {
        if self.validator_set.is_none() {
            self.validator_set.set_default();
        }
        self.validator_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_validator_set(&mut self) -> super::validator::ValidatorSet {
        self.validator_set.take().unwrap_or_else(|| super::validator::ValidatorSet::new())
    }

    // .ibc.core.client.v1.Height trusted_height = 3;


    pub fn get_trusted_height(&self) -> &super::client::Height {
        self.trusted_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trusted_height(&mut self) {
        self.trusted_height.clear();
    }

    pub fn has_trusted_height(&self) -> bool {
        self.trusted_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusted_height(&mut self, v: super::client::Height) {
        self.trusted_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_height(&mut self) -> &mut super::client::Height {
        if self.trusted_height.is_none() {
            self.trusted_height.set_default();
        }
        self.trusted_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusted_height(&mut self) -> super::client::Height {
        self.trusted_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // .tendermint.types.ValidatorSet trusted_validators = 4;


    pub fn get_trusted_validators(&self) -> &super::validator::ValidatorSet {
        self.trusted_validators.as_ref().unwrap_or_else(|| <super::validator::ValidatorSet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trusted_validators(&mut self) {
        self.trusted_validators.clear();
    }

    pub fn has_trusted_validators(&self) -> bool {
        self.trusted_validators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusted_validators(&mut self, v: super::validator::ValidatorSet) {
        self.trusted_validators = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_validators(&mut self) -> &mut super::validator::ValidatorSet {
        if self.trusted_validators.is_none() {
            self.trusted_validators.set_default();
        }
        self.trusted_validators.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusted_validators(&mut self) -> super::validator::ValidatorSet {
        self.trusted_validators.take().unwrap_or_else(|| super::validator::ValidatorSet::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_set {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trusted_height {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trusted_validators {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validator_set)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trusted_height)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trusted_validators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.validator_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.trusted_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.trusted_validators.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.validator_set.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.trusted_height.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.trusted_validators.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::SignedHeader>>(
                "signed_header",
                |m: &Header| { &m.signed_header },
                |m: &mut Header| { &mut m.signed_header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::validator::ValidatorSet>>(
                "validator_set",
                |m: &Header| { &m.validator_set },
                |m: &mut Header| { &mut m.validator_set },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "trusted_height",
                |m: &Header| { &m.trusted_height },
                |m: &mut Header| { &mut m.trusted_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::validator::ValidatorSet>>(
                "trusted_validators",
                |m: &Header| { &m.trusted_validators },
                |m: &mut Header| { &mut m.trusted_validators },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.signed_header.clear();
        self.validator_set.clear();
        self.trusted_height.clear();
        self.trusted_validators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fraction {
    // message fields
    pub numerator: u64,
    pub denominator: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fraction {
    fn default() -> &'a Fraction {
        <Fraction as ::protobuf::Message>::default_instance()
    }
}

impl Fraction {
    pub fn new() -> Fraction {
        ::std::default::Default::default()
    }

    // uint64 numerator = 1;


    pub fn get_numerator(&self) -> u64 {
        self.numerator
    }
    pub fn clear_numerator(&mut self) {
        self.numerator = 0;
    }

    // Param is passed by value, moved
    pub fn set_numerator(&mut self, v: u64) {
        self.numerator = v;
    }

    // uint64 denominator = 2;


    pub fn get_denominator(&self) -> u64 {
        self.denominator
    }
    pub fn clear_denominator(&mut self) {
        self.denominator = 0;
    }

    // Param is passed by value, moved
    pub fn set_denominator(&mut self, v: u64) {
        self.denominator = v;
    }
}

impl ::protobuf::Message for Fraction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.numerator = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.denominator = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.numerator != 0 {
            my_size += ::protobuf::rt::value_size(1, self.numerator, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.denominator != 0 {
            my_size += ::protobuf::rt::value_size(2, self.denominator, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.numerator != 0 {
            os.write_uint64(1, self.numerator)?;
        }
        if self.denominator != 0 {
            os.write_uint64(2, self.denominator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fraction {
        Fraction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "numerator",
                |m: &Fraction| { &m.numerator },
                |m: &mut Fraction| { &mut m.numerator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "denominator",
                |m: &Fraction| { &m.denominator },
                |m: &mut Fraction| { &mut m.denominator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fraction>(
                "Fraction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fraction {
        static instance: ::protobuf::rt::LazyV2<Fraction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fraction::new)
    }
}

impl ::protobuf::Clear for Fraction {
    fn clear(&mut self) {
        self.numerator = 0;
        self.denominator = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fraction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fraction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/ibc/lightclients/tendermint/v1/tendermint.proto\x12\x1eibc.lightclien\
    ts.tendermint.v1\x1a\x20tendermint/types/validator.proto\x1a\x1ctendermi\
    nt/types/types.proto\x1a\x13confio/proofs.proto\x1a\x1egoogle/protobuf/d\
    uration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1fibc/core/cli\
    ent/v1/client.proto\x1a'ibc/core/commitment/v1/commitment.proto\x1a\x14g\
    ogoproto/gogo.proto\"\xe8\x07\n\x0bClientState\x12\x19\n\x08chain_id\x18\
    \x01\x20\x01(\tR\x07chainId\x12e\n\x0btrust_level\x18\x02\x20\x01(\x0b2(\
    .ibc.lightclients.tendermint.v1.FractionR\ntrustLevelB\x1a\xc8\xde\x1f\0\
    \xf2\xde\x1f\x12yaml:\"trust_level\"\x12f\n\x0ftrusting_period\x18\x03\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x0etrustingPeriodB\"\xf2\
    \xde\x1f\x16yaml:\"trusting_period\"\xc8\xde\x1f\0\x98\xdf\x1f\x01\x12i\
    \n\x10unbonding_period\x18\x04\x20\x01(\x0b2\x19.google.protobuf.Duratio\
    nR\x0funbondingPeriodB#\xf2\xde\x1f\x17yaml:\"unbonding_period\"\xc8\xde\
    \x1f\0\x98\xdf\x1f\x01\x12e\n\x0fmax_clock_drift\x18\x05\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\rmaxClockDriftB\"\x98\xdf\x1f\x01\xf2\xde\
    \x1f\x16yaml:\"max_clock_drift\"\xc8\xde\x1f\0\x12]\n\rfrozen_height\x18\
    \x06\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0cfrozenHeightB\x1c\
    \xf2\xde\x1f\x14yaml:\"frozen_height\"\xc8\xde\x1f\0\x12]\n\rlatest_heig\
    ht\x18\x07\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\x0clatestHeightB\
    \x1c\xc8\xde\x1f\0\xf2\xde\x1f\x14yaml:\"latest_height\"\x12I\n\x0bproof\
    _specs\x18\x08\x20\x03(\x0b2\x10.ics23.ProofSpecR\nproofSpecsB\x16\xf2\
    \xde\x1f\x12yaml:\"proof_specs\"\x12:\n\x0cupgrade_path\x18\t\x20\x03(\t\
    R\x0bupgradePathB\x17\xf2\xde\x1f\x13yaml:\"upgrade_path\"\x12_\n\x19all\
    ow_update_after_expiry\x18\n\x20\x01(\x08R\x16allowUpdateAfterExpiryB$\
    \xf2\xde\x1f\x20yaml:\"allow_update_after_expiry\"\x12q\n\x1fallow_updat\
    e_after_misbehaviour\x18\x0b\x20\x01(\x08R\x1callowUpdateAfterMisbehavio\
    urB*\xf2\xde\x1f&yaml:\"allow_update_after_misbehaviour\":\x04\x88\xa0\
    \x1f\0\"\xa4\x02\n\x0eConsensusState\x12B\n\ttimestamp\x18\x01\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\x90\
    \xdf\x1f\x01\x12<\n\x04root\x18\x02\x20\x01(\x0b2\".ibc.core.commitment.\
    v1.MerkleRootR\x04rootB\x04\xc8\xde\x1f\0\x12\x89\x01\n\x14next_validato\
    rs_hash\x18\x03\x20\x01(\x0cR\x12nextValidatorsHashBW\xf2\xde\x1f\x1byam\
    l:\"next_validators_hash\"\xfa\xde\x1f4github.com/tendermint/tendermint/\
    libs/bytes.HexBytes:\x04\x88\xa0\x1f\0\"\x8d\x02\n\x0cMisbehaviour\x121\
    \n\tclient_id\x18\x01\x20\x01(\tR\x08clientIdB\x14\xf2\xde\x1f\x10yaml:\
    \"client_id\"\x12a\n\x08header_1\x18\x02\x20\x01(\x0b2&.ibc.lightclients\
    .tendermint.v1.HeaderR\x07header1B\x1e\xe2\xde\x1f\x07Header1\xf2\xde\
    \x1f\x0fyaml:\"header_1\"\x12a\n\x08header_2\x18\x03\x20\x01(\x0b2&.ibc.\
    lightclients.tendermint.v1.HeaderR\x07header2B\x1e\xf2\xde\x1f\x0fyaml:\
    \"header_2\"\xe2\xde\x1f\x07Header2:\x04\x88\xa0\x1f\0\"\x9a\x03\n\x06He\
    ader\x12a\n\rsigned_header\x18\x01\x20\x01(\x0b2\x1e.tendermint.types.Si\
    gnedHeaderR\x0csignedHeaderB\x1c\xd0\xde\x1f\x01\xf2\xde\x1f\x14yaml:\"s\
    igned_header\"\x12]\n\rvalidator_set\x18\x02\x20\x01(\x0b2\x1e.tendermin\
    t.types.ValidatorSetR\x0cvalidatorSetB\x18\xf2\xde\x1f\x14yaml:\"validat\
    or_set\"\x12`\n\x0etrusted_height\x18\x03\x20\x01(\x0b2\x1a.ibc.core.cli\
    ent.v1.HeightR\rtrustedHeightB\x1d\xc8\xde\x1f\0\xf2\xde\x1f\x15yaml:\"t\
    rusted_height\"\x12l\n\x12trusted_validators\x18\x04\x20\x01(\x0b2\x1e.t\
    endermint.types.ValidatorSetR\x11trustedValidatorsB\x1d\xf2\xde\x1f\x19y\
    aml:\"trusted_validators\"\"J\n\x08Fraction\x12\x1c\n\tnumerator\x18\x01\
    \x20\x01(\x04R\tnumerator\x12\x20\n\x0bdenominator\x18\x02\x20\x01(\x04R\
    \x0bdenominatorBFZDgithub.com/cosmos/cosmos-sdk/x/ibc/light-clients/07-t\
    endermint/typesJ\xef(\n\x06\x12\x04\0\0n\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\x08&\n\x08\n\x01\x08\x12\x03\x03\0[\n\t\
    \n\x02\x08\x0b\x12\x03\x03\0[\n\t\n\x02\x03\0\x12\x03\x05\x07)\n\t\n\x02\
    \x03\x01\x12\x03\x06\x07%\n\t\n\x02\x03\x02\x12\x03\x07\x07\x1c\n\t\n\
    \x02\x03\x03\x12\x03\x08\x07'\n\t\n\x02\x03\x04\x12\x03\t\x07(\n\t\n\x02\
    \x03\x05\x12\x03\n\x07(\n\t\n\x02\x03\x06\x12\x03\x0b\x070\n\t\n\x02\x03\
    \x07\x12\x03\x0c\x07\x1d\ny\n\x02\x04\0\x12\x04\x10\09\x01\x1am\x20Clien\
    tState\x20from\x20Tendermint\x20tracks\x20the\x20current\x20validator\
    \x20set,\x20latest\x20height,\n\x20and\x20a\x20possible\x20frozen\x20hei\
    ght.\n\n\n\n\x03\x04\0\x01\x12\x03\x10\x08\x13\n\n\n\x03\x04\0\x07\x12\
    \x03\x11\x02-\n\r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x11\x02-\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x13\x02\x1b\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x13\x02\x11-\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x13\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x13\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x14\x02i\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x14\x02\x13\x1b\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x14\x02\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x14\x0b\x16\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x19\x1a\n\x0c\n\x05\x04\0\x02\
    \x01\x08\x12\x03\x14\x1bh\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\
    \x03\x14\x1c8\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\x14:g\n{\
    \n\x04\x04\0\x02\x02\x12\x04\x17\x02\x18x\x1am\x20duration\x20of\x20the\
    \x20period\x20since\x20the\x20LastestTimestamp\x20during\x20which\x20the\
    \n\x20submitted\x20headers\x20are\x20valid\x20for\x20upgrade\n\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04\x17\x02\x14i\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03\x17\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x17\x1b*\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17-.\n\x0c\n\x05\x04\0\x02\x02\x08\
    \x12\x03\x18\x06w\n\x0f\n\x08\x04\0\x02\x02\x08\xe9\xfb\x03\x12\x03\x18\
    \x07#\n\x0f\n\x08\x04\0\x02\x02\x08\xf3\xfb\x03\x12\x03\x18%C\n\x0f\n\
    \x08\x04\0\x02\x02\x08\xee\xfb\x03\x12\x03\x18Ev\n8\n\x04\x04\0\x02\x03\
    \x12\x04\x1a\x02\x1e\x04\x1a*\x20duration\x20of\x20the\x20staking\x20unb\
    onding\x20period\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x1a\x02\x18x\n\
    \x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x1a\x02\x1a\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x1a\x1b+\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1a./\n\
    \r\n\x05\x04\0\x02\x03\x08\x12\x04\x1a0\x1e\x03\n\x0f\n\x08\x04\0\x02\
    \x03\x08\xe9\xfb\x03\x12\x03\x1b\x04#\n\x0f\n\x08\x04\0\x02\x03\x08\xf3\
    \xfb\x03\x12\x03\x1c\x04\"\n\x0f\n\x08\x04\0\x02\x03\x08\xee\xfb\x03\x12\
    \x03\x1d\x049\nY\n\x04\x04\0\x02\x04\x12\x04\x20\x02!x\x1aK\x20defines\
    \x20how\x20much\x20new\x20(untrusted)\x20header's\x20Time\x20can\x20drif\
    t\x20into\x20the\x20future.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x20\
    \x02\x1e\x04\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x20\x02\x1a\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x20\x1b*\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x20-.\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03!\x06w\n\x0f\n\x08\
    \x04\0\x02\x04\x08\xe9\xfb\x03\x12\x03!\x07#\n\x0f\n\x08\x04\0\x02\x04\
    \x08\xf3\xfb\x03\x12\x03!%C\n\x0f\n\x08\x04\0\x02\x04\x08\xee\xfb\x03\
    \x12\x03!Ev\nM\n\x04\x04\0\x02\x05\x12\x04#\x02$V\x1a?\x20Block\x20heigh\
    t\x20when\x20the\x20client\x20was\x20frozen\x20due\x20to\x20a\x20misbeha\
    viour\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04#\x02!x\n\x0c\n\x05\x04\0\x02\
    \x05\x06\x12\x03#\x02\x1b\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03#\x1c)\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03#,-\n\x0c\n\x05\x04\0\x02\x05\x08\
    \x12\x03$\x06U\n\x0f\n\x08\x04\0\x02\x05\x08\xe9\xfb\x03\x12\x03$\x07#\n\
    \x0f\n\x08\x04\0\x02\x05\x08\xee\xfb\x03\x12\x03$%T\n7\n\x04\x04\0\x02\
    \x06\x12\x04&\x02'V\x1a)\x20Latest\x20height\x20the\x20client\x20was\x20\
    updated\x20to\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04&\x02$V\n\x0c\n\x05\
    \x04\0\x02\x06\x06\x12\x03&\x02\x1b\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03&\x1c)\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03&,-\n\x0c\n\x05\x04\0\
    \x02\x06\x08\x12\x03'\x06U\n\x0f\n\x08\x04\0\x02\x06\x08\xe9\xfb\x03\x12\
    \x03'\x07#\n\x0f\n\x08\x04\0\x02\x06\x08\xee\xfb\x03\x12\x03'%T\nH\n\x04\
    \x04\0\x02\x07\x12\x03*\x02[\x1a;\x20Proof\x20specifications\x20used\x20\
    in\x20verifying\x20counterparty\x20state\n\n\x0c\n\x05\x04\0\x02\x07\x04\
    \x12\x03*\x02\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03*\x0b\x1a\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03*\x1b&\n\x0c\n\x05\x04\0\x02\x07\x03\x12\
    \x03*)*\n\x0c\n\x05\x04\0\x02\x07\x08\x12\x03*+Z\n\x0f\n\x08\x04\0\x02\
    \x07\x08\xee\xfb\x03\x12\x03*,Y\n\xb4\x03\n\x04\x04\0\x02\x08\x12\x031\
    \x02T\x1a\xa6\x03\x20Path\x20at\x20which\x20next\x20upgraded\x20client\
    \x20will\x20be\x20committed.\n\x20Each\x20element\x20corresponds\x20to\
    \x20the\x20key\x20for\x20a\x20single\x20CommitmentProof\x20in\x20the\x20\
    chained\x20proof.\n\x20NOTE:\x20ClientState\x20must\x20stored\x20under\
    \x20`{upgradePath}/{upgradeHeight}/clientState`\n\x20ConsensusState\x20m\
    ust\x20be\x20stored\x20under\x20`{upgradepath}/{upgradeHeight}/consensus\
    State`\n\x20For\x20SDK\x20chains\x20using\x20the\x20default\x20upgrade\
    \x20module,\x20upgrade_path\x20should\x20be\x20[]string{\"upgrade\",\x20\
    \"upgradedIBCState\"}`\n\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x031\x02\n\n\
    \x0c\n\x05\x04\0\x02\x08\x05\x12\x031\x0b\x11\n\x0c\n\x05\x04\0\x02\x08\
    \x01\x12\x031\x12\x1e\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x031!\"\n\x0c\n\
    \x05\x04\0\x02\x08\x08\x12\x031#S\n\x0f\n\x08\x04\0\x02\x08\x08\xee\xfb\
    \x03\x12\x031$R\nh\n\x04\x04\0\x02\t\x12\x035\x02d\x1a[\x20This\x20flag,\
    \x20when\x20set\x20to\x20true,\x20will\x20allow\x20governance\x20to\x20r\
    ecover\x20a\x20client\n\x20which\x20has\x20expired\n\n\r\n\x05\x04\0\x02\
    \t\x04\x12\x045\x021T\n\x0c\n\x05\x04\0\x02\t\x05\x12\x035\x02\x06\n\x0c\
    \n\x05\x04\0\x02\t\x01\x12\x035\x07\x20\n\x0c\n\x05\x04\0\x02\t\x03\x12\
    \x035#%\n\x0c\n\x05\x04\0\x02\t\x08\x12\x035&c\n\x0f\n\x08\x04\0\x02\t\
    \x08\xee\xfb\x03\x12\x035'b\n\x88\x01\n\x04\x04\0\x02\n\x12\x038\x02p\
    \x1a{\x20This\x20flag,\x20when\x20set\x20to\x20true,\x20will\x20allow\
    \x20governance\x20to\x20unfreeze\x20a\x20client\n\x20whose\x20chain\x20h\
    as\x20experienced\x20a\x20misbehaviour\x20event\n\n\r\n\x05\x04\0\x02\n\
    \x04\x12\x048\x025d\n\x0c\n\x05\x04\0\x02\n\x05\x12\x038\x02\x06\n\x0c\n\
    \x05\x04\0\x02\n\x01\x12\x038\x07&\n\x0c\n\x05\x04\0\x02\n\x03\x12\x038)\
    +\n\x0c\n\x05\x04\0\x02\n\x08\x12\x038,o\n\x0f\n\x08\x04\0\x02\n\x08\xee\
    \xfb\x03\x12\x038-n\nI\n\x02\x04\x01\x12\x04<\0H\x01\x1a=\x20ConsensusSt\
    ate\x20defines\x20the\x20consensus\x20state\x20from\x20Tendermint.\n\n\n\
    \n\x03\x04\x01\x01\x12\x03<\x08\x16\n\n\n\x03\x04\x01\x07\x12\x03=\x02-\
    \n\r\n\x06\x04\x01\x07\x81\xf4\x03\x12\x03=\x02-\nf\n\x04\x04\x01\x02\0\
    \x12\x03A\x02e\x1aY\x20timestamp\x20that\x20corresponds\x20to\x20the\x20\
    block\x20height\x20in\x20which\x20the\x20ConsensusState\n\x20was\x20stor\
    ed.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04A\x02=-\n\x0c\n\x05\x04\x01\x02\
    \0\x06\x12\x03A\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03A\x1c%\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03A()\n\x0c\n\x05\x04\x01\x02\0\x08\
    \x12\x03A*d\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03A+G\n\x0f\n\
    \x08\x04\x01\x02\0\x08\xf2\xfb\x03\x12\x03AIc\n-\n\x04\x04\x01\x02\x01\
    \x12\x03C\x02\\\x1a\x20\x20commitment\x20root\x20(i.e\x20app\x20hash)\n\
    \n\r\n\x05\x04\x01\x02\x01\x04\x12\x04C\x02Ae\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03C\x02#\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03C$(\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03C;<\n\x0c\n\x05\x04\x01\x02\x01\x08\
    \x12\x03C=[\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\x03\x12\x03C>Z\n\x0c\
    \n\x04\x04\x01\x02\x02\x12\x04D\x02G\x04\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04D\x02C\\\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03D\x02\x07\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03D$8\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03D;<\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04D=G\x03\n\x0f\n\x08\x04\
    \x01\x02\x02\x08\xef\xfb\x03\x12\x03E\x04Q\n\x0f\n\x08\x04\x01\x02\x02\
    \x08\xee\xfb\x03\x12\x03F\x04:\n\x7f\n\x02\x04\x02\x12\x04L\0R\x01\x1as\
    \x20Misbehaviour\x20is\x20a\x20wrapper\x20over\x20two\x20conflicting\x20\
    Headers\n\x20that\x20implements\x20Misbehaviour\x20interface\x20expected\
    \x20by\x20ICS-02\n\n\n\n\x03\x04\x02\x01\x12\x03L\x08\x14\n\n\n\x03\x04\
    \x02\x07\x12\x03M\x02-\n\r\n\x06\x04\x02\x07\x81\xf4\x03\x12\x03M\x02-\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03O\x02E\n\r\n\x05\x04\x02\x02\0\x04\x12\
    \x04O\x02M-\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03O\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03O\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03O\
    \x15\x16\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03O\x17D\n\x0f\n\x08\x04\x02\
    \x02\0\x08\xee\xfb\x03\x12\x03O\x18C\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    P\x02h\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04P\x02OE\n\x0c\n\x05\x04\x02\
    \x02\x01\x06\x12\x03P\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03P\t\
    \x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03P\x15\x16\n\x0c\n\x05\x04\
    \x02\x02\x01\x08\x12\x03P\x17g\n\x0f\n\x08\x04\x02\x02\x01\x08\xec\xfb\
    \x03\x12\x03P\x18:\n\x0f\n\x08\x04\x02\x02\x01\x08\xee\xfb\x03\x12\x03P<\
    f\n\x0b\n\x04\x04\x02\x02\x02\x12\x03Q\x02h\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04Q\x02Ph\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03Q\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03Q\t\x11\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03Q\x15\x16\n\x0c\n\x05\x04\x02\x02\x02\x08\x12\x03Q\x17g\
    \n\x0f\n\x08\x04\x02\x02\x02\x08\xec\xfb\x03\x12\x03Q\x18:\n\x0f\n\x08\
    \x04\x02\x02\x02\x08\xee\xfb\x03\x12\x03Q<f\n\xcd\x06\n\x02\x04\x03\x12\
    \x04`\0h\x01\x1a\xc0\x06\x20Header\x20defines\x20the\x20Tendermint\x20cl\
    ient\x20consensus\x20Header.\n\x20It\x20encapsulates\x20all\x20the\x20in\
    formation\x20necessary\x20to\x20update\x20from\x20a\x20trusted\n\x20Tend\
    ermint\x20ConsensusState.\x20The\x20inclusion\x20of\x20TrustedHeight\x20\
    and\n\x20TrustedValidators\x20allows\x20this\x20update\x20to\x20process\
    \x20correctly,\x20so\x20long\x20as\x20the\n\x20ConsensusState\x20for\x20\
    the\x20TrustedHeight\x20exists,\x20this\x20removes\x20race\x20conditions\
    \n\x20among\x20relayers\x20The\x20SignedHeader\x20and\x20ValidatorSet\
    \x20are\x20the\x20new\x20untrusted\x20update\n\x20fields\x20for\x20the\
    \x20client.\x20The\x20TrustedHeight\x20is\x20the\x20height\x20of\x20a\
    \x20stored\n\x20ConsensusState\x20on\x20the\x20client\x20that\x20will\
    \x20be\x20used\x20to\x20verify\x20the\x20new\x20untrusted\n\x20header.\
    \x20The\x20Trusted\x20ConsensusState\x20must\x20be\x20within\x20the\x20u\
    nbonding\x20period\x20of\n\x20current\x20time\x20in\x20order\x20to\x20co\
    rrectly\x20verify,\x20and\x20the\x20TrustedValidators\x20must\n\x20hash\
    \x20to\x20TrustedConsensusState.NextValidatorsHash\x20since\x20that\x20i\
    s\x20the\x20last\n\x20trusted\x20validator\x20set\x20at\x20the\x20Truste\
    dHeight.\n\n\n\n\x03\x04\x03\x01\x12\x03`\x08\x0e\n\x0c\n\x04\x04\x03\
    \x02\0\x12\x04a\x02bR\n\r\n\x05\x04\x03\x02\0\x04\x12\x04a\x02`\x10\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03a\x02\x20\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03a!.\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03a12\n\x0c\n\x05\x04\
    \x03\x02\0\x08\x12\x03b\x06Q\n\x0f\n\x08\x04\x03\x02\0\x08\xea\xfb\x03\
    \x12\x03b\x07\x1f\n\x0f\n\x08\x04\x03\x02\0\x08\xee\xfb\x03\x12\x03b!P\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03d\x02f\n\r\n\x05\x04\x03\x02\x01\x04\
    \x12\x04d\x02bR\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03d\x02\x20\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03d!.\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03d23\n\x0c\n\x05\x04\x03\x02\x01\x08\x12\x03d4e\n\x0f\n\x08\x04\x03\
    \x02\x01\x08\xee\xfb\x03\x12\x03d5d\n\x0c\n\x04\x04\x03\x02\x02\x12\x04e\
    \x02fW\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04e\x02df\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x03e\x02\x1b\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03e!/\
    \n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03e23\n\x0c\n\x05\x04\x03\x02\x02\
    \x08\x12\x03f\x06V\n\x0f\n\x08\x04\x03\x02\x02\x08\xe9\xfb\x03\x12\x03f\
    \x07#\n\x0f\n\x08\x04\x03\x02\x02\x08\xee\xfb\x03\x12\x03f%U\n\x0b\n\x04\
    \x04\x03\x02\x03\x12\x03g\x02o\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04g\
    \x02fW\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x03g\x02\x20\n\x0c\n\x05\x04\
    \x03\x02\x03\x01\x12\x03g!3\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03g67\n\
    \x0c\n\x05\x04\x03\x02\x03\x08\x12\x03g8n\n\x0f\n\x08\x04\x03\x02\x03\
    \x08\xee\xfb\x03\x12\x03g9m\np\n\x02\x04\x04\x12\x04k\0n\x01\x1ad\x20Fra\
    ction\x20defines\x20the\x20protobuf\x20message\x20type\x20for\x20tmmath.\
    Fraction\x20that\x20only\x20supports\x20positive\x20values.\n\n\n\n\x03\
    \x04\x04\x01\x12\x03k\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03l\x02\x19\
    \n\r\n\x05\x04\x04\x02\0\x04\x12\x04l\x02k\x12\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03l\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03l\t\x12\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03l\x17\x18\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03m\x02\x19\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04m\x02l\x19\n\x0c\
    \n\x05\x04\x04\x02\x01\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03m\t\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03m\x17\x18b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
