// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/tx/v1beta1/service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetTxsEventRequest {
    // message fields
    pub events: ::protobuf::RepeatedField<::std::string::String>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageRequest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxsEventRequest {
    fn default() -> &'a GetTxsEventRequest {
        <GetTxsEventRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventRequest {
    pub fn new() -> GetTxsEventRequest {
        ::std::default::Default::default()
    }

    // repeated string events = 1;


    pub fn get_events(&self) -> &[::std::string::String] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageRequest pagination = 2;


    pub fn get_pagination(&self) -> &super::pagination::PageRequest {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageRequest) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageRequest {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageRequest {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageRequest::new())
    }
}

impl ::protobuf::Message for GetTxsEventRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.events)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_string(1, &v)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxsEventRequest {
        GetTxsEventRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "events",
                |m: &GetTxsEventRequest| { &m.events },
                |m: &mut GetTxsEventRequest| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageRequest>>(
                "pagination",
                |m: &GetTxsEventRequest| { &m.pagination },
                |m: &mut GetTxsEventRequest| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxsEventRequest>(
                "GetTxsEventRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxsEventRequest {
        static instance: ::protobuf::rt::LazyV2<GetTxsEventRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxsEventRequest::new)
    }
}

impl ::protobuf::Clear for GetTxsEventRequest {
    fn clear(&mut self) {
        self.events.clear();
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxsEventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxsEventResponse {
    // message fields
    pub txs: ::protobuf::RepeatedField<super::tx::Tx>,
    pub tx_responses: ::protobuf::RepeatedField<super::abci::TxResponse>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxsEventResponse {
    fn default() -> &'a GetTxsEventResponse {
        <GetTxsEventResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventResponse {
    pub fn new() -> GetTxsEventResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.tx.v1beta1.Tx txs = 1;


    pub fn get_txs(&self) -> &[super::tx::Tx] {
        &self.txs
    }
    pub fn clear_txs(&mut self) {
        self.txs.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs(&mut self, v: ::protobuf::RepeatedField<super::tx::Tx>) {
        self.txs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txs(&mut self) -> &mut ::protobuf::RepeatedField<super::tx::Tx> {
        &mut self.txs
    }

    // Take field
    pub fn take_txs(&mut self) -> ::protobuf::RepeatedField<super::tx::Tx> {
        ::std::mem::replace(&mut self.txs, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;


    pub fn get_tx_responses(&self) -> &[super::abci::TxResponse] {
        &self.tx_responses
    }
    pub fn clear_tx_responses(&mut self) {
        self.tx_responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_responses(&mut self, v: ::protobuf::RepeatedField<super::abci::TxResponse>) {
        self.tx_responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tx_responses(&mut self) -> &mut ::protobuf::RepeatedField<super::abci::TxResponse> {
        &mut self.tx_responses
    }

    // Take field
    pub fn take_tx_responses(&mut self) -> ::protobuf::RepeatedField<super::abci::TxResponse> {
        ::std::mem::replace(&mut self.tx_responses, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageResponse pagination = 3;


    pub fn get_pagination(&self) -> &super::pagination::PageResponse {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageResponse) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageResponse {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageResponse {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageResponse::new())
    }
}

impl ::protobuf::Message for GetTxsEventResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.txs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_responses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.txs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tx_responses)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tx_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.txs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tx_responses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxsEventResponse {
        GetTxsEventResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "txs",
                |m: &GetTxsEventResponse| { &m.txs },
                |m: &mut GetTxsEventResponse| { &mut m.txs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_responses",
                |m: &GetTxsEventResponse| { &m.tx_responses },
                |m: &mut GetTxsEventResponse| { &mut m.tx_responses },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageResponse>>(
                "pagination",
                |m: &GetTxsEventResponse| { &m.pagination },
                |m: &mut GetTxsEventResponse| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxsEventResponse>(
                "GetTxsEventResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxsEventResponse {
        static instance: ::protobuf::rt::LazyV2<GetTxsEventResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxsEventResponse::new)
    }
}

impl ::protobuf::Clear for GetTxsEventResponse {
    fn clear(&mut self) {
        self.txs.clear();
        self.tx_responses.clear();
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxsEventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BroadcastTxRequest {
    // message fields
    pub tx_bytes: ::std::vec::Vec<u8>,
    pub mode: BroadcastMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxRequest {
    fn default() -> &'a BroadcastTxRequest {
        <BroadcastTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxRequest {
    pub fn new() -> BroadcastTxRequest {
        ::std::default::Default::default()
    }

    // bytes tx_bytes = 1;


    pub fn get_tx_bytes(&self) -> &[u8] {
        &self.tx_bytes
    }
    pub fn clear_tx_bytes(&mut self) {
        self.tx_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_bytes
    }

    // Take field
    pub fn take_tx_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_bytes, ::std::vec::Vec::new())
    }

    // .cosmos.tx.v1beta1.BroadcastMode mode = 2;


    pub fn get_mode(&self) -> BroadcastMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = BroadcastMode::BROADCAST_MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: BroadcastMode) {
        self.mode = v;
    }
}

impl ::protobuf::Message for BroadcastTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.tx_bytes);
        }
        if self.mode != BroadcastMode::BROADCAST_MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_bytes.is_empty() {
            os.write_bytes(1, &self.tx_bytes)?;
        }
        if self.mode != BroadcastMode::BROADCAST_MODE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxRequest {
        BroadcastTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_bytes",
                |m: &BroadcastTxRequest| { &m.tx_bytes },
                |m: &mut BroadcastTxRequest| { &mut m.tx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BroadcastMode>>(
                "mode",
                |m: &BroadcastTxRequest| { &m.mode },
                |m: &mut BroadcastTxRequest| { &mut m.mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BroadcastTxRequest>(
                "BroadcastTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BroadcastTxRequest {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxRequest::new)
    }
}

impl ::protobuf::Clear for BroadcastTxRequest {
    fn clear(&mut self) {
        self.tx_bytes.clear();
        self.mode = BroadcastMode::BROADCAST_MODE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BroadcastTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BroadcastTxResponse {
    // message fields
    pub tx_response: ::protobuf::SingularPtrField<super::abci::TxResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxResponse {
    fn default() -> &'a BroadcastTxResponse {
        <BroadcastTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxResponse {
    pub fn new() -> BroadcastTxResponse {
        ::std::default::Default::default()
    }

    // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1;


    pub fn get_tx_response(&self) -> &super::abci::TxResponse {
        self.tx_response.as_ref().unwrap_or_else(|| <super::abci::TxResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx_response(&mut self) {
        self.tx_response.clear();
    }

    pub fn has_tx_response(&self) -> bool {
        self.tx_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_response(&mut self, v: super::abci::TxResponse) {
        self.tx_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_response(&mut self) -> &mut super::abci::TxResponse {
        if self.tx_response.is_none() {
            self.tx_response.set_default();
        }
        self.tx_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_response(&mut self) -> super::abci::TxResponse {
        self.tx_response.take().unwrap_or_else(|| super::abci::TxResponse::new())
    }
}

impl ::protobuf::Message for BroadcastTxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxResponse {
        BroadcastTxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_response",
                |m: &BroadcastTxResponse| { &m.tx_response },
                |m: &mut BroadcastTxResponse| { &mut m.tx_response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BroadcastTxResponse>(
                "BroadcastTxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BroadcastTxResponse {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxResponse::new)
    }
}

impl ::protobuf::Clear for BroadcastTxResponse {
    fn clear(&mut self) {
        self.tx_response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BroadcastTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimulateRequest {
    // message fields
    pub tx: ::protobuf::SingularPtrField<super::tx::Tx>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimulateRequest {
    fn default() -> &'a SimulateRequest {
        <SimulateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SimulateRequest {
    pub fn new() -> SimulateRequest {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.Tx tx = 1;


    pub fn get_tx(&self) -> &super::tx::Tx {
        self.tx.as_ref().unwrap_or_else(|| <super::tx::Tx as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: super::tx::Tx) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut super::tx::Tx {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> super::tx::Tx {
        self.tx.take().unwrap_or_else(|| super::tx::Tx::new())
    }
}

impl ::protobuf::Message for SimulateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimulateRequest {
        SimulateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "tx",
                |m: &SimulateRequest| { &m.tx },
                |m: &mut SimulateRequest| { &mut m.tx },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimulateRequest>(
                "SimulateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimulateRequest {
        static instance: ::protobuf::rt::LazyV2<SimulateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimulateRequest::new)
    }
}

impl ::protobuf::Clear for SimulateRequest {
    fn clear(&mut self) {
        self.tx.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimulateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimulateResponse {
    // message fields
    pub gas_info: ::protobuf::SingularPtrField<super::abci::GasInfo>,
    pub result: ::protobuf::SingularPtrField<super::abci::Result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimulateResponse {
    fn default() -> &'a SimulateResponse {
        <SimulateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulateResponse {
    pub fn new() -> SimulateResponse {
        ::std::default::Default::default()
    }

    // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;


    pub fn get_gas_info(&self) -> &super::abci::GasInfo {
        self.gas_info.as_ref().unwrap_or_else(|| <super::abci::GasInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gas_info(&mut self) {
        self.gas_info.clear();
    }

    pub fn has_gas_info(&self) -> bool {
        self.gas_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_info(&mut self, v: super::abci::GasInfo) {
        self.gas_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_info(&mut self) -> &mut super::abci::GasInfo {
        if self.gas_info.is_none() {
            self.gas_info.set_default();
        }
        self.gas_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_info(&mut self) -> super::abci::GasInfo {
        self.gas_info.take().unwrap_or_else(|| super::abci::GasInfo::new())
    }

    // .cosmos.base.abci.v1beta1.Result result = 2;


    pub fn get_result(&self) -> &super::abci::Result {
        self.result.as_ref().unwrap_or_else(|| <super::abci::Result as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::abci::Result) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut super::abci::Result {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> super::abci::Result {
        self.result.take().unwrap_or_else(|| super::abci::Result::new())
    }
}

impl ::protobuf::Message for SimulateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gas_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gas_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gas_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gas_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimulateResponse {
        SimulateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::GasInfo>>(
                "gas_info",
                |m: &SimulateResponse| { &m.gas_info },
                |m: &mut SimulateResponse| { &mut m.gas_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::Result>>(
                "result",
                |m: &SimulateResponse| { &m.result },
                |m: &mut SimulateResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimulateResponse>(
                "SimulateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimulateResponse {
        static instance: ::protobuf::rt::LazyV2<SimulateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimulateResponse::new)
    }
}

impl ::protobuf::Clear for SimulateResponse {
    fn clear(&mut self) {
        self.gas_info.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimulateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxRequest {
    // message fields
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxRequest {
    fn default() -> &'a GetTxRequest {
        <GetTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxRequest {
    pub fn new() -> GetTxRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxRequest {
        GetTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &GetTxRequest| { &m.hash },
                |m: &mut GetTxRequest| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxRequest>(
                "GetTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxRequest {
        static instance: ::protobuf::rt::LazyV2<GetTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxRequest::new)
    }
}

impl ::protobuf::Clear for GetTxRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxResponse {
    // message fields
    pub tx: ::protobuf::SingularPtrField<super::tx::Tx>,
    pub tx_response: ::protobuf::SingularPtrField<super::abci::TxResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxResponse {
    fn default() -> &'a GetTxResponse {
        <GetTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxResponse {
    pub fn new() -> GetTxResponse {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.Tx tx = 1;


    pub fn get_tx(&self) -> &super::tx::Tx {
        self.tx.as_ref().unwrap_or_else(|| <super::tx::Tx as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: super::tx::Tx) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut super::tx::Tx {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> super::tx::Tx {
        self.tx.take().unwrap_or_else(|| super::tx::Tx::new())
    }

    // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2;


    pub fn get_tx_response(&self) -> &super::abci::TxResponse {
        self.tx_response.as_ref().unwrap_or_else(|| <super::abci::TxResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx_response(&mut self) {
        self.tx_response.clear();
    }

    pub fn has_tx_response(&self) -> bool {
        self.tx_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_response(&mut self, v: super::abci::TxResponse) {
        self.tx_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_response(&mut self) -> &mut super::abci::TxResponse {
        if self.tx_response.is_none() {
            self.tx_response.set_default();
        }
        self.tx_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_response(&mut self) -> super::abci::TxResponse {
        self.tx_response.take().unwrap_or_else(|| super::abci::TxResponse::new())
    }
}

impl ::protobuf::Message for GetTxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tx_response.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxResponse {
        GetTxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "tx",
                |m: &GetTxResponse| { &m.tx },
                |m: &mut GetTxResponse| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_response",
                |m: &GetTxResponse| { &m.tx_response },
                |m: &mut GetTxResponse| { &mut m.tx_response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxResponse>(
                "GetTxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxResponse {
        static instance: ::protobuf::rt::LazyV2<GetTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxResponse::new)
    }
}

impl ::protobuf::Clear for GetTxResponse {
    fn clear(&mut self) {
        self.tx.clear();
        self.tx_response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BroadcastMode {
    BROADCAST_MODE_UNSPECIFIED = 0,
    BROADCAST_MODE_BLOCK = 1,
    BROADCAST_MODE_SYNC = 2,
    BROADCAST_MODE_ASYNC = 3,
}

impl ::protobuf::ProtobufEnum for BroadcastMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BroadcastMode> {
        match value {
            0 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_BLOCK),
            2 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_SYNC),
            3 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_ASYNC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BroadcastMode] = &[
            BroadcastMode::BROADCAST_MODE_UNSPECIFIED,
            BroadcastMode::BROADCAST_MODE_BLOCK,
            BroadcastMode::BROADCAST_MODE_SYNC,
            BroadcastMode::BROADCAST_MODE_ASYNC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BroadcastMode>("BroadcastMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BroadcastMode {
}

impl ::std::default::Default for BroadcastMode {
    fn default() -> Self {
        BroadcastMode::BROADCAST_MODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/tx/v1beta1/service.proto\x12\x11cosmos.tx.v1beta1\x1a\x1cgo\
    ogle/api/annotations.proto\x1a#cosmos/base/abci/v1beta1/abci.proto\x1a\
    \x1acosmos/tx/v1beta1/tx.proto\x1a\x14gogoproto/gogo.proto\x1a*cosmos/ba\
    se/query/v1beta1/pagination.proto\"t\n\x12GetTxsEventRequest\x12\x16\n\
    \x06events\x18\x01\x20\x03(\tR\x06events\x12F\n\npagination\x18\x02\x20\
    \x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination\"\xd0\x01\
    \n\x13GetTxsEventResponse\x12'\n\x03txs\x18\x01\x20\x03(\x0b2\x15.cosmos\
    .tx.v1beta1.TxR\x03txs\x12G\n\x0ctx_responses\x18\x02\x20\x03(\x0b2$.cos\
    mos.base.abci.v1beta1.TxResponseR\x0btxResponses\x12G\n\npagination\x18\
    \x03\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npagination\
    \"e\n\x12BroadcastTxRequest\x12\x19\n\x08tx_bytes\x18\x01\x20\x01(\x0cR\
    \x07txBytes\x124\n\x04mode\x18\x02\x20\x01(\x0e2\x20.cosmos.tx.v1beta1.B\
    roadcastModeR\x04mode\"\\\n\x13BroadcastTxResponse\x12E\n\x0btx_response\
    \x18\x01\x20\x01(\x0b2$.cosmos.base.abci.v1beta1.TxResponseR\ntxResponse\
    \"8\n\x0fSimulateRequest\x12%\n\x02tx\x18\x01\x20\x01(\x0b2\x15.cosmos.t\
    x.v1beta1.TxR\x02tx\"\x8a\x01\n\x10SimulateResponse\x12<\n\x08gas_info\
    \x18\x01\x20\x01(\x0b2!.cosmos.base.abci.v1beta1.GasInfoR\x07gasInfo\x12\
    8\n\x06result\x18\x02\x20\x01(\x0b2\x20.cosmos.base.abci.v1beta1.ResultR\
    \x06result\"\"\n\x0cGetTxRequest\x12\x12\n\x04hash\x18\x01\x20\x01(\tR\
    \x04hash\"}\n\rGetTxResponse\x12%\n\x02tx\x18\x01\x20\x01(\x0b2\x15.cosm\
    os.tx.v1beta1.TxR\x02tx\x12E\n\x0btx_response\x18\x02\x20\x01(\x0b2$.cos\
    mos.base.abci.v1beta1.TxResponseR\ntxResponse*|\n\rBroadcastMode\x12\x1e\
    \n\x1aBROADCAST_MODE_UNSPECIFIED\x10\0\x12\x18\n\x14BROADCAST_MODE_BLOCK\
    \x10\x01\x12\x17\n\x13BROADCAST_MODE_SYNC\x10\x02\x12\x18\n\x14BROADCAST\
    _MODE_ASYNC\x10\x032\xf8\x03\n\x07Service\x12{\n\x08Simulate\x12\".cosmo\
    s.tx.v1beta1.SimulateRequest\x1a#.cosmos.tx.v1beta1.SimulateResponse\"&\
    \x82\xd3\xe4\x93\x02\x20\"\x1b/cosmos/tx/v1beta1/simulate:\x01*\x12q\n\
    \x05GetTx\x12\x1f.cosmos.tx.v1beta1.GetTxRequest\x1a\x20.cosmos.tx.v1bet\
    a1.GetTxResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/cosmos/tx/v1beta1/tx\
    s/{hash}\x12\x7f\n\x0bBroadcastTx\x12%.cosmos.tx.v1beta1.BroadcastTxRequ\
    est\x1a&.cosmos.tx.v1beta1.BroadcastTxResponse\"!\x82\xd3\xe4\x93\x02\
    \x1b\"\x16/cosmos/tx/v1beta1/txs:\x01*\x12|\n\x0bGetTxsEvent\x12%.cosmos\
    .tx.v1beta1.GetTxsEventRequest\x1a&.cosmos.tx.v1beta1.GetTxsEventRespons\
    e\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/cosmos/tx/v1beta1/txsB'Z%github.\
    com/cosmos/cosmos-sdk/types/txJ\xc8\x1d\n\x06\x12\x04\0\0t\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x19\n\t\n\x02\
    \x03\0\x12\x03\x03\x07%\n\t\n\x02\x03\x01\x12\x03\x04\x07,\n\t\n\x02\x03\
    \x02\x12\x03\x05\x07#\n\t\n\x02\x03\x03\x12\x03\x06\x07\x1d\n\t\n\x02\
    \x03\x04\x12\x03\x07\x073\n\x08\n\x01\x08\x12\x03\t\0<\n\t\n\x02\x08\x0b\
    \x12\x03\t\0<\nO\n\x02\x06\0\x12\x04\x0c\0#\x01\x1aC\x20Service\x20defin\
    es\x20a\x20gRPC\x20service\x20for\x20interacting\x20with\x20transactions\
    .\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x0f\nT\n\x04\x06\0\x02\0\x12\x04\
    \x0e\x02\x13\x03\x1aF\x20Simulate\x20simulates\x20executing\x20a\x20tran\
    saction\x20for\x20estimating\x20gas\x20usage.\n\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x0e\x06\x0e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\x0f\x1e\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e)9\n\r\n\x05\x06\0\x02\0\x04\x12\
    \x04\x0f\x04\x12\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x0f\
    \x04\x12\x06\n+\n\x04\x06\0\x02\x01\x12\x04\x15\x02\x17\x03\x1a\x1d\x20G\
    etTx\x20fetches\x20a\x20tx\x20by\x20hash.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x15\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x15\x0c\
    \x18\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x15#0\n\x0c\n\x05\x06\0\x02\
    \x01\x04\x12\x03\x16\x04C\n\x11\n\n\x06\0\x02\x01\x04\xb0\xca\xbc\"\x02\
    \x12\x03\x16\x04C\n2\n\x04\x06\0\x02\x02\x12\x04\x19\x02\x1e\x03\x1a$\
    \x20BroadcastTx\x20broadcast\x20transaction.\n\n\x0c\n\x05\x06\0\x02\x02\
    \x01\x12\x03\x19\x06\x11\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x19\x12$\
    \n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x19/B\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04\x1a\x04\x1d\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\
    \x04\x1a\x04\x1d\x06\n1\n\x04\x06\0\x02\x03\x12\x04\x20\x02\"\x03\x1a#\
    \x20GetTxsEvent\x20fetches\x20txs\x20by\x20event.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03\x20\x06\x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x20\x12$\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x20/B\n\x0c\n\x05\x06\0\
    \x02\x03\x04\x12\x03!\x04<\n\x11\n\n\x06\0\x02\x03\x04\xb0\xca\xbc\"\x02\
    \x12\x03!\x04<\n]\n\x02\x04\0\x12\x04'\0,\x01\x1aQ\x20GetTxsEventRequest\
    \x20is\x20the\x20request\x20type\x20for\x20the\x20Service.TxsByEvents\n\
    \x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\x12\x03'\x08\x1a\n<\n\x04\x04\0\
    \x02\0\x12\x03)\x02\x1d\x1a/\x20events\x20is\x20the\x20list\x20of\x20tra\
    nsaction\x20event\x20type.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03)\x02\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03)\x0b\x11\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03)\x12\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03)\x1b\x1c\n@\n\
    \x04\x04\0\x02\x01\x12\x03+\x027\x1a3\x20pagination\x20defines\x20an\x20\
    pagination\x20for\x20the\x20request.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04+\x02)\x1d\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03+\x02'\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03+(2\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03+56\n\
    _\n\x02\x04\x01\x12\x040\07\x01\x1aS\x20GetTxsEventResponse\x20is\x20the\
    \x20response\x20type\x20for\x20the\x20Service.TxsByEvents\n\x20RPC\x20me\
    thod.\n\n\n\n\x03\x04\x01\x01\x12\x030\x08\x1b\n7\n\x04\x04\x01\x02\0\
    \x12\x032\x02(\x1a*\x20txs\x20is\x20the\x20list\x20of\x20queried\x20tran\
    sactions.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x032\x02\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x032\x0b\x1f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x032\
    \x20#\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x032&'\n?\n\x04\x04\x01\x02\x01\
    \x12\x034\x02@\x1a2\x20tx_responses\x20is\x20the\x20list\x20of\x20querie\
    d\x20TxResponses.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x034\x02\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x06\x12\x034\x0b.\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x034/;\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x034>?\nA\n\x04\x04\x01\
    \x02\x02\x12\x036\x028\x1a4\x20pagination\x20defines\x20an\x20pagination\
    \x20for\x20the\x20response.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x046\x02\
    4@\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x036\x02(\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x036)3\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03667\nd\n\x02\
    \x04\x02\x12\x04;\0?\x01\x1aX\x20BroadcastTxRequest\x20is\x20the\x20requ\
    est\x20type\x20for\x20the\x20Service.BroadcastTxRequest\n\x20RPC\x20meth\
    od.\n\n\n\n\x03\x04\x02\x01\x12\x03;\x08\x1a\n/\n\x04\x04\x02\x02\0\x12\
    \x03=\x02\x1d\x1a\"\x20tx_bytes\x20is\x20the\x20raw\x20transaction.\n\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04=\x02;\x1c\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03=\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03=\x10\x18\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03=\x1b\x1c\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03>\x02\x1d\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04>\x02=\x1d\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03>\x02\x0f\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03>\x10\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03>\x1b\
    \x1c\n`\n\x02\x05\0\x12\x04B\0N\x01\x1aT\x20BroadcastMode\x20specifies\
    \x20the\x20broadcast\x20mode\x20for\x20the\x20TxService.Broadcast\x20RPC\
    \x20method.\n\n\n\n\x03\x05\0\x01\x12\x03B\x05\x12\n+\n\x04\x05\0\x02\0\
    \x12\x03D\x02!\x1a\x1e\x20zero-value\x20for\x20mode\x20ordering\n\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03D\x02\x1c\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03D\x1f\x20\n\x81\x01\n\x04\x05\0\x02\x01\x12\x03G\x02\x1b\x1at\x20BRO\
    ADCAST_MODE_BLOCK\x20defines\x20a\x20tx\x20broadcasting\x20mode\x20where\
    \x20the\x20client\x20waits\x20for\n\x20the\x20tx\x20to\x20be\x20committe\
    d\x20in\x20a\x20block.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03G\x02\x16\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03G\x19\x1a\n\x80\x01\n\x04\x05\0\
    \x02\x02\x12\x03J\x02\x1a\x1as\x20BROADCAST_MODE_SYNC\x20defines\x20a\
    \x20tx\x20broadcasting\x20mode\x20where\x20the\x20client\x20waits\x20for\
    \n\x20a\x20CheckTx\x20execution\x20response\x20only.\n\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03J\x02\x15\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03J\x18\
    \x19\ni\n\x04\x05\0\x02\x03\x12\x03M\x02\x1b\x1a\\\x20BROADCAST_MODE_ASY\
    NC\x20defines\x20a\x20tx\x20broadcasting\x20mode\x20where\x20the\x20clie\
    nt\x20returns\n\x20immediately.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03M\
    \x02\x16\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03M\x19\x1a\n[\n\x02\x04\x03\
    \x12\x04R\0U\x01\x1aO\x20BroadcastTxResponse\x20is\x20the\x20response\
    \x20type\x20for\x20the\n\x20Service.BroadcastTx\x20method.\n\n\n\n\x03\
    \x04\x03\x01\x12\x03R\x08\x1b\n6\n\x04\x04\x03\x02\0\x12\x03T\x026\x1a)\
    \x20tx_response\x20is\x20the\x20queried\x20TxResponses.\n\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04T\x02R\x1d\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03T\
    \x02%\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03T&1\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03T45\nW\n\x02\x04\x04\x12\x04Y\0\\\x01\x1aK\x20SimulateReques\
    t\x20is\x20the\x20request\x20type\x20for\x20the\x20Service.Simulate\n\
    \x20RPC\x20method.\n\n\n\n\x03\x04\x04\x01\x12\x03Y\x08\x17\n1\n\x04\x04\
    \x04\x02\0\x12\x03[\x02\x1e\x1a$\x20tx\x20is\x20the\x20transaction\x20to\
    \x20simulate.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04[\x02Y\x19\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x03[\x02\x16\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03[\x17\x19\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03[\x1c\x1d\nX\n\
    \x02\x04\x05\x12\x04`\0e\x01\x1aL\x20SimulateResponse\x20is\x20the\x20re\
    sponse\x20type\x20for\x20the\n\x20Service.SimulateRPC\x20method.\n\n\n\n\
    \x03\x04\x05\x01\x12\x03`\x08\x18\nL\n\x04\x04\x05\x02\0\x12\x03b\x020\
    \x1a?\x20gas_info\x20is\x20the\x20information\x20about\x20gas\x20used\
    \x20in\x20the\x20simulation.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04b\x02`\
    \x1a\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03b\x02\"\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03b#+\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03b./\n6\n\x04\
    \x04\x05\x02\x01\x12\x03d\x02-\x1a)\x20result\x20is\x20the\x20result\x20\
    of\x20the\x20simulation.\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04d\x02b0\
    \n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03d\x02!\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03d\"(\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03d+,\nQ\n\x02\
    \x04\x06\x12\x04i\0l\x01\x1aE\x20GetTxRequest\x20is\x20the\x20request\
    \x20type\x20for\x20the\x20Service.GetTx\n\x20RPC\x20method.\n\n\n\n\x03\
    \x04\x06\x01\x12\x03i\x08\x14\nE\n\x04\x04\x06\x02\0\x12\x03k\x02\x12\
    \x1a8\x20hash\x20is\x20the\x20tx\x20hash\x20to\x20query,\x20encoded\x20a\
    s\x20a\x20hex\x20string.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04k\x02i\x16\
    \n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03k\x02\x08\n\x0c\n\x05\x04\x06\x02\
    \0\x01\x12\x03k\t\r\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03k\x10\x11\nN\n\
    \x02\x04\x07\x12\x04o\0t\x01\x1aB\x20GetTxResponse\x20is\x20the\x20respo\
    nse\x20type\x20for\x20the\x20Service.GetTx\x20method.\n\n\n\n\x03\x04\
    \x07\x01\x12\x03o\x08\x15\n-\n\x04\x04\x07\x02\0\x12\x03q\x02\x1e\x1a\
    \x20\x20tx\x20is\x20the\x20queried\x20transaction.\n\n\r\n\x05\x04\x07\
    \x02\0\x04\x12\x04q\x02o\x17\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03q\x02\
    \x16\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03q\x17\x19\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03q\x1c\x1d\n6\n\x04\x04\x07\x02\x01\x12\x03s\x026\x1a)\
    \x20tx_response\x20is\x20the\x20queried\x20TxResponses.\n\n\r\n\x05\x04\
    \x07\x02\x01\x04\x12\x04s\x02q\x1e\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\
    \x03s\x02%\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03s&1\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03s45b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
