// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/bank/v1beta1/bank.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub send_enabled: ::protobuf::RepeatedField<SendEnabled>,
    pub default_send_enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1;


    pub fn get_send_enabled(&self) -> &[SendEnabled] {
        &self.send_enabled
    }
    pub fn clear_send_enabled(&mut self) {
        self.send_enabled.clear();
    }

    // Param is passed by value, moved
    pub fn set_send_enabled(&mut self, v: ::protobuf::RepeatedField<SendEnabled>) {
        self.send_enabled = v;
    }

    // Mutable pointer to the field.
    pub fn mut_send_enabled(&mut self) -> &mut ::protobuf::RepeatedField<SendEnabled> {
        &mut self.send_enabled
    }

    // Take field
    pub fn take_send_enabled(&mut self) -> ::protobuf::RepeatedField<SendEnabled> {
        ::std::mem::replace(&mut self.send_enabled, ::protobuf::RepeatedField::new())
    }

    // bool default_send_enabled = 2;


    pub fn get_default_send_enabled(&self) -> bool {
        self.default_send_enabled
    }
    pub fn clear_default_send_enabled(&mut self) {
        self.default_send_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_default_send_enabled(&mut self, v: bool) {
        self.default_send_enabled = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.send_enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.send_enabled)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.default_send_enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.send_enabled {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.default_send_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.send_enabled {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.default_send_enabled != false {
            os.write_bool(2, self.default_send_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SendEnabled>>(
                "send_enabled",
                |m: &Params| { &m.send_enabled },
                |m: &mut Params| { &mut m.send_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "default_send_enabled",
                |m: &Params| { &m.default_send_enabled },
                |m: &mut Params| { &mut m.default_send_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.send_enabled.clear();
        self.default_send_enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendEnabled {
    // message fields
    pub denom: ::std::string::String,
    pub enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendEnabled {
    fn default() -> &'a SendEnabled {
        <SendEnabled as ::protobuf::Message>::default_instance()
    }
}

impl SendEnabled {
    pub fn new() -> SendEnabled {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // bool enabled = 2;


    pub fn get_enabled(&self) -> bool {
        self.enabled
    }
    pub fn clear_enabled(&mut self) {
        self.enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: bool) {
        self.enabled = v;
    }
}

impl ::protobuf::Message for SendEnabled {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if self.enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if self.enabled != false {
            os.write_bool(2, self.enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendEnabled {
        SendEnabled::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &SendEnabled| { &m.denom },
                |m: &mut SendEnabled| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enabled",
                |m: &SendEnabled| { &m.enabled },
                |m: &mut SendEnabled| { &mut m.enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendEnabled>(
                "SendEnabled",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendEnabled {
        static instance: ::protobuf::rt::LazyV2<SendEnabled> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendEnabled::new)
    }
}

impl ::protobuf::Clear for SendEnabled {
    fn clear(&mut self) {
        self.denom.clear();
        self.enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendEnabled {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendEnabled {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Input {
    // message fields
    pub address: ::std::string::String,
    pub coins: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Input {
    fn default() -> &'a Input {
        <Input as ::protobuf::Message>::default_instance()
    }
}

impl Input {
    pub fn new() -> Input {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin coins = 2;


    pub fn get_coins(&self) -> &[super::coin::Coin] {
        &self.coins
    }
    pub fn clear_coins(&mut self) {
        self.coins.clear();
    }

    // Param is passed by value, moved
    pub fn set_coins(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.coins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coins(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.coins
    }

    // Take field
    pub fn take_coins(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.coins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Input {
    fn is_initialized(&self) -> bool {
        for v in &self.coins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.coins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.coins {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Input {
        Input::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Input| { &m.address },
                |m: &mut Input| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "coins",
                |m: &Input| { &m.coins },
                |m: &mut Input| { &mut m.coins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Input>(
                "Input",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Input {
        static instance: ::protobuf::rt::LazyV2<Input> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Input::new)
    }
}

impl ::protobuf::Clear for Input {
    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Input {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Input {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Output {
    // message fields
    pub address: ::std::string::String,
    pub coins: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Output {
    fn default() -> &'a Output {
        <Output as ::protobuf::Message>::default_instance()
    }
}

impl Output {
    pub fn new() -> Output {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin coins = 2;


    pub fn get_coins(&self) -> &[super::coin::Coin] {
        &self.coins
    }
    pub fn clear_coins(&mut self) {
        self.coins.clear();
    }

    // Param is passed by value, moved
    pub fn set_coins(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.coins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coins(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.coins
    }

    // Take field
    pub fn take_coins(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.coins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Output {
    fn is_initialized(&self) -> bool {
        for v in &self.coins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.coins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.coins {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Output {
        Output::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Output| { &m.address },
                |m: &mut Output| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "coins",
                |m: &Output| { &m.coins },
                |m: &mut Output| { &mut m.coins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Output>(
                "Output",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Output {
        static instance: ::protobuf::rt::LazyV2<Output> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Output::new)
    }
}

impl ::protobuf::Clear for Output {
    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Output {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Output {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Supply {
    // message fields
    pub total: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Supply {
    fn default() -> &'a Supply {
        <Supply as ::protobuf::Message>::default_instance()
    }
}

impl Supply {
    pub fn new() -> Supply {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin total = 1;


    pub fn get_total(&self) -> &[super::coin::Coin] {
        &self.total
    }
    pub fn clear_total(&mut self) {
        self.total.clear();
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.total = v;
    }

    // Mutable pointer to the field.
    pub fn mut_total(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.total
    }

    // Take field
    pub fn take_total(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.total, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Supply {
    fn is_initialized(&self) -> bool {
        for v in &self.total {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.total)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.total {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.total {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Supply {
        Supply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "total",
                |m: &Supply| { &m.total },
                |m: &mut Supply| { &mut m.total },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Supply>(
                "Supply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Supply {
        static instance: ::protobuf::rt::LazyV2<Supply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Supply::new)
    }
}

impl ::protobuf::Clear for Supply {
    fn clear(&mut self) {
        self.total.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Supply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Supply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DenomUnit {
    // message fields
    pub denom: ::std::string::String,
    pub exponent: u32,
    pub aliases: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DenomUnit {
    fn default() -> &'a DenomUnit {
        <DenomUnit as ::protobuf::Message>::default_instance()
    }
}

impl DenomUnit {
    pub fn new() -> DenomUnit {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // uint32 exponent = 2;


    pub fn get_exponent(&self) -> u32 {
        self.exponent
    }
    pub fn clear_exponent(&mut self) {
        self.exponent = 0;
    }

    // Param is passed by value, moved
    pub fn set_exponent(&mut self, v: u32) {
        self.exponent = v;
    }

    // repeated string aliases = 3;


    pub fn get_aliases(&self) -> &[::std::string::String] {
        &self.aliases
    }
    pub fn clear_aliases(&mut self) {
        self.aliases.clear();
    }

    // Param is passed by value, moved
    pub fn set_aliases(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.aliases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aliases(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.aliases
    }

    // Take field
    pub fn take_aliases(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.aliases, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DenomUnit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.exponent = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.aliases)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if self.exponent != 0 {
            my_size += ::protobuf::rt::value_size(2, self.exponent, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if self.exponent != 0 {
            os.write_uint32(2, self.exponent)?;
        }
        for v in &self.aliases {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DenomUnit {
        DenomUnit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &DenomUnit| { &m.denom },
                |m: &mut DenomUnit| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "exponent",
                |m: &DenomUnit| { &m.exponent },
                |m: &mut DenomUnit| { &mut m.exponent },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "aliases",
                |m: &DenomUnit| { &m.aliases },
                |m: &mut DenomUnit| { &mut m.aliases },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DenomUnit>(
                "DenomUnit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DenomUnit {
        static instance: ::protobuf::rt::LazyV2<DenomUnit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DenomUnit::new)
    }
}

impl ::protobuf::Clear for DenomUnit {
    fn clear(&mut self) {
        self.denom.clear();
        self.exponent = 0;
        self.aliases.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DenomUnit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DenomUnit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub description: ::std::string::String,
    pub denom_units: ::protobuf::RepeatedField<DenomUnit>,
    pub base: ::std::string::String,
    pub display: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .cosmos.bank.v1beta1.DenomUnit denom_units = 2;


    pub fn get_denom_units(&self) -> &[DenomUnit] {
        &self.denom_units
    }
    pub fn clear_denom_units(&mut self) {
        self.denom_units.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom_units(&mut self, v: ::protobuf::RepeatedField<DenomUnit>) {
        self.denom_units = v;
    }

    // Mutable pointer to the field.
    pub fn mut_denom_units(&mut self) -> &mut ::protobuf::RepeatedField<DenomUnit> {
        &mut self.denom_units
    }

    // Take field
    pub fn take_denom_units(&mut self) -> ::protobuf::RepeatedField<DenomUnit> {
        ::std::mem::replace(&mut self.denom_units, ::protobuf::RepeatedField::new())
    }

    // string base = 3;


    pub fn get_base(&self) -> &str {
        &self.base
    }
    pub fn clear_base(&mut self) {
        self.base.clear();
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: ::std::string::String) {
        self.base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base(&mut self) -> &mut ::std::string::String {
        &mut self.base
    }

    // Take field
    pub fn take_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base, ::std::string::String::new())
    }

    // string display = 4;


    pub fn get_display(&self) -> &str {
        &self.display
    }
    pub fn clear_display(&mut self) {
        self.display.clear();
    }

    // Param is passed by value, moved
    pub fn set_display(&mut self, v: ::std::string::String) {
        self.display = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display(&mut self) -> &mut ::std::string::String {
        &mut self.display
    }

    // Take field
    pub fn take_display(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.denom_units {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.denom_units)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        for value in &self.denom_units {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.base.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.base);
        }
        if !self.display.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.display);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        for v in &self.denom_units {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.base.is_empty() {
            os.write_string(3, &self.base)?;
        }
        if !self.display.is_empty() {
            os.write_string(4, &self.display)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Metadata| { &m.description },
                |m: &mut Metadata| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DenomUnit>>(
                "denom_units",
                |m: &Metadata| { &m.denom_units },
                |m: &mut Metadata| { &mut m.denom_units },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base",
                |m: &Metadata| { &m.base },
                |m: &mut Metadata| { &mut m.base },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display",
                |m: &Metadata| { &m.display },
                |m: &mut Metadata| { &mut m.display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metadata>(
                "Metadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metadata {
        static instance: ::protobuf::rt::LazyV2<Metadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metadata::new)
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.description.clear();
        self.denom_units.clear();
        self.base.clear();
        self.display.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/bank/v1beta1/bank.proto\x12\x13cosmos.bank.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/base/\
    v1beta1/coin.proto\"\xd3\x01\n\x06Params\x12f\n\x0csend_enabled\x18\x01\
    \x20\x03(\x0b2\x20.cosmos.bank.v1beta1.SendEnabledR\x0bsendEnabledB!\xf2\
    \xde\x1f\x1dyaml:\"send_enabled,omitempty\"\x12[\n\x14default_send_enabl\
    ed\x18\x02\x20\x01(\x08R\x12defaultSendEnabledB)\xf2\xde\x1f%yaml:\"defa\
    ult_send_enabled,omitempty\":\x04\x98\xa0\x1f\0\"G\n\x0bSendEnabled\x12\
    \x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x18\n\x07enabled\x18\
    \x02\x20\x01(\x08R\x07enabled:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\x8e\
    \x01\n\x05Input\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12a\
    \n\x05coins\x18\x02\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05coins\
    B0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\
    \x08\xe8\xa0\x1f\0\x88\xa0\x1f\0\"\x8f\x01\n\x06Output\x12\x18\n\x07addr\
    ess\x18\x01\x20\x01(\tR\x07address\x12a\n\x05coins\x18\x02\x20\x03(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\x05coinsB0\xaa\xdf\x1f(github.com/cosmos/\
    cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \xb2\x01\n\x06Supply\x12a\n\x05total\x18\x01\x20\x03(\x0b2\x19.cosmos.ba\
    se.v1beta1.CoinR\x05totalB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/typ\
    es.Coins\xc8\xde\x1f\0:E\xd2\xb4-5*github.com/cosmos/cosmos-sdk/x/bank/e\
    xported.SupplyI\x88\xa0\x1f\0\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"W\n\tDenomU\
    nit\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x1a\n\x08exponen\
    t\x18\x02\x20\x01(\rR\x08exponent\x12\x18\n\x07aliases\x18\x03\x20\x03(\
    \tR\x07aliases\"\x9b\x01\n\x08Metadata\x12\x20\n\x0bdescription\x18\x01\
    \x20\x01(\tR\x0bdescription\x12?\n\x0bdenom_units\x18\x02\x20\x03(\x0b2\
    \x1e.cosmos.bank.v1beta1.DenomUnitR\ndenomUnits\x12\x12\n\x04base\x18\
    \x03\x20\x01(\tR\x04base\x12\x18\n\x07display\x18\x04\x20\x01(\tR\x07dis\
    playB+Z)github.com/cosmos/cosmos-sdk/x/bank/typesJ\xaa\x17\n\x06\x12\x04\
    \0\0T\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\
    \x08\x1b\n\t\n\x02\x03\0\x12\x03\x03\x07\x1d\n\t\n\x02\x03\x01\x12\x03\
    \x04\x07\"\n\t\n\x02\x03\x02\x12\x03\x05\x07'\n\x08\n\x01\x08\x12\x03\
    \x07\0@\n\t\n\x02\x08\x0b\x12\x03\x07\0@\n@\n\x02\x04\0\x12\x04\n\0\x0e\
    \x01\x1a4\x20Params\x20defines\x20the\x20parameters\x20for\x20the\x20ban\
    k\x20module.\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x0e\n\n\n\x03\x04\0\x07\
    \x12\x03\x0b\x024\n\r\n\x06\x04\0\x07\x83\xf4\x03\x12\x03\x0b\x024\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x0c\x02k\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x0c\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x0b\x16\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0c\x17#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0c./\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0c0j\n\x0f\n\x08\x04\0\x02\0\
    \x08\xee\xfb\x03\x12\x03\x0c1i\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x02s\
    \n\r\n\x05\x04\0\x02\x01\x04\x12\x04\r\x02\x0ck\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\r\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x17+\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r./\n\x0c\n\x05\x04\0\x02\x01\x08\
    \x12\x03\r0r\n\x0f\n\x08\x04\0\x02\x01\x08\xee\xfb\x03\x12\x03\r1q\nb\n\
    \x02\x04\x01\x12\x04\x12\0\x17\x01\x1aV\x20SendEnabled\x20maps\x20coin\
    \x20denom\x20to\x20a\x20send_enabled\x20status\x20(whether\x20a\x20denom\
    \x20is\n\x20sendable).\n\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x13\n\n\n\
    \x03\x04\x01\x07\x12\x03\x13\x02-\n\r\n\x06\x04\x01\x07\x8d\xf4\x03\x12\
    \x03\x13\x02-\n\n\n\x03\x04\x01\x07\x12\x03\x14\x02.\n\r\n\x06\x04\x01\
    \x07\x83\xf4\x03\x12\x03\x14\x02.\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x15\
    \x02*\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x15\x02\x14.\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x15\t\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x15()\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x16\x02*\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x16\
    \x02\x15*\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x16\x02\x06\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x16\t\x10\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x16()\n-\n\x02\x04\x02\x12\x04\x1a\0!\x01\x1a!\x20Input\x20\
    models\x20transaction\x20input.\n\n\n\n\x03\x04\x02\x01\x12\x03\x1a\x08\
    \r\n\n\n\x03\x04\x02\x07\x12\x03\x1b\x02-\n\r\n\x06\x04\x02\x07\x8d\xf4\
    \x03\x12\x03\x1b\x02-\n\n\n\x03\x04\x02\x07\x12\x03\x1c\x02-\n\r\n\x06\
    \x04\x02\x07\x81\xf4\x03\x12\x03\x1c\x02-\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x1e\x02.\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1e\x02\x1c-\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x1e\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1e,-\n\x0c\n\
    \x04\x04\x02\x02\x01\x12\x04\x1f\x02\x20l\n\x0c\n\x05\x04\x02\x02\x01\
    \x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1f\x0b#\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f$)\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1f,-\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03\x20\x06k\
    \n\x0f\n\x08\x04\x02\x02\x01\x08\xe9\xfb\x03\x12\x03\x20\x07#\n\x0f\n\
    \x08\x04\x02\x02\x01\x08\xf5\xfb\x03\x12\x03\x20%j\n0\n\x02\x04\x03\x12\
    \x04$\0+\x01\x1a$\x20Output\x20models\x20transaction\x20outputs.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03$\x08\x0e\n\n\n\x03\x04\x03\x07\x12\x03%\x02-\n\
    \r\n\x06\x04\x03\x07\x8d\xf4\x03\x12\x03%\x02-\n\n\n\x03\x04\x03\x07\x12\
    \x03&\x02-\n\r\n\x06\x04\x03\x07\x81\xf4\x03\x12\x03&\x02-\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03(\x02.\n\r\n\x05\x04\x03\x02\0\x04\x12\x04(\x02&-\
    \n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03(\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(,-\n\x0c\n\
    \x04\x04\x03\x02\x01\x12\x04)\x02*l\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\
    \x03)\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03)\x0b#\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03)$)\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03)\
    ,-\n\x0c\n\x05\x04\x03\x02\x01\x08\x12\x03*\x06k\n\x0f\n\x08\x04\x03\x02\
    \x01\x08\xe9\xfb\x03\x12\x03*\x07#\n\x0f\n\x08\x04\x03\x02\x01\x08\xf5\
    \xfb\x03\x12\x03*%j\np\n\x02\x04\x04\x12\x04/\08\x01\x1ad\x20Supply\x20r\
    epresents\x20a\x20struct\x20that\x20passively\x20keeps\x20track\x20of\
    \x20the\x20total\x20supply\n\x20amounts\x20in\x20the\x20network.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03/\x08\x0e\n\n\n\x03\x04\x04\x07\x12\x030\x02-\n\
    \r\n\x06\x04\x04\x07\x8d\xf4\x03\x12\x030\x02-\n\n\n\x03\x04\x04\x07\x12\
    \x031\x02.\n\r\n\x06\x04\x04\x07\x81\xf4\x03\x12\x031\x02.\n\n\n\x03\x04\
    \x04\x07\x12\x032\x02.\n\r\n\x06\x04\x04\x07\x83\xf4\x03\x12\x032\x02.\n\
    \n\n\x03\x04\x04\x07\x12\x034\x02g\n\r\n\x06\x04\x04\x07\xca\xd6\x05\x12\
    \x034\x02g\n\x0c\n\x04\x04\x04\x02\0\x12\x046\x027l\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x036\x0b#\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x036$)\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x036,-\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x037\x06k\n\x0f\n\x08\x04\
    \x04\x02\0\x08\xe9\xfb\x03\x12\x037\x07#\n\x0f\n\x08\x04\x04\x02\0\x08\
    \xf5\xfb\x03\x12\x037%j\ni\n\x02\x04\x05\x12\x04<\0G\x01\x1a]\x20DenomUn\
    it\x20represents\x20a\x20struct\x20that\x20describes\x20a\x20given\n\x20\
    denomination\x20unit\x20of\x20the\x20basic\x20token.\n\n\n\n\x03\x04\x05\
    \x01\x12\x03<\x08\x11\nT\n\x04\x04\x05\x02\0\x12\x03>\x02\x13\x1aG\x20de\
    nom\x20represents\x20the\x20string\x20name\x20of\x20the\x20given\x20deno\
    m\x20unit\x20(e.g\x20uatom).\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04>\x02<\
    \x13\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03>\t\x0e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03>\x11\x12\
    \n\xa6\x02\n\x04\x04\x05\x02\x01\x12\x03D\x02\x16\x1a\x98\x02\x20exponen\
    t\x20represents\x20power\x20of\x2010\x20exponent\x20that\x20one\x20must\
    \n\x20raise\x20the\x20base_denom\x20to\x20in\x20order\x20to\x20equal\x20\
    the\x20given\x20DenomUnit's\x20denom\n\x201\x20denom\x20=\x201^exponent\
    \x20base_denom\n\x20(e.g.\x20with\x20a\x20base_denom\x20of\x20uatom,\x20\
    one\x20can\x20create\x20a\x20DenomUnit\x20of\x20'atom'\x20with\n\x20expo\
    nent\x20=\x206,\x20thus:\x201\x20atom\x20=\x2010^6\x20uatom).\n\n\r\n\
    \x05\x04\x05\x02\x01\x04\x12\x04D\x02>\x13\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03D\t\x11\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03D\x14\x15\nF\n\x04\x04\x05\x02\x02\
    \x12\x03F\x02\x1e\x1a9\x20aliases\x20is\x20a\x20list\x20of\x20string\x20\
    aliases\x20for\x20the\x20given\x20denom\n\n\x0c\n\x05\x04\x05\x02\x02\
    \x04\x12\x03F\x02\n\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03F\x0b\x11\n\
    \x0c\n\x05\x04\x05\x02\x02\x01\x12\x03F\x12\x19\n\x0c\n\x05\x04\x05\x02\
    \x02\x03\x12\x03F\x1c\x1d\nI\n\x02\x04\x06\x12\x04K\0T\x01\x1a=\x20Metad\
    ata\x20represents\x20a\x20struct\x20that\x20describes\n\x20a\x20basic\
    \x20token.\n\n\n\n\x03\x04\x06\x01\x12\x03K\x08\x10\n\x0b\n\x04\x04\x06\
    \x02\0\x12\x03L\x02\x19\n\r\n\x05\x04\x06\x02\0\x04\x12\x04L\x02K\x12\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03L\t\x14\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03L\x17\x18\nN\n\
    \x04\x04\x06\x02\x01\x12\x03N\x02%\x1aA\x20denom_units\x20represents\x20\
    the\x20list\x20of\x20DenomUnit's\x20for\x20a\x20given\x20coin\n\n\x0c\n\
    \x05\x04\x06\x02\x01\x04\x12\x03N\x02\n\n\x0c\n\x05\x04\x06\x02\x01\x06\
    \x12\x03N\x0b\x14\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03N\x15\x20\n\x0c\
    \n\x05\x04\x06\x02\x01\x03\x12\x03N#$\nZ\n\x04\x04\x06\x02\x02\x12\x03P\
    \x02\x12\x1aM\x20base\x20represents\x20the\x20base\x20denom\x20(should\
    \x20be\x20the\x20DenomUnit\x20with\x20exponent\x20=\x200).\n\n\r\n\x05\
    \x04\x06\x02\x02\x04\x12\x04P\x02N%\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x03P\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03P\t\r\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03P\x10\x11\nZ\n\x04\x04\x06\x02\x03\x12\x03S\
    \x02\x15\x1aM\x20display\x20indicates\x20the\x20suggested\x20denom\x20th\
    at\x20should\x20be\n\x20displayed\x20in\x20clients.\n\n\r\n\x05\x04\x06\
    \x02\x03\x04\x12\x04S\x02P\x12\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03S\
    \x02\x08\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03S\t\x10\n\x0c\n\x05\x04\
    \x06\x02\x03\x03\x12\x03S\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
