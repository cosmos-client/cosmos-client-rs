// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/applications/transfer/v1/transfer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct FungibleTokenPacketData {
    // message fields
    pub denom: ::std::string::String,
    pub amount: u64,
    pub sender: ::std::string::String,
    pub receiver: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FungibleTokenPacketData {
    fn default() -> &'a FungibleTokenPacketData {
        <FungibleTokenPacketData as ::protobuf::Message>::default_instance()
    }
}

impl FungibleTokenPacketData {
    pub fn new() -> FungibleTokenPacketData {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    // string sender = 3;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string receiver = 4;


    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }
    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FungibleTokenPacketData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sender);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.receiver);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if self.amount != 0 {
            os.write_uint64(2, self.amount)?;
        }
        if !self.sender.is_empty() {
            os.write_string(3, &self.sender)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(4, &self.receiver)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FungibleTokenPacketData {
        FungibleTokenPacketData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &FungibleTokenPacketData| { &m.denom },
                |m: &mut FungibleTokenPacketData| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &FungibleTokenPacketData| { &m.amount },
                |m: &mut FungibleTokenPacketData| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &FungibleTokenPacketData| { &m.sender },
                |m: &mut FungibleTokenPacketData| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receiver",
                |m: &FungibleTokenPacketData| { &m.receiver },
                |m: &mut FungibleTokenPacketData| { &mut m.receiver },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FungibleTokenPacketData>(
                "FungibleTokenPacketData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FungibleTokenPacketData {
        static instance: ::protobuf::rt::LazyV2<FungibleTokenPacketData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FungibleTokenPacketData::new)
    }
}

impl ::protobuf::Clear for FungibleTokenPacketData {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount = 0;
        self.sender.clear();
        self.receiver.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FungibleTokenPacketData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FungibleTokenPacketData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DenomTrace {
    // message fields
    pub path: ::std::string::String,
    pub base_denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DenomTrace {
    fn default() -> &'a DenomTrace {
        <DenomTrace as ::protobuf::Message>::default_instance()
    }
}

impl DenomTrace {
    pub fn new() -> DenomTrace {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string base_denom = 2;


    pub fn get_base_denom(&self) -> &str {
        &self.base_denom
    }
    pub fn clear_base_denom(&mut self) {
        self.base_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_denom(&mut self, v: ::std::string::String) {
        self.base_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_denom(&mut self) -> &mut ::std::string::String {
        &mut self.base_denom
    }

    // Take field
    pub fn take_base_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DenomTrace {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.base_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.base_denom.is_empty() {
            os.write_string(2, &self.base_denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DenomTrace {
        DenomTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &DenomTrace| { &m.path },
                |m: &mut DenomTrace| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_denom",
                |m: &DenomTrace| { &m.base_denom },
                |m: &mut DenomTrace| { &mut m.base_denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DenomTrace>(
                "DenomTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DenomTrace {
        static instance: ::protobuf::rt::LazyV2<DenomTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DenomTrace::new)
    }
}

impl ::protobuf::Clear for DenomTrace {
    fn clear(&mut self) {
        self.path.clear();
        self.base_denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DenomTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DenomTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub send_enabled: bool,
    pub receive_enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // bool send_enabled = 1;


    pub fn get_send_enabled(&self) -> bool {
        self.send_enabled
    }
    pub fn clear_send_enabled(&mut self) {
        self.send_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_send_enabled(&mut self, v: bool) {
        self.send_enabled = v;
    }

    // bool receive_enabled = 2;


    pub fn get_receive_enabled(&self) -> bool {
        self.receive_enabled
    }
    pub fn clear_receive_enabled(&mut self) {
        self.receive_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_receive_enabled(&mut self, v: bool) {
        self.receive_enabled = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.send_enabled = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.receive_enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.send_enabled != false {
            my_size += 2;
        }
        if self.receive_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.send_enabled != false {
            os.write_bool(1, self.send_enabled)?;
        }
        if self.receive_enabled != false {
            os.write_bool(2, self.receive_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "send_enabled",
                |m: &Params| { &m.send_enabled },
                |m: &mut Params| { &mut m.send_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "receive_enabled",
                |m: &Params| { &m.receive_enabled },
                |m: &mut Params| { &mut m.receive_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.send_enabled = false;
        self.receive_enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+ibc/applications/transfer/v1/transfer.proto\x12\x1cibc.applications.t\
    ransfer.v1\x1a\x14gogoproto/gogo.proto\"{\n\x17FungibleTokenPacketData\
    \x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x16\n\x06amount\x18\
    \x02\x20\x01(\x04R\x06amount\x12\x16\n\x06sender\x18\x03\x20\x01(\tR\x06\
    sender\x12\x1a\n\x08receiver\x18\x04\x20\x01(\tR\x08receiver\"?\n\nDenom\
    Trace\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x1d\n\nbase_deno\
    m\x18\x02\x20\x01(\tR\tbaseDenom\"\x89\x01\n\x06Params\x12:\n\x0csend_en\
    abled\x18\x01\x20\x01(\x08R\x0bsendEnabledB\x17\xf2\xde\x1f\x13yaml:\"se\
    nd_enabled\"\x12C\n\x0freceive_enabled\x18\x02\x20\x01(\x08R\x0ereceiveE\
    nabledB\x1a\xf2\xde\x1f\x16yaml:\"receive_enabled\"B@Z>github.com/cosmos\
    /cosmos-sdk/x/ibc/applications/transfer/typesJ\x82\x0e\n\x06\x12\x04\0\0\
    *\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08$\n\
    \x08\n\x01\x08\x12\x03\x03\0U\n\t\n\x02\x08\x0b\x12\x03\x03\0U\n\t\n\x02\
    \x03\0\x12\x03\x05\x07\x1d\n\xd1\x01\n\x02\x04\0\x12\x04\n\0\x13\x01\x1a\
    \xc4\x01\x20FungibleTokenPacketData\x20defines\x20a\x20struct\x20for\x20\
    the\x20packet\x20payload\n\x20See\x20FungibleTokenPacketData\x20spec:\n\
    \x20https://github.com/cosmos/ics/tree/master/spec/ics-020-fungible-toke\
    n-transfer#data-structures\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x1f\n7\n\
    \x04\x04\0\x02\0\x12\x03\x0c\x02\x13\x1a*\x20the\x20token\x20denominatio\
    n\x20to\x20be\x20transferred\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x0c\x02\
    \n!\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x0c\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x11\
    \x12\n1\n\x04\x04\0\x02\x01\x12\x03\x0e\x02\x14\x1a$\x20the\x20token\x20\
    amount\x20to\x20be\x20transferred\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\
    \x0e\x02\x0c\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x0e\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x0e\x12\x13\n!\n\x04\x04\0\x02\x02\x12\x03\x10\x02\x14\x1a\x14\
    \x20the\x20sender\x20address\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x10\
    \x02\x0e\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x10\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x10\t\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x10\x12\x13\n=\n\x04\x04\0\x02\x03\x12\x03\x12\x02\x16\x1a0\x20\
    the\x20recipient\x20address\x20on\x20the\x20destination\x20chain\n\n\r\n\
    \x05\x04\0\x02\x03\x04\x12\x04\x12\x02\x10\x14\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x12\t\x11\
    \n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12\x14\x15\n{\n\x02\x04\x01\x12\
    \x04\x17\0\x1d\x01\x1ao\x20DenomTrace\x20contains\x20the\x20base\x20deno\
    mination\x20for\x20ICS20\x20fungible\x20tokens\x20and\x20the\n\x20source\
    \x20tracing\x20information\x20path.\n\n\n\n\x03\x04\x01\x01\x12\x03\x17\
    \x08\x12\nu\n\x04\x04\x01\x02\0\x12\x03\x1a\x02\x12\x1ah\x20path\x20defi\
    nes\x20the\x20chain\x20of\x20port/channel\x20identifiers\x20used\x20for\
    \x20tracing\x20the\n\x20source\x20of\x20the\x20fungible\x20token.\n\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x04\x1a\x02\x17\x14\n\x0c\n\x05\x04\x01\x02\
    \0\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a\t\r\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x10\x11\n?\n\x04\x04\x01\x02\
    \x01\x12\x03\x1c\x02\x18\x1a2\x20base\x20denomination\x20of\x20the\x20re\
    layed\x20fungible\x20token.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x1c\
    \x02\x1a\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1c\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x1c\t\x13\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x1c\x16\x17\n\xfb\x01\n\x02\x04\x02\x12\x04#\0*\x01\x1a\xee\
    \x01\x20Params\x20defines\x20the\x20set\x20of\x20IBC\x20transfer\x20para\
    meters.\n\x20NOTE:\x20To\x20prevent\x20a\x20single\x20token\x20from\x20b\
    eing\x20transferred,\x20set\x20the\n\x20TransfersEnabled\x20parameter\
    \x20to\x20true\x20and\x20then\x20set\x20the\x20bank\x20module's\x20SendE\
    nabled\n\x20parameter\x20for\x20the\x20denomination\x20to\x20false.\n\n\
    \n\n\x03\x04\x02\x01\x12\x03#\x08\x0e\na\n\x04\x04\x02\x02\0\x12\x03&\
    \x02I\x1aT\x20send_enabled\x20enables\x20or\x20disables\x20all\x20cross-\
    chain\x20token\x20transfers\x20from\x20this\n\x20chain.\n\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04&\x02#\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03&\
    \x02\x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03&\x07\x13\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03&\x16\x17\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03&\
    \x18H\n\x0f\n\x08\x04\x02\x02\0\x08\xee\xfb\x03\x12\x03&\x19G\nb\n\x04\
    \x04\x02\x02\x01\x12\x03)\x02O\x1aU\x20receive_enabled\x20enables\x20or\
    \x20disables\x20all\x20cross-chain\x20token\x20transfers\x20to\x20this\n\
    \x20chain.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04)\x02&I\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03)\x02\x06\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03)\x07\x16\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03)\x19\x1a\n\x0c\
    \n\x05\x04\x02\x02\x01\x08\x12\x03)\x1bN\n\x0f\n\x08\x04\x02\x02\x01\x08\
    \xee\xfb\x03\x12\x03)\x1cMb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
