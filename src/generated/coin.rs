// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/base/v1beta1/coin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Coin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Coin {
    fn default() -> &'a Coin {
        <Coin as ::protobuf::Message>::default_instance()
    }
}

impl Coin {
    pub fn new() -> Coin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Coin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Coin {
        Coin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &Coin| { &m.denom },
                |m: &mut Coin| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &Coin| { &m.amount },
                |m: &mut Coin| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Coin>(
                "Coin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Coin {
        static instance: ::protobuf::rt::LazyV2<Coin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Coin::new)
    }
}

impl ::protobuf::Clear for Coin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Coin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Coin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DecCoin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecCoin {
    fn default() -> &'a DecCoin {
        <DecCoin as ::protobuf::Message>::default_instance()
    }
}

impl DecCoin {
    pub fn new() -> DecCoin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DecCoin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecCoin {
        DecCoin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &DecCoin| { &m.denom },
                |m: &mut DecCoin| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &DecCoin| { &m.amount },
                |m: &mut DecCoin| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecCoin>(
                "DecCoin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecCoin {
        static instance: ::protobuf::rt::LazyV2<DecCoin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecCoin::new)
    }
}

impl ::protobuf::Clear for DecCoin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecCoin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecCoin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IntProto {
    // message fields
    pub int: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IntProto {
    fn default() -> &'a IntProto {
        <IntProto as ::protobuf::Message>::default_instance()
    }
}

impl IntProto {
    pub fn new() -> IntProto {
        ::std::default::Default::default()
    }

    // string int = 1;


    pub fn get_int(&self) -> &str {
        &self.int
    }
    pub fn clear_int(&mut self) {
        self.int.clear();
    }

    // Param is passed by value, moved
    pub fn set_int(&mut self, v: ::std::string::String) {
        self.int = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_int(&mut self) -> &mut ::std::string::String {
        &mut self.int
    }

    // Take field
    pub fn take_int(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.int, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IntProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.int)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.int.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.int);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.int.is_empty() {
            os.write_string(1, &self.int)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IntProto {
        IntProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "int",
                |m: &IntProto| { &m.int },
                |m: &mut IntProto| { &mut m.int },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IntProto>(
                "IntProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IntProto {
        static instance: ::protobuf::rt::LazyV2<IntProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IntProto::new)
    }
}

impl ::protobuf::Clear for IntProto {
    fn clear(&mut self) {
        self.int.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IntProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DecProto {
    // message fields
    pub dec: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DecProto {
    fn default() -> &'a DecProto {
        <DecProto as ::protobuf::Message>::default_instance()
    }
}

impl DecProto {
    pub fn new() -> DecProto {
        ::std::default::Default::default()
    }

    // string dec = 1;


    pub fn get_dec(&self) -> &str {
        &self.dec
    }
    pub fn clear_dec(&mut self) {
        self.dec.clear();
    }

    // Param is passed by value, moved
    pub fn set_dec(&mut self, v: ::std::string::String) {
        self.dec = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dec(&mut self) -> &mut ::std::string::String {
        &mut self.dec
    }

    // Take field
    pub fn take_dec(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dec, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DecProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dec)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dec.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dec);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dec.is_empty() {
            os.write_string(1, &self.dec)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DecProto {
        DecProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dec",
                |m: &DecProto| { &m.dec },
                |m: &mut DecProto| { &mut m.dec },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DecProto>(
                "DecProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DecProto {
        static instance: ::protobuf::rt::LazyV2<DecProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DecProto::new)
    }
}

impl ::protobuf::Clear for DecProto {
    fn clear(&mut self) {
        self.dec.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DecProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DecProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecosmos/base/v1beta1/coin.proto\x12\x13cosmos.base.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\"G\n\x04Coin\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\
    \x05denom\x12#\n\x06amount\x18\x02\x20\x01(\tR\x06amountB\x0b\xc8\xde\
    \x1f\0\xda\xde\x1f\x03Int:\x04\xe8\xa0\x1f\x01\"J\n\x07DecCoin\x12\x14\n\
    \x05denom\x18\x01\x20\x01(\tR\x05denom\x12#\n\x06amount\x18\x02\x20\x01(\
    \tR\x06amountB\x0b\xc8\xde\x1f\0\xda\xde\x1f\x03Dec:\x04\xe8\xa0\x1f\x01\
    \")\n\x08IntProto\x12\x1d\n\x03int\x18\x01\x20\x01(\tR\x03intB\x0b\xda\
    \xde\x1f\x03Int\xc8\xde\x1f\0\")\n\x08DecProto\x12\x1d\n\x03dec\x18\x01\
    \x20\x01(\tR\x03decB\x0b\xc8\xde\x1f\0\xda\xde\x1f\x03DecB,Z\"github.com\
    /cosmos/cosmos-sdk/types\xd8\xe1\x1e\0\x80\xe2\x1e\0J\xb3\n\n\x06\x12\
    \x04\0\0'\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x01\x08\x1b\n\t\n\x02\x03\0\x12\x03\x03\x07\x1d\n\x08\n\x01\x08\x12\x03\
    \x05\0O\n\t\n\x02\x08\x0b\x12\x03\x05\0O\n\x08\n\x01\x08\x12\x03\x06\00\
    \n\x0b\n\x04\x08\x9b\xec\x03\x12\x03\x06\00\n\x08\n\x01\x08\x12\x03\x07\
    \00\n\x0b\n\x04\x08\xa0\xec\x03\x12\x03\x07\00\n\xaf\x01\n\x02\x04\0\x12\
    \x04\r\0\x12\x01\x1a\xa2\x01\x20Coin\x20defines\x20a\x20token\x20with\
    \x20a\x20denomination\x20and\x20an\x20amount.\n\n\x20NOTE:\x20The\x20amo\
    unt\x20field\x20is\x20an\x20Int\x20which\x20implements\x20the\x20custom\
    \x20method\n\x20signatures\x20required\x20by\x20gogoproto.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\r\x08\x0c\n\n\n\x03\x04\0\x07\x12\x03\x0e\x02\"\n\r\n\
    \x06\x04\0\x07\x8d\xf4\x03\x12\x03\x0e\x02\"\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x10\x02\x14\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x10\x02\x0e\"\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x10\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x12\x13\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x11\x02S\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\
    \x11\x02\x10\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x11\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x11\x12\x13\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x11\x14R\n\
    \x0f\n\x08\x04\0\x02\x01\x08\xeb\xfb\x03\x12\x03\x11\x153\n\x0f\n\x08\
    \x04\0\x02\x01\x08\xe9\xfb\x03\x12\x03\x115Q\n\xb9\x01\n\x02\x04\x01\x12\
    \x04\x18\0\x1d\x01\x1a\xac\x01\x20DecCoin\x20defines\x20a\x20token\x20wi\
    th\x20a\x20denomination\x20and\x20a\x20decimal\x20amount.\n\n\x20NOTE:\
    \x20The\x20amount\x20field\x20is\x20an\x20Dec\x20which\x20implements\x20\
    the\x20custom\x20method\n\x20signatures\x20required\x20by\x20gogoproto.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\x0f\n\n\n\x03\x04\x01\x07\x12\
    \x03\x19\x02\"\n\r\n\x06\x04\x01\x07\x8d\xf4\x03\x12\x03\x19\x02\"\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x1b\x02\x14\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04\x1b\x02\x19\"\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1b\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1b\t\x0e\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x1b\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1c\x02S\n\
    \r\n\x05\x04\x01\x02\x01\x04\x12\x04\x1c\x02\x1b\x14\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x1c\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1c\x12\x13\n\x0c\n\
    \x05\x04\x01\x02\x01\x08\x12\x03\x1c\x14R\n\x0f\n\x08\x04\x01\x02\x01\
    \x08\xeb\xfb\x03\x12\x03\x1c\x153\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\
    \xfb\x03\x12\x03\x1c5Q\nG\n\x02\x04\x02\x12\x04\x20\0\"\x01\x1a;\x20IntP\
    roto\x20defines\x20a\x20Protobuf\x20wrapper\x20around\x20an\x20Int\x20ob\
    ject.\n\n\n\n\x03\x04\x02\x01\x12\x03\x20\x08\x10\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03!\x02P\n\r\n\x05\x04\x02\x02\0\x04\x12\x04!\x02\x20\x12\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03!\t\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x0f\x10\n\x0c\
    \n\x05\x04\x02\x02\0\x08\x12\x03!\x11O\n\x0f\n\x08\x04\x02\x02\0\x08\xeb\
    \xfb\x03\x12\x03!\x120\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\
    !2N\nF\n\x02\x04\x03\x12\x04%\0'\x01\x1a:\x20DecProto\x20defines\x20a\
    \x20Protobuf\x20wrapper\x20around\x20a\x20Dec\x20object.\n\n\n\n\x03\x04\
    \x03\x01\x12\x03%\x08\x10\n\x0b\n\x04\x04\x03\x02\0\x12\x03&\x02P\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x04&\x02%\x12\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03&\t\x0c\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03&\x0f\x10\n\x0c\n\x05\x04\x03\x02\0\x08\
    \x12\x03&\x11O\n\x0f\n\x08\x04\x03\x02\0\x08\xeb\xfb\x03\x12\x03&\x120\n\
    \x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03&2Nb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
