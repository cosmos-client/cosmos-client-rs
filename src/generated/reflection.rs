// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/base/reflection/v1beta1/reflection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct ListAllInterfacesRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAllInterfacesRequest {
    fn default() -> &'a ListAllInterfacesRequest {
        <ListAllInterfacesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAllInterfacesRequest {
    pub fn new() -> ListAllInterfacesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListAllInterfacesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAllInterfacesRequest {
        ListAllInterfacesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAllInterfacesRequest>(
                "ListAllInterfacesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAllInterfacesRequest {
        static instance: ::protobuf::rt::LazyV2<ListAllInterfacesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAllInterfacesRequest::new)
    }
}

impl ::protobuf::Clear for ListAllInterfacesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAllInterfacesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAllInterfacesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAllInterfacesResponse {
    // message fields
    pub interface_names: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAllInterfacesResponse {
    fn default() -> &'a ListAllInterfacesResponse {
        <ListAllInterfacesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAllInterfacesResponse {
    pub fn new() -> ListAllInterfacesResponse {
        ::std::default::Default::default()
    }

    // repeated string interface_names = 1;


    pub fn get_interface_names(&self) -> &[::std::string::String] {
        &self.interface_names
    }
    pub fn clear_interface_names(&mut self) {
        self.interface_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_interface_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.interface_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_interface_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.interface_names
    }

    // Take field
    pub fn take_interface_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.interface_names, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListAllInterfacesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.interface_names)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.interface_names {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.interface_names {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAllInterfacesResponse {
        ListAllInterfacesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interface_names",
                |m: &ListAllInterfacesResponse| { &m.interface_names },
                |m: &mut ListAllInterfacesResponse| { &mut m.interface_names },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAllInterfacesResponse>(
                "ListAllInterfacesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAllInterfacesResponse {
        static instance: ::protobuf::rt::LazyV2<ListAllInterfacesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAllInterfacesResponse::new)
    }
}

impl ::protobuf::Clear for ListAllInterfacesResponse {
    fn clear(&mut self) {
        self.interface_names.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAllInterfacesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAllInterfacesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListImplementationsRequest {
    // message fields
    pub interface_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListImplementationsRequest {
    fn default() -> &'a ListImplementationsRequest {
        <ListImplementationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListImplementationsRequest {
    pub fn new() -> ListImplementationsRequest {
        ::std::default::Default::default()
    }

    // string interface_name = 1;


    pub fn get_interface_name(&self) -> &str {
        &self.interface_name
    }
    pub fn clear_interface_name(&mut self) {
        self.interface_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_interface_name(&mut self, v: ::std::string::String) {
        self.interface_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface_name(&mut self) -> &mut ::std::string::String {
        &mut self.interface_name
    }

    // Take field
    pub fn take_interface_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interface_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListImplementationsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interface_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.interface_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.interface_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.interface_name.is_empty() {
            os.write_string(1, &self.interface_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListImplementationsRequest {
        ListImplementationsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interface_name",
                |m: &ListImplementationsRequest| { &m.interface_name },
                |m: &mut ListImplementationsRequest| { &mut m.interface_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListImplementationsRequest>(
                "ListImplementationsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListImplementationsRequest {
        static instance: ::protobuf::rt::LazyV2<ListImplementationsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListImplementationsRequest::new)
    }
}

impl ::protobuf::Clear for ListImplementationsRequest {
    fn clear(&mut self) {
        self.interface_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListImplementationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListImplementationsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListImplementationsResponse {
    // message fields
    pub implementation_message_names: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListImplementationsResponse {
    fn default() -> &'a ListImplementationsResponse {
        <ListImplementationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListImplementationsResponse {
    pub fn new() -> ListImplementationsResponse {
        ::std::default::Default::default()
    }

    // repeated string implementation_message_names = 1;


    pub fn get_implementation_message_names(&self) -> &[::std::string::String] {
        &self.implementation_message_names
    }
    pub fn clear_implementation_message_names(&mut self) {
        self.implementation_message_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_implementation_message_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.implementation_message_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_implementation_message_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.implementation_message_names
    }

    // Take field
    pub fn take_implementation_message_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.implementation_message_names, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListImplementationsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.implementation_message_names)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.implementation_message_names {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.implementation_message_names {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListImplementationsResponse {
        ListImplementationsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "implementation_message_names",
                |m: &ListImplementationsResponse| { &m.implementation_message_names },
                |m: &mut ListImplementationsResponse| { &mut m.implementation_message_names },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListImplementationsResponse>(
                "ListImplementationsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListImplementationsResponse {
        static instance: ::protobuf::rt::LazyV2<ListImplementationsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListImplementationsResponse::new)
    }
}

impl ::protobuf::Clear for ListImplementationsResponse {
    fn clear(&mut self) {
        self.implementation_message_names.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListImplementationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListImplementationsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/cosmos/base/reflection/v1beta1/reflection.proto\x12\x1ecosmos.base.re\
    flection.v1beta1\x1a\x1cgoogle/api/annotations.proto\"\x1a\n\x18ListAllI\
    nterfacesRequest\"D\n\x19ListAllInterfacesResponse\x12'\n\x0finterface_n\
    ames\x18\x01\x20\x03(\tR\x0einterfaceNames\"C\n\x1aListImplementationsRe\
    quest\x12%\n\x0einterface_name\x18\x01\x20\x01(\tR\rinterfaceName\"_\n\
    \x1bListImplementationsResponse\x12@\n\x1cimplementation_message_names\
    \x18\x01\x20\x03(\tR\x1aimplementationMessageNames2\xb8\x03\n\x11Reflect\
    ionService\x12\xbc\x01\n\x11ListAllInterfaces\x128.cosmos.base.reflectio\
    n.v1beta1.ListAllInterfacesRequest\x1a9.cosmos.base.reflection.v1beta1.L\
    istAllInterfacesResponse\"2\x82\xd3\xe4\x93\x02,\x12*/cosmos/base/reflec\
    tion/v1beta1/interfaces\x12\xe3\x01\n\x13ListImplementations\x12:.cosmos\
    .base.reflection.v1beta1.ListImplementationsRequest\x1a;.cosmos.base.ref\
    lection.v1beta1.ListImplementationsResponse\"S\x82\xd3\xe4\x93\x02M\x12K\
    /cosmos/base/reflection/v1beta1/interfaces/{interface_name}/implementati\
    onsB5Z3github.com/cosmos/cosmos-sdk/client/grpc/reflectionJ\xf4\t\n\x06\
    \x12\x04\0\0+\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\x08&\n\t\n\x02\x03\0\x12\x03\x03\x07%\n\x08\n\x01\x08\x12\x03\
    \x05\0J\n\t\n\x02\x08\x0b\x12\x03\x05\0J\nK\n\x02\x06\0\x12\x04\x08\0\
    \x15\x01\x1a?\x20ReflectionService\x20defines\x20a\x20service\x20for\x20\
    interface\x20reflection.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x19\na\n\
    \x04\x06\0\x02\0\x12\x04\x0b\x02\r\x03\x1aS\x20ListAllInterfaces\x20list\
    s\x20all\x20the\x20interfaces\x20registered\x20in\x20the\x20interface\n\
    \x20registry.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x17\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x0b\x180\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x0b;T\n\x0c\n\x05\x06\0\x02\0\x04\x12\x03\x0c\x04P\n\x11\n\n\x06\0\
    \x02\0\x04\xb0\xca\xbc\"\x02\x12\x03\x0c\x04P\nb\n\x04\x06\0\x02\x01\x12\
    \x04\x11\x02\x14\x03\x1aT\x20ListImplementations\x20list\x20all\x20the\
    \x20concrete\x20types\x20that\x20implement\x20a\x20given\n\x20interface.\
    \n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x11\x06\x19\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x11\x1a4\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x11?\
    Z\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x12\x04\x13F\n\x12\n\n\x06\0\x02\
    \x01\x04\xb0\xca\xbc\"\x02\x12\x04\x12\x04\x13F\nW\n\x02\x04\0\x12\x03\
    \x18\0#\x1aL\x20ListAllInterfacesRequest\x20is\x20the\x20request\x20type\
    \x20of\x20the\x20ListAllInterfaces\x20RPC.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x18\x08\x20\nZ\n\x02\x04\x01\x12\x04\x1b\0\x1e\x01\x1aN\x20ListAllInter\
    facesResponse\x20is\x20the\x20response\x20type\x20of\x20the\x20ListAllIn\
    terfaces\x20RPC.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1b\x08!\nL\n\x04\x04\
    \x01\x02\0\x12\x03\x1d\x02&\x1a?\x20interface_names\x20is\x20an\x20array\
    \x20of\x20all\x20the\x20registered\x20interfaces.\n\n\x0c\n\x05\x04\x01\
    \x02\0\x04\x12\x03\x1d\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1d\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1d\x12!\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x1d$%\n]\n\x02\x04\x02\x12\x04\"\0%\x01\x1aQ\x20L\
    istImplementationsRequest\x20is\x20the\x20request\x20type\x20of\x20the\
    \x20ListImplementations\n\x20RPC.\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\
    \"\nU\n\x04\x04\x02\x02\0\x12\x03$\x02\x1c\x1aH\x20interface_name\x20def\
    ines\x20the\x20interface\x20to\x20query\x20the\x20implementations\x20for\
    .\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04$\x02\"$\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03$\t\x17\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03$\x1a\x1b\n_\n\x02\x04\x03\x12\x04)\
    \0+\x01\x1aS\x20ListImplementationsResponse\x20is\x20the\x20response\x20\
    type\x20of\x20the\x20ListImplementations\n\x20RPC.\n\n\n\n\x03\x04\x03\
    \x01\x12\x03)\x08#\n\x0b\n\x04\x04\x03\x02\0\x12\x03*\x023\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03*\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03*\
    \x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03*\x12.\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03*12b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
